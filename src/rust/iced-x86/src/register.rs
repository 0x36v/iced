/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

use super::iced_constants::IcedConstants;
use std::fmt;
use std::mem;
use std::ops::{Add, AddAssign, Sub, SubAssign};

#[cfg(feature = "instr_info")]
pub use self::info::*;

#[cfg(feature = "instr_info")]
mod info {
	use super::super::iced_constants::IcedConstants;
	use super::Register;
	use std::mem;

	#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
	pub(crate) static REGISTER_INFOS: &[RegisterInfo; IcedConstants::NUMBER_OF_REGISTERS as usize] = &[
		// GENERATOR-BEGIN: RegisterInfoTable
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		RegisterInfo { register: Register::None as u8, base: Register::None as u8, full_register: Register::None as u8, size: 0 },
		RegisterInfo { register: Register::AL as u8, base: Register::AL as u8, full_register: Register::RAX as u8, size: 1 },
		RegisterInfo { register: Register::CL as u8, base: Register::AL as u8, full_register: Register::RCX as u8, size: 1 },
		RegisterInfo { register: Register::DL as u8, base: Register::AL as u8, full_register: Register::RDX as u8, size: 1 },
		RegisterInfo { register: Register::BL as u8, base: Register::AL as u8, full_register: Register::RBX as u8, size: 1 },
		RegisterInfo { register: Register::AH as u8, base: Register::AL as u8, full_register: Register::RAX as u8, size: 1 },
		RegisterInfo { register: Register::CH as u8, base: Register::AL as u8, full_register: Register::RCX as u8, size: 1 },
		RegisterInfo { register: Register::DH as u8, base: Register::AL as u8, full_register: Register::RDX as u8, size: 1 },
		RegisterInfo { register: Register::BH as u8, base: Register::AL as u8, full_register: Register::RBX as u8, size: 1 },
		RegisterInfo { register: Register::SPL as u8, base: Register::AL as u8, full_register: Register::RSP as u8, size: 1 },
		RegisterInfo { register: Register::BPL as u8, base: Register::AL as u8, full_register: Register::RBP as u8, size: 1 },
		RegisterInfo { register: Register::SIL as u8, base: Register::AL as u8, full_register: Register::RSI as u8, size: 1 },
		RegisterInfo { register: Register::DIL as u8, base: Register::AL as u8, full_register: Register::RDI as u8, size: 1 },
		RegisterInfo { register: Register::R8L as u8, base: Register::AL as u8, full_register: Register::R8 as u8, size: 1 },
		RegisterInfo { register: Register::R9L as u8, base: Register::AL as u8, full_register: Register::R9 as u8, size: 1 },
		RegisterInfo { register: Register::R10L as u8, base: Register::AL as u8, full_register: Register::R10 as u8, size: 1 },
		RegisterInfo { register: Register::R11L as u8, base: Register::AL as u8, full_register: Register::R11 as u8, size: 1 },
		RegisterInfo { register: Register::R12L as u8, base: Register::AL as u8, full_register: Register::R12 as u8, size: 1 },
		RegisterInfo { register: Register::R13L as u8, base: Register::AL as u8, full_register: Register::R13 as u8, size: 1 },
		RegisterInfo { register: Register::R14L as u8, base: Register::AL as u8, full_register: Register::R14 as u8, size: 1 },
		RegisterInfo { register: Register::R15L as u8, base: Register::AL as u8, full_register: Register::R15 as u8, size: 1 },
		RegisterInfo { register: Register::AX as u8, base: Register::AX as u8, full_register: Register::RAX as u8, size: 2 },
		RegisterInfo { register: Register::CX as u8, base: Register::AX as u8, full_register: Register::RCX as u8, size: 2 },
		RegisterInfo { register: Register::DX as u8, base: Register::AX as u8, full_register: Register::RDX as u8, size: 2 },
		RegisterInfo { register: Register::BX as u8, base: Register::AX as u8, full_register: Register::RBX as u8, size: 2 },
		RegisterInfo { register: Register::SP as u8, base: Register::AX as u8, full_register: Register::RSP as u8, size: 2 },
		RegisterInfo { register: Register::BP as u8, base: Register::AX as u8, full_register: Register::RBP as u8, size: 2 },
		RegisterInfo { register: Register::SI as u8, base: Register::AX as u8, full_register: Register::RSI as u8, size: 2 },
		RegisterInfo { register: Register::DI as u8, base: Register::AX as u8, full_register: Register::RDI as u8, size: 2 },
		RegisterInfo { register: Register::R8W as u8, base: Register::AX as u8, full_register: Register::R8 as u8, size: 2 },
		RegisterInfo { register: Register::R9W as u8, base: Register::AX as u8, full_register: Register::R9 as u8, size: 2 },
		RegisterInfo { register: Register::R10W as u8, base: Register::AX as u8, full_register: Register::R10 as u8, size: 2 },
		RegisterInfo { register: Register::R11W as u8, base: Register::AX as u8, full_register: Register::R11 as u8, size: 2 },
		RegisterInfo { register: Register::R12W as u8, base: Register::AX as u8, full_register: Register::R12 as u8, size: 2 },
		RegisterInfo { register: Register::R13W as u8, base: Register::AX as u8, full_register: Register::R13 as u8, size: 2 },
		RegisterInfo { register: Register::R14W as u8, base: Register::AX as u8, full_register: Register::R14 as u8, size: 2 },
		RegisterInfo { register: Register::R15W as u8, base: Register::AX as u8, full_register: Register::R15 as u8, size: 2 },
		RegisterInfo { register: Register::EAX as u8, base: Register::EAX as u8, full_register: Register::RAX as u8, size: 4 },
		RegisterInfo { register: Register::ECX as u8, base: Register::EAX as u8, full_register: Register::RCX as u8, size: 4 },
		RegisterInfo { register: Register::EDX as u8, base: Register::EAX as u8, full_register: Register::RDX as u8, size: 4 },
		RegisterInfo { register: Register::EBX as u8, base: Register::EAX as u8, full_register: Register::RBX as u8, size: 4 },
		RegisterInfo { register: Register::ESP as u8, base: Register::EAX as u8, full_register: Register::RSP as u8, size: 4 },
		RegisterInfo { register: Register::EBP as u8, base: Register::EAX as u8, full_register: Register::RBP as u8, size: 4 },
		RegisterInfo { register: Register::ESI as u8, base: Register::EAX as u8, full_register: Register::RSI as u8, size: 4 },
		RegisterInfo { register: Register::EDI as u8, base: Register::EAX as u8, full_register: Register::RDI as u8, size: 4 },
		RegisterInfo { register: Register::R8D as u8, base: Register::EAX as u8, full_register: Register::R8 as u8, size: 4 },
		RegisterInfo { register: Register::R9D as u8, base: Register::EAX as u8, full_register: Register::R9 as u8, size: 4 },
		RegisterInfo { register: Register::R10D as u8, base: Register::EAX as u8, full_register: Register::R10 as u8, size: 4 },
		RegisterInfo { register: Register::R11D as u8, base: Register::EAX as u8, full_register: Register::R11 as u8, size: 4 },
		RegisterInfo { register: Register::R12D as u8, base: Register::EAX as u8, full_register: Register::R12 as u8, size: 4 },
		RegisterInfo { register: Register::R13D as u8, base: Register::EAX as u8, full_register: Register::R13 as u8, size: 4 },
		RegisterInfo { register: Register::R14D as u8, base: Register::EAX as u8, full_register: Register::R14 as u8, size: 4 },
		RegisterInfo { register: Register::R15D as u8, base: Register::EAX as u8, full_register: Register::R15 as u8, size: 4 },
		RegisterInfo { register: Register::RAX as u8, base: Register::RAX as u8, full_register: Register::RAX as u8, size: 8 },
		RegisterInfo { register: Register::RCX as u8, base: Register::RAX as u8, full_register: Register::RCX as u8, size: 8 },
		RegisterInfo { register: Register::RDX as u8, base: Register::RAX as u8, full_register: Register::RDX as u8, size: 8 },
		RegisterInfo { register: Register::RBX as u8, base: Register::RAX as u8, full_register: Register::RBX as u8, size: 8 },
		RegisterInfo { register: Register::RSP as u8, base: Register::RAX as u8, full_register: Register::RSP as u8, size: 8 },
		RegisterInfo { register: Register::RBP as u8, base: Register::RAX as u8, full_register: Register::RBP as u8, size: 8 },
		RegisterInfo { register: Register::RSI as u8, base: Register::RAX as u8, full_register: Register::RSI as u8, size: 8 },
		RegisterInfo { register: Register::RDI as u8, base: Register::RAX as u8, full_register: Register::RDI as u8, size: 8 },
		RegisterInfo { register: Register::R8 as u8, base: Register::RAX as u8, full_register: Register::R8 as u8, size: 8 },
		RegisterInfo { register: Register::R9 as u8, base: Register::RAX as u8, full_register: Register::R9 as u8, size: 8 },
		RegisterInfo { register: Register::R10 as u8, base: Register::RAX as u8, full_register: Register::R10 as u8, size: 8 },
		RegisterInfo { register: Register::R11 as u8, base: Register::RAX as u8, full_register: Register::R11 as u8, size: 8 },
		RegisterInfo { register: Register::R12 as u8, base: Register::RAX as u8, full_register: Register::R12 as u8, size: 8 },
		RegisterInfo { register: Register::R13 as u8, base: Register::RAX as u8, full_register: Register::R13 as u8, size: 8 },
		RegisterInfo { register: Register::R14 as u8, base: Register::RAX as u8, full_register: Register::R14 as u8, size: 8 },
		RegisterInfo { register: Register::R15 as u8, base: Register::RAX as u8, full_register: Register::R15 as u8, size: 8 },
		RegisterInfo { register: Register::EIP as u8, base: Register::EIP as u8, full_register: Register::RIP as u8, size: 4 },
		RegisterInfo { register: Register::RIP as u8, base: Register::EIP as u8, full_register: Register::RIP as u8, size: 8 },
		RegisterInfo { register: Register::ES as u8, base: Register::ES as u8, full_register: Register::ES as u8, size: 2 },
		RegisterInfo { register: Register::CS as u8, base: Register::ES as u8, full_register: Register::CS as u8, size: 2 },
		RegisterInfo { register: Register::SS as u8, base: Register::ES as u8, full_register: Register::SS as u8, size: 2 },
		RegisterInfo { register: Register::DS as u8, base: Register::ES as u8, full_register: Register::DS as u8, size: 2 },
		RegisterInfo { register: Register::FS as u8, base: Register::ES as u8, full_register: Register::FS as u8, size: 2 },
		RegisterInfo { register: Register::GS as u8, base: Register::ES as u8, full_register: Register::GS as u8, size: 2 },
		RegisterInfo { register: Register::XMM0 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM0 as u8, size: 16 },
		RegisterInfo { register: Register::XMM1 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM1 as u8, size: 16 },
		RegisterInfo { register: Register::XMM2 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM2 as u8, size: 16 },
		RegisterInfo { register: Register::XMM3 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM3 as u8, size: 16 },
		RegisterInfo { register: Register::XMM4 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM4 as u8, size: 16 },
		RegisterInfo { register: Register::XMM5 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM5 as u8, size: 16 },
		RegisterInfo { register: Register::XMM6 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM6 as u8, size: 16 },
		RegisterInfo { register: Register::XMM7 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM7 as u8, size: 16 },
		RegisterInfo { register: Register::XMM8 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM8 as u8, size: 16 },
		RegisterInfo { register: Register::XMM9 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM9 as u8, size: 16 },
		RegisterInfo { register: Register::XMM10 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM10 as u8, size: 16 },
		RegisterInfo { register: Register::XMM11 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM11 as u8, size: 16 },
		RegisterInfo { register: Register::XMM12 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM12 as u8, size: 16 },
		RegisterInfo { register: Register::XMM13 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM13 as u8, size: 16 },
		RegisterInfo { register: Register::XMM14 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM14 as u8, size: 16 },
		RegisterInfo { register: Register::XMM15 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM15 as u8, size: 16 },
		RegisterInfo { register: Register::XMM16 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM16 as u8, size: 16 },
		RegisterInfo { register: Register::XMM17 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM17 as u8, size: 16 },
		RegisterInfo { register: Register::XMM18 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM18 as u8, size: 16 },
		RegisterInfo { register: Register::XMM19 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM19 as u8, size: 16 },
		RegisterInfo { register: Register::XMM20 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM20 as u8, size: 16 },
		RegisterInfo { register: Register::XMM21 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM21 as u8, size: 16 },
		RegisterInfo { register: Register::XMM22 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM22 as u8, size: 16 },
		RegisterInfo { register: Register::XMM23 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM23 as u8, size: 16 },
		RegisterInfo { register: Register::XMM24 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM24 as u8, size: 16 },
		RegisterInfo { register: Register::XMM25 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM25 as u8, size: 16 },
		RegisterInfo { register: Register::XMM26 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM26 as u8, size: 16 },
		RegisterInfo { register: Register::XMM27 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM27 as u8, size: 16 },
		RegisterInfo { register: Register::XMM28 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM28 as u8, size: 16 },
		RegisterInfo { register: Register::XMM29 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM29 as u8, size: 16 },
		RegisterInfo { register: Register::XMM30 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM30 as u8, size: 16 },
		RegisterInfo { register: Register::XMM31 as u8, base: Register::XMM0 as u8, full_register: Register::ZMM31 as u8, size: 16 },
		RegisterInfo { register: Register::YMM0 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM0 as u8, size: 32 },
		RegisterInfo { register: Register::YMM1 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM1 as u8, size: 32 },
		RegisterInfo { register: Register::YMM2 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM2 as u8, size: 32 },
		RegisterInfo { register: Register::YMM3 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM3 as u8, size: 32 },
		RegisterInfo { register: Register::YMM4 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM4 as u8, size: 32 },
		RegisterInfo { register: Register::YMM5 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM5 as u8, size: 32 },
		RegisterInfo { register: Register::YMM6 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM6 as u8, size: 32 },
		RegisterInfo { register: Register::YMM7 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM7 as u8, size: 32 },
		RegisterInfo { register: Register::YMM8 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM8 as u8, size: 32 },
		RegisterInfo { register: Register::YMM9 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM9 as u8, size: 32 },
		RegisterInfo { register: Register::YMM10 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM10 as u8, size: 32 },
		RegisterInfo { register: Register::YMM11 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM11 as u8, size: 32 },
		RegisterInfo { register: Register::YMM12 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM12 as u8, size: 32 },
		RegisterInfo { register: Register::YMM13 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM13 as u8, size: 32 },
		RegisterInfo { register: Register::YMM14 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM14 as u8, size: 32 },
		RegisterInfo { register: Register::YMM15 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM15 as u8, size: 32 },
		RegisterInfo { register: Register::YMM16 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM16 as u8, size: 32 },
		RegisterInfo { register: Register::YMM17 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM17 as u8, size: 32 },
		RegisterInfo { register: Register::YMM18 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM18 as u8, size: 32 },
		RegisterInfo { register: Register::YMM19 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM19 as u8, size: 32 },
		RegisterInfo { register: Register::YMM20 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM20 as u8, size: 32 },
		RegisterInfo { register: Register::YMM21 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM21 as u8, size: 32 },
		RegisterInfo { register: Register::YMM22 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM22 as u8, size: 32 },
		RegisterInfo { register: Register::YMM23 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM23 as u8, size: 32 },
		RegisterInfo { register: Register::YMM24 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM24 as u8, size: 32 },
		RegisterInfo { register: Register::YMM25 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM25 as u8, size: 32 },
		RegisterInfo { register: Register::YMM26 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM26 as u8, size: 32 },
		RegisterInfo { register: Register::YMM27 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM27 as u8, size: 32 },
		RegisterInfo { register: Register::YMM28 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM28 as u8, size: 32 },
		RegisterInfo { register: Register::YMM29 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM29 as u8, size: 32 },
		RegisterInfo { register: Register::YMM30 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM30 as u8, size: 32 },
		RegisterInfo { register: Register::YMM31 as u8, base: Register::YMM0 as u8, full_register: Register::ZMM31 as u8, size: 32 },
		RegisterInfo { register: Register::ZMM0 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM0 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM1 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM1 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM2 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM2 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM3 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM3 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM4 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM4 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM5 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM5 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM6 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM6 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM7 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM7 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM8 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM8 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM9 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM9 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM10 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM10 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM11 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM11 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM12 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM12 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM13 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM13 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM14 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM14 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM15 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM15 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM16 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM16 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM17 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM17 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM18 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM18 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM19 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM19 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM20 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM20 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM21 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM21 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM22 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM22 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM23 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM23 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM24 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM24 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM25 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM25 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM26 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM26 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM27 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM27 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM28 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM28 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM29 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM29 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM30 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM30 as u8, size: 64 },
		RegisterInfo { register: Register::ZMM31 as u8, base: Register::ZMM0 as u8, full_register: Register::ZMM31 as u8, size: 64 },
		RegisterInfo { register: Register::K0 as u8, base: Register::K0 as u8, full_register: Register::K0 as u8, size: 8 },
		RegisterInfo { register: Register::K1 as u8, base: Register::K0 as u8, full_register: Register::K1 as u8, size: 8 },
		RegisterInfo { register: Register::K2 as u8, base: Register::K0 as u8, full_register: Register::K2 as u8, size: 8 },
		RegisterInfo { register: Register::K3 as u8, base: Register::K0 as u8, full_register: Register::K3 as u8, size: 8 },
		RegisterInfo { register: Register::K4 as u8, base: Register::K0 as u8, full_register: Register::K4 as u8, size: 8 },
		RegisterInfo { register: Register::K5 as u8, base: Register::K0 as u8, full_register: Register::K5 as u8, size: 8 },
		RegisterInfo { register: Register::K6 as u8, base: Register::K0 as u8, full_register: Register::K6 as u8, size: 8 },
		RegisterInfo { register: Register::K7 as u8, base: Register::K0 as u8, full_register: Register::K7 as u8, size: 8 },
		RegisterInfo { register: Register::BND0 as u8, base: Register::BND0 as u8, full_register: Register::BND0 as u8, size: 16 },
		RegisterInfo { register: Register::BND1 as u8, base: Register::BND0 as u8, full_register: Register::BND1 as u8, size: 16 },
		RegisterInfo { register: Register::BND2 as u8, base: Register::BND0 as u8, full_register: Register::BND2 as u8, size: 16 },
		RegisterInfo { register: Register::BND3 as u8, base: Register::BND0 as u8, full_register: Register::BND3 as u8, size: 16 },
		RegisterInfo { register: Register::CR0 as u8, base: Register::CR0 as u8, full_register: Register::CR0 as u8, size: 8 },
		RegisterInfo { register: Register::CR1 as u8, base: Register::CR0 as u8, full_register: Register::CR1 as u8, size: 8 },
		RegisterInfo { register: Register::CR2 as u8, base: Register::CR0 as u8, full_register: Register::CR2 as u8, size: 8 },
		RegisterInfo { register: Register::CR3 as u8, base: Register::CR0 as u8, full_register: Register::CR3 as u8, size: 8 },
		RegisterInfo { register: Register::CR4 as u8, base: Register::CR0 as u8, full_register: Register::CR4 as u8, size: 8 },
		RegisterInfo { register: Register::CR5 as u8, base: Register::CR0 as u8, full_register: Register::CR5 as u8, size: 8 },
		RegisterInfo { register: Register::CR6 as u8, base: Register::CR0 as u8, full_register: Register::CR6 as u8, size: 8 },
		RegisterInfo { register: Register::CR7 as u8, base: Register::CR0 as u8, full_register: Register::CR7 as u8, size: 8 },
		RegisterInfo { register: Register::CR8 as u8, base: Register::CR0 as u8, full_register: Register::CR8 as u8, size: 8 },
		RegisterInfo { register: Register::CR9 as u8, base: Register::CR0 as u8, full_register: Register::CR9 as u8, size: 8 },
		RegisterInfo { register: Register::CR10 as u8, base: Register::CR0 as u8, full_register: Register::CR10 as u8, size: 8 },
		RegisterInfo { register: Register::CR11 as u8, base: Register::CR0 as u8, full_register: Register::CR11 as u8, size: 8 },
		RegisterInfo { register: Register::CR12 as u8, base: Register::CR0 as u8, full_register: Register::CR12 as u8, size: 8 },
		RegisterInfo { register: Register::CR13 as u8, base: Register::CR0 as u8, full_register: Register::CR13 as u8, size: 8 },
		RegisterInfo { register: Register::CR14 as u8, base: Register::CR0 as u8, full_register: Register::CR14 as u8, size: 8 },
		RegisterInfo { register: Register::CR15 as u8, base: Register::CR0 as u8, full_register: Register::CR15 as u8, size: 8 },
		RegisterInfo { register: Register::DR0 as u8, base: Register::DR0 as u8, full_register: Register::DR0 as u8, size: 8 },
		RegisterInfo { register: Register::DR1 as u8, base: Register::DR0 as u8, full_register: Register::DR1 as u8, size: 8 },
		RegisterInfo { register: Register::DR2 as u8, base: Register::DR0 as u8, full_register: Register::DR2 as u8, size: 8 },
		RegisterInfo { register: Register::DR3 as u8, base: Register::DR0 as u8, full_register: Register::DR3 as u8, size: 8 },
		RegisterInfo { register: Register::DR4 as u8, base: Register::DR0 as u8, full_register: Register::DR4 as u8, size: 8 },
		RegisterInfo { register: Register::DR5 as u8, base: Register::DR0 as u8, full_register: Register::DR5 as u8, size: 8 },
		RegisterInfo { register: Register::DR6 as u8, base: Register::DR0 as u8, full_register: Register::DR6 as u8, size: 8 },
		RegisterInfo { register: Register::DR7 as u8, base: Register::DR0 as u8, full_register: Register::DR7 as u8, size: 8 },
		RegisterInfo { register: Register::DR8 as u8, base: Register::DR0 as u8, full_register: Register::DR8 as u8, size: 8 },
		RegisterInfo { register: Register::DR9 as u8, base: Register::DR0 as u8, full_register: Register::DR9 as u8, size: 8 },
		RegisterInfo { register: Register::DR10 as u8, base: Register::DR0 as u8, full_register: Register::DR10 as u8, size: 8 },
		RegisterInfo { register: Register::DR11 as u8, base: Register::DR0 as u8, full_register: Register::DR11 as u8, size: 8 },
		RegisterInfo { register: Register::DR12 as u8, base: Register::DR0 as u8, full_register: Register::DR12 as u8, size: 8 },
		RegisterInfo { register: Register::DR13 as u8, base: Register::DR0 as u8, full_register: Register::DR13 as u8, size: 8 },
		RegisterInfo { register: Register::DR14 as u8, base: Register::DR0 as u8, full_register: Register::DR14 as u8, size: 8 },
		RegisterInfo { register: Register::DR15 as u8, base: Register::DR0 as u8, full_register: Register::DR15 as u8, size: 8 },
		RegisterInfo { register: Register::ST0 as u8, base: Register::ST0 as u8, full_register: Register::ST0 as u8, size: 10 },
		RegisterInfo { register: Register::ST1 as u8, base: Register::ST0 as u8, full_register: Register::ST1 as u8, size: 10 },
		RegisterInfo { register: Register::ST2 as u8, base: Register::ST0 as u8, full_register: Register::ST2 as u8, size: 10 },
		RegisterInfo { register: Register::ST3 as u8, base: Register::ST0 as u8, full_register: Register::ST3 as u8, size: 10 },
		RegisterInfo { register: Register::ST4 as u8, base: Register::ST0 as u8, full_register: Register::ST4 as u8, size: 10 },
		RegisterInfo { register: Register::ST5 as u8, base: Register::ST0 as u8, full_register: Register::ST5 as u8, size: 10 },
		RegisterInfo { register: Register::ST6 as u8, base: Register::ST0 as u8, full_register: Register::ST6 as u8, size: 10 },
		RegisterInfo { register: Register::ST7 as u8, base: Register::ST0 as u8, full_register: Register::ST7 as u8, size: 10 },
		RegisterInfo { register: Register::MM0 as u8, base: Register::MM0 as u8, full_register: Register::MM0 as u8, size: 8 },
		RegisterInfo { register: Register::MM1 as u8, base: Register::MM0 as u8, full_register: Register::MM1 as u8, size: 8 },
		RegisterInfo { register: Register::MM2 as u8, base: Register::MM0 as u8, full_register: Register::MM2 as u8, size: 8 },
		RegisterInfo { register: Register::MM3 as u8, base: Register::MM0 as u8, full_register: Register::MM3 as u8, size: 8 },
		RegisterInfo { register: Register::MM4 as u8, base: Register::MM0 as u8, full_register: Register::MM4 as u8, size: 8 },
		RegisterInfo { register: Register::MM5 as u8, base: Register::MM0 as u8, full_register: Register::MM5 as u8, size: 8 },
		RegisterInfo { register: Register::MM6 as u8, base: Register::MM0 as u8, full_register: Register::MM6 as u8, size: 8 },
		RegisterInfo { register: Register::MM7 as u8, base: Register::MM0 as u8, full_register: Register::MM7 as u8, size: 8 },
		RegisterInfo { register: Register::TR0 as u8, base: Register::TR0 as u8, full_register: Register::TR0 as u8, size: 4 },
		RegisterInfo { register: Register::TR1 as u8, base: Register::TR0 as u8, full_register: Register::TR1 as u8, size: 4 },
		RegisterInfo { register: Register::TR2 as u8, base: Register::TR0 as u8, full_register: Register::TR2 as u8, size: 4 },
		RegisterInfo { register: Register::TR3 as u8, base: Register::TR0 as u8, full_register: Register::TR3 as u8, size: 4 },
		RegisterInfo { register: Register::TR4 as u8, base: Register::TR0 as u8, full_register: Register::TR4 as u8, size: 4 },
		RegisterInfo { register: Register::TR5 as u8, base: Register::TR0 as u8, full_register: Register::TR5 as u8, size: 4 },
		RegisterInfo { register: Register::TR6 as u8, base: Register::TR0 as u8, full_register: Register::TR6 as u8, size: 4 },
		RegisterInfo { register: Register::TR7 as u8, base: Register::TR0 as u8, full_register: Register::TR7 as u8, size: 4 },
		// GENERATOR-END: RegisterInfoTable
	];

	/// [`Register`] information
	///
	/// [`Register`]: enum.Register.html
	#[derive(Copy, Clone)]
	pub struct RegisterInfo {
		register: u8,
		base: u8,
		full_register: u8,
		size: u8,
	}

	#[cfg_attr(feature = "cargo-clippy", allow(clippy::trivially_copy_pass_by_ref))]
	impl RegisterInfo {
		/// Gets the register
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = Register::EAX.info();
		/// assert_eq!(Register::EAX, info.register());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn register(&self) -> Register {
			// safe: register is always a valid Register value
			unsafe { mem::transmute(self.register) }
		}

		/// Gets the base register, eg. `AL`, `AX`, `EAX`, `RAX`, `MM0`, `XMM0`, `YMM0`, `ZMM0`, `ES`
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = Register::GS.info();
		/// assert_eq!(Register::ES, info.base());
		/// let info = Register::RDX.info();
		/// assert_eq!(Register::RAX, info.base());
		/// let info = Register::XMM13.info();
		/// assert_eq!(Register::XMM0, info.base());
		/// let info = Register::YMM13.info();
		/// assert_eq!(Register::YMM0, info.base());
		/// let info = Register::ZMM13.info();
		/// assert_eq!(Register::ZMM0, info.base());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn base(&self) -> Register {
			// safe: base is always a valid Register value
			unsafe { mem::transmute(self.base) }
		}

		/// The register number (index) relative to [`base()`], eg. 0-15, or 0-31, or if 8-bit GPR, 0-19
		///
		/// [`base()`]: #method.base
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = Register::GS.info();
		/// assert_eq!(5, info.number());
		/// let info = Register::RDX.info();
		/// assert_eq!(2, info.number());
		/// let info = Register::XMM13.info();
		/// assert_eq!(13, info.number());
		/// let info = Register::YMM13.info();
		/// assert_eq!(13, info.number());
		/// let info = Register::ZMM13.info();
		/// assert_eq!(13, info.number());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn number(&self) -> u32 {
			(self.register - self.base) as u32
		}

		/// The full register that this one is a part of, eg. `CL`/`CH`/`CX`/`ECX`/`RCX` -> `RCX`, `XMM11`/`YMM11`/`ZMM11` -> `ZMM11`
		///
		/// ```
		/// use iced_x86::*;
		/// let info = Register::GS.info();
		/// assert_eq!(Register::GS, info.full_register());
		/// let info = Register::BH.info();
		/// assert_eq!(Register::RBX, info.full_register());
		/// let info = Register::DX.info();
		/// assert_eq!(Register::RDX, info.full_register());
		/// let info = Register::ESP.info();
		/// assert_eq!(Register::RSP, info.full_register());
		/// let info = Register::RCX.info();
		/// assert_eq!(Register::RCX, info.full_register());
		/// let info = Register::XMM3.info();
		/// assert_eq!(Register::ZMM3, info.full_register());
		/// let info = Register::YMM3.info();
		/// assert_eq!(Register::ZMM3, info.full_register());
		/// let info = Register::ZMM3.info();
		/// assert_eq!(Register::ZMM3, info.full_register());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn full_register(&self) -> Register {
			// safe: full_register is always a valid Register value
			unsafe { mem::transmute(self.full_register) }
		}

		/// Gets the full register that this one is a part of, except if it's a GPR in which case the 32-bit register is returned,
		/// eg. `CL`/`CH`/`CX`/`ECX`/`RCX` -> `ECX`, `XMM11`/`YMM11`/`ZMM11` -> `ZMM11`
		///
		/// ```
		/// use iced_x86::*;
		/// let info = Register::GS.info();
		/// assert_eq!(Register::GS, info.full_register32());
		/// let info = Register::BH.info();
		/// assert_eq!(Register::EBX, info.full_register32());
		/// let info = Register::DX.info();
		/// assert_eq!(Register::EDX, info.full_register32());
		/// let info = Register::ESP.info();
		/// assert_eq!(Register::ESP, info.full_register32());
		/// let info = Register::RCX.info();
		/// assert_eq!(Register::ECX, info.full_register32());
		/// let info = Register::XMM3.info();
		/// assert_eq!(Register::ZMM3, info.full_register32());
		/// let info = Register::YMM3.info();
		/// assert_eq!(Register::ZMM3, info.full_register32());
		/// let info = Register::ZMM3.info();
		/// assert_eq!(Register::ZMM3, info.full_register32());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn full_register32(&self) -> Register {
			// safe: full_register is always a valid Register value
			let full_register: Register = unsafe { mem::transmute(self.full_register) };
			if full_register.is_gpr() {
				debug_assert!(Register::RAX <= full_register && full_register <= Register::R15);
				unsafe { mem::transmute(full_register as u8 - Register::RAX as u8 + Register::EAX as u8) }
			} else {
				full_register
			}
		}

		/// Size of the register in bytes
		///
		/// ```
		/// use iced_x86::*;
		/// let info = Register::GS.info();
		/// assert_eq!(2, info.size());
		/// let info = Register::BH.info();
		/// assert_eq!(1, info.size());
		/// let info = Register::DX.info();
		/// assert_eq!(2, info.size());
		/// let info = Register::ESP.info();
		/// assert_eq!(4, info.size());
		/// let info = Register::RCX.info();
		/// assert_eq!(8, info.size());
		/// let info = Register::XMM3.info();
		/// assert_eq!(16, info.size());
		/// let info = Register::YMM3.info();
		/// assert_eq!(32, info.size());
		/// let info = Register::ZMM3.info();
		/// assert_eq!(64, info.size());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn size(&self) -> u32 {
			self.size as u32
		}
	}
}

#[cfg(feature = "instr_info")]
impl Register {
	/// Gets register info
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// let info = Register::EAX.info();
	/// assert_eq!(4, info.size());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn info(self) -> &'static RegisterInfo {
		unsafe { &*REGISTER_INFOS.get_unchecked(self as usize) }
	}

	/// Gets the base register, eg. `AL`, `AX`, `EAX`, `RAX`, `MM0`, `XMM0`, `YMM0`, `ZMM0`, `ES`
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(Register::ES, Register::GS.base());
	/// assert_eq!(Register::AL, Register::SIL.base());
	/// assert_eq!(Register::AX, Register::SP.base());
	/// assert_eq!(Register::EAX, Register::R13D.base());
	/// assert_eq!(Register::RAX, Register::RBP.base());
	/// assert_eq!(Register::MM0, Register::MM6.base());
	/// assert_eq!(Register::XMM0, Register::XMM28.base());
	/// assert_eq!(Register::YMM0, Register::YMM12.base());
	/// assert_eq!(Register::ZMM0, Register::ZMM31.base());
	/// assert_eq!(Register::K0, Register::K3.base());
	/// assert_eq!(Register::BND0, Register::BND1.base());
	/// assert_eq!(Register::ST0, Register::ST7.base());
	/// assert_eq!(Register::CR0, Register::CR8.base());
	/// assert_eq!(Register::DR0, Register::DR6.base());
	/// assert_eq!(Register::TR0, Register::TR3.base());
	/// assert_eq!(Register::EIP, Register::RIP.base());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn base(self) -> Self {
		self.info().base()
	}

	/// The register number (index) relative to [`base()`], eg. 0-15, or 0-31, or if 8-bit GPR, 0-19
	///
	/// [`base()`]: #method.base
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(5, Register::GS.number());
	/// assert_eq!(10, Register::SIL.number());
	/// assert_eq!(4, Register::SP.number());
	/// assert_eq!(13, Register::R13D.number());
	/// assert_eq!(5, Register::RBP.number());
	/// assert_eq!(6, Register::MM6.number());
	/// assert_eq!(28, Register::XMM28.number());
	/// assert_eq!(12, Register::YMM12.number());
	/// assert_eq!(31, Register::ZMM31.number());
	/// assert_eq!(3, Register::K3.number());
	/// assert_eq!(1, Register::BND1.number());
	/// assert_eq!(7, Register::ST7.number());
	/// assert_eq!(8, Register::CR8.number());
	/// assert_eq!(6, Register::DR6.number());
	/// assert_eq!(3, Register::TR3.number());
	/// assert_eq!(1, Register::RIP.number());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn number(self) -> u32 {
		self.info().number()
	}

	/// Gets the full register that this one is a part of, eg. `CL`/`CH`/`CX`/`ECX`/`RCX` -> `RCX`, `XMM11`/`YMM11`/`ZMM11` -> `ZMM11`
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(Register::GS, Register::GS.full_register());
	/// assert_eq!(Register::RSI, Register::SIL.full_register());
	/// assert_eq!(Register::RSP, Register::SP.full_register());
	/// assert_eq!(Register::R13, Register::R13D.full_register());
	/// assert_eq!(Register::RBP, Register::RBP.full_register());
	/// assert_eq!(Register::MM6, Register::MM6.full_register());
	/// assert_eq!(Register::ZMM10, Register::XMM10.full_register());
	/// assert_eq!(Register::ZMM10, Register::YMM10.full_register());
	/// assert_eq!(Register::ZMM10, Register::ZMM10.full_register());
	/// assert_eq!(Register::K3, Register::K3.full_register());
	/// assert_eq!(Register::BND1, Register::BND1.full_register());
	/// assert_eq!(Register::ST7, Register::ST7.full_register());
	/// assert_eq!(Register::CR8, Register::CR8.full_register());
	/// assert_eq!(Register::DR6, Register::DR6.full_register());
	/// assert_eq!(Register::TR3, Register::TR3.full_register());
	/// assert_eq!(Register::RIP, Register::RIP.full_register());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn full_register(self) -> Self {
		self.info().full_register()
	}

	/// Gets the full register that this one is a part of, except if it's a GPR in which case the 32-bit register is returned,
	/// eg. `CL`/`CH`/`CX`/`ECX`/`RCX` -> `ECX`, `XMM11`/`YMM11`/`ZMM11` -> `ZMM11`
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(Register::GS, Register::GS.full_register32());
	/// assert_eq!(Register::ESI, Register::SIL.full_register32());
	/// assert_eq!(Register::ESP, Register::SP.full_register32());
	/// assert_eq!(Register::R13D, Register::R13D.full_register32());
	/// assert_eq!(Register::EBP, Register::RBP.full_register32());
	/// assert_eq!(Register::MM6, Register::MM6.full_register32());
	/// assert_eq!(Register::ZMM10, Register::XMM10.full_register32());
	/// assert_eq!(Register::ZMM10, Register::YMM10.full_register32());
	/// assert_eq!(Register::ZMM10, Register::ZMM10.full_register32());
	/// assert_eq!(Register::K3, Register::K3.full_register32());
	/// assert_eq!(Register::BND1, Register::BND1.full_register32());
	/// assert_eq!(Register::ST7, Register::ST7.full_register32());
	/// assert_eq!(Register::CR8, Register::CR8.full_register32());
	/// assert_eq!(Register::DR6, Register::DR6.full_register32());
	/// assert_eq!(Register::TR3, Register::TR3.full_register32());
	/// assert_eq!(Register::RIP, Register::RIP.full_register32());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn full_register32(self) -> Self {
		self.info().full_register32()
	}

	/// Gets the size of the register in bytes
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(2, Register::GS.size());
	/// assert_eq!(1, Register::SIL.size());
	/// assert_eq!(2, Register::SP.size());
	/// assert_eq!(4, Register::R13D.size());
	/// assert_eq!(8, Register::RBP.size());
	/// assert_eq!(8, Register::MM6.size());
	/// assert_eq!(16, Register::XMM10.size());
	/// assert_eq!(32, Register::YMM10.size());
	/// assert_eq!(64, Register::ZMM10.size());
	/// assert_eq!(8, Register::K3.size());
	/// assert_eq!(16, Register::BND1.size());
	/// assert_eq!(10, Register::ST7.size());
	/// assert_eq!(8, Register::CR8.size());
	/// assert_eq!(8, Register::DR6.size());
	/// assert_eq!(4, Register::TR3.size());
	/// assert_eq!(8, Register::RIP.size());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn size(self) -> u32 {
		self.info().size()
	}

	/// Checks if it's a segment register (`ES`, `CS`, `SS`, `DS`, `FS`, `GS`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(Register::GS.is_segment_register());
	/// assert!(!Register::RCX.is_segment_register());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_segment_register(self) -> bool {
		Register::ES <= self && self <= Register::GS
	}

	/// Checks if it's a general purpose register (`AL`-`R15L`, `AX`-`R15W`, `EAX`-`R15D`, `RAX`-`R15`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::GS.is_gpr());
	/// assert!(Register::CH.is_gpr());
	/// assert!(Register::DX.is_gpr());
	/// assert!(Register::R13D.is_gpr());
	/// assert!(Register::RSP.is_gpr());
	/// assert!(!Register::XMM0.is_gpr());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_gpr(self) -> bool {
		Register::AL <= self && self <= Register::R15
	}

	/// Checks if it's an 8-bit general purpose register (`AL`-`R15L`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::GS.is_gpr8());
	/// assert!(Register::CH.is_gpr8());
	/// assert!(!Register::DX.is_gpr8());
	/// assert!(!Register::R13D.is_gpr8());
	/// assert!(!Register::RSP.is_gpr8());
	/// assert!(!Register::XMM0.is_gpr8());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_gpr8(self) -> bool {
		Register::AL <= self && self <= Register::R15L
	}

	/// Checks if it's a 16-bit general purpose register (`AX`-`R15W`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::GS.is_gpr16());
	/// assert!(!Register::CH.is_gpr16());
	/// assert!(Register::DX.is_gpr16());
	/// assert!(!Register::R13D.is_gpr16());
	/// assert!(!Register::RSP.is_gpr16());
	/// assert!(!Register::XMM0.is_gpr16());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_gpr16(self) -> bool {
		Register::AX <= self && self <= Register::R15W
	}

	/// Checks if it's a 32-bit general purpose register (`EAX`-`R15D`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::GS.is_gpr32());
	/// assert!(!Register::CH.is_gpr32());
	/// assert!(!Register::DX.is_gpr32());
	/// assert!(Register::R13D.is_gpr32());
	/// assert!(!Register::RSP.is_gpr32());
	/// assert!(!Register::XMM0.is_gpr32());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_gpr32(self) -> bool {
		Register::EAX <= self && self <= Register::R15D
	}

	/// Checks if it's a 64-bit general purpose register (`RAX`-`R15`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::GS.is_gpr64());
	/// assert!(!Register::CH.is_gpr64());
	/// assert!(!Register::DX.is_gpr64());
	/// assert!(!Register::R13D.is_gpr64());
	/// assert!(Register::RSP.is_gpr64());
	/// assert!(!Register::XMM0.is_gpr64());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_gpr64(self) -> bool {
		Register::RAX <= self && self <= Register::R15
	}

	/// Checks if it's a 128-bit vector register (`XMM0`-`XMM31`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::R13D.is_xmm());
	/// assert!(!Register::RSP.is_xmm());
	/// assert!(Register::XMM0.is_xmm());
	/// assert!(!Register::YMM0.is_xmm());
	/// assert!(!Register::ZMM0.is_xmm());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_xmm(self) -> bool {
		Register::XMM0 <= self && self <= IcedConstants::XMM_LAST
	}

	/// Checks if it's a 256-bit vector register (`YMM0`-`YMM31`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::R13D.is_ymm());
	/// assert!(!Register::RSP.is_ymm());
	/// assert!(!Register::XMM0.is_ymm());
	/// assert!(Register::YMM0.is_ymm());
	/// assert!(!Register::ZMM0.is_ymm());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_ymm(self) -> bool {
		Register::YMM0 <= self && self <= IcedConstants::YMM_LAST
	}

	/// Checks if it's a 512-bit vector register (`ZMM0`-`ZMM31`)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::R13D.is_zmm());
	/// assert!(!Register::RSP.is_zmm());
	/// assert!(!Register::XMM0.is_zmm());
	/// assert!(!Register::YMM0.is_zmm());
	/// assert!(Register::ZMM0.is_zmm());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_zmm(self) -> bool {
		Register::ZMM0 <= self && self <= IcedConstants::ZMM_LAST
	}

	/// Checks if it's an `XMM`, `YMM` or `ZMM` register
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!Register::R13D.is_vector_register());
	/// assert!(!Register::RSP.is_vector_register());
	/// assert!(Register::XMM0.is_vector_register());
	/// assert!(Register::YMM0.is_vector_register());
	/// assert!(Register::ZMM0.is_vector_register());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_vector_register(self) -> bool {
		Register::XMM0 <= self && self <= IcedConstants::VMM_LAST
	}
}

// GENERATOR-BEGIN: Register
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
/// A register
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[cfg_attr(has_non_exhaustive, non_exhaustive)]
#[allow(missing_docs)]
pub enum Register {
	None,
	AL,
	CL,
	DL,
	BL,
	AH,
	CH,
	DH,
	BH,
	SPL,
	BPL,
	SIL,
	DIL,
	R8L,
	R9L,
	R10L,
	R11L,
	R12L,
	R13L,
	R14L,
	R15L,
	AX,
	CX,
	DX,
	BX,
	SP,
	BP,
	SI,
	DI,
	R8W,
	R9W,
	R10W,
	R11W,
	R12W,
	R13W,
	R14W,
	R15W,
	EAX,
	ECX,
	EDX,
	EBX,
	ESP,
	EBP,
	ESI,
	EDI,
	R8D,
	R9D,
	R10D,
	R11D,
	R12D,
	R13D,
	R14D,
	R15D,
	RAX,
	RCX,
	RDX,
	RBX,
	RSP,
	RBP,
	RSI,
	RDI,
	R8,
	R9,
	R10,
	R11,
	R12,
	R13,
	R14,
	R15,
	EIP,
	RIP,
	ES,
	CS,
	SS,
	DS,
	FS,
	GS,
	XMM0,
	XMM1,
	XMM2,
	XMM3,
	XMM4,
	XMM5,
	XMM6,
	XMM7,
	XMM8,
	XMM9,
	XMM10,
	XMM11,
	XMM12,
	XMM13,
	XMM14,
	XMM15,
	XMM16,
	XMM17,
	XMM18,
	XMM19,
	XMM20,
	XMM21,
	XMM22,
	XMM23,
	XMM24,
	XMM25,
	XMM26,
	XMM27,
	XMM28,
	XMM29,
	XMM30,
	XMM31,
	YMM0,
	YMM1,
	YMM2,
	YMM3,
	YMM4,
	YMM5,
	YMM6,
	YMM7,
	YMM8,
	YMM9,
	YMM10,
	YMM11,
	YMM12,
	YMM13,
	YMM14,
	YMM15,
	YMM16,
	YMM17,
	YMM18,
	YMM19,
	YMM20,
	YMM21,
	YMM22,
	YMM23,
	YMM24,
	YMM25,
	YMM26,
	YMM27,
	YMM28,
	YMM29,
	YMM30,
	YMM31,
	ZMM0,
	ZMM1,
	ZMM2,
	ZMM3,
	ZMM4,
	ZMM5,
	ZMM6,
	ZMM7,
	ZMM8,
	ZMM9,
	ZMM10,
	ZMM11,
	ZMM12,
	ZMM13,
	ZMM14,
	ZMM15,
	ZMM16,
	ZMM17,
	ZMM18,
	ZMM19,
	ZMM20,
	ZMM21,
	ZMM22,
	ZMM23,
	ZMM24,
	ZMM25,
	ZMM26,
	ZMM27,
	ZMM28,
	ZMM29,
	ZMM30,
	ZMM31,
	K0,
	K1,
	K2,
	K3,
	K4,
	K5,
	K6,
	K7,
	BND0,
	BND1,
	BND2,
	BND3,
	CR0,
	CR1,
	CR2,
	CR3,
	CR4,
	CR5,
	CR6,
	CR7,
	CR8,
	CR9,
	CR10,
	CR11,
	CR12,
	CR13,
	CR14,
	CR15,
	DR0,
	DR1,
	DR2,
	DR3,
	DR4,
	DR5,
	DR6,
	DR7,
	DR8,
	DR9,
	DR10,
	DR11,
	DR12,
	DR13,
	DR14,
	DR15,
	ST0,
	ST1,
	ST2,
	ST3,
	ST4,
	ST5,
	ST6,
	ST7,
	MM0,
	MM1,
	MM2,
	MM3,
	MM4,
	MM5,
	MM6,
	MM7,
	TR0,
	TR1,
	TR2,
	TR3,
	TR4,
	TR5,
	TR6,
	TR7,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_REGISTER: [&str; 241] = [
	"None",
	"AL",
	"CL",
	"DL",
	"BL",
	"AH",
	"CH",
	"DH",
	"BH",
	"SPL",
	"BPL",
	"SIL",
	"DIL",
	"R8L",
	"R9L",
	"R10L",
	"R11L",
	"R12L",
	"R13L",
	"R14L",
	"R15L",
	"AX",
	"CX",
	"DX",
	"BX",
	"SP",
	"BP",
	"SI",
	"DI",
	"R8W",
	"R9W",
	"R10W",
	"R11W",
	"R12W",
	"R13W",
	"R14W",
	"R15W",
	"EAX",
	"ECX",
	"EDX",
	"EBX",
	"ESP",
	"EBP",
	"ESI",
	"EDI",
	"R8D",
	"R9D",
	"R10D",
	"R11D",
	"R12D",
	"R13D",
	"R14D",
	"R15D",
	"RAX",
	"RCX",
	"RDX",
	"RBX",
	"RSP",
	"RBP",
	"RSI",
	"RDI",
	"R8",
	"R9",
	"R10",
	"R11",
	"R12",
	"R13",
	"R14",
	"R15",
	"EIP",
	"RIP",
	"ES",
	"CS",
	"SS",
	"DS",
	"FS",
	"GS",
	"XMM0",
	"XMM1",
	"XMM2",
	"XMM3",
	"XMM4",
	"XMM5",
	"XMM6",
	"XMM7",
	"XMM8",
	"XMM9",
	"XMM10",
	"XMM11",
	"XMM12",
	"XMM13",
	"XMM14",
	"XMM15",
	"XMM16",
	"XMM17",
	"XMM18",
	"XMM19",
	"XMM20",
	"XMM21",
	"XMM22",
	"XMM23",
	"XMM24",
	"XMM25",
	"XMM26",
	"XMM27",
	"XMM28",
	"XMM29",
	"XMM30",
	"XMM31",
	"YMM0",
	"YMM1",
	"YMM2",
	"YMM3",
	"YMM4",
	"YMM5",
	"YMM6",
	"YMM7",
	"YMM8",
	"YMM9",
	"YMM10",
	"YMM11",
	"YMM12",
	"YMM13",
	"YMM14",
	"YMM15",
	"YMM16",
	"YMM17",
	"YMM18",
	"YMM19",
	"YMM20",
	"YMM21",
	"YMM22",
	"YMM23",
	"YMM24",
	"YMM25",
	"YMM26",
	"YMM27",
	"YMM28",
	"YMM29",
	"YMM30",
	"YMM31",
	"ZMM0",
	"ZMM1",
	"ZMM2",
	"ZMM3",
	"ZMM4",
	"ZMM5",
	"ZMM6",
	"ZMM7",
	"ZMM8",
	"ZMM9",
	"ZMM10",
	"ZMM11",
	"ZMM12",
	"ZMM13",
	"ZMM14",
	"ZMM15",
	"ZMM16",
	"ZMM17",
	"ZMM18",
	"ZMM19",
	"ZMM20",
	"ZMM21",
	"ZMM22",
	"ZMM23",
	"ZMM24",
	"ZMM25",
	"ZMM26",
	"ZMM27",
	"ZMM28",
	"ZMM29",
	"ZMM30",
	"ZMM31",
	"K0",
	"K1",
	"K2",
	"K3",
	"K4",
	"K5",
	"K6",
	"K7",
	"BND0",
	"BND1",
	"BND2",
	"BND3",
	"CR0",
	"CR1",
	"CR2",
	"CR3",
	"CR4",
	"CR5",
	"CR6",
	"CR7",
	"CR8",
	"CR9",
	"CR10",
	"CR11",
	"CR12",
	"CR13",
	"CR14",
	"CR15",
	"DR0",
	"DR1",
	"DR2",
	"DR3",
	"DR4",
	"DR5",
	"DR6",
	"DR7",
	"DR8",
	"DR9",
	"DR10",
	"DR11",
	"DR12",
	"DR13",
	"DR14",
	"DR15",
	"ST0",
	"ST1",
	"ST2",
	"ST3",
	"ST4",
	"ST5",
	"ST6",
	"ST7",
	"MM0",
	"MM1",
	"MM2",
	"MM3",
	"MM4",
	"MM5",
	"MM6",
	"MM7",
	"TR0",
	"TR1",
	"TR2",
	"TR3",
	"TR4",
	"TR5",
	"TR6",
	"TR7",
];
impl fmt::Debug for Register {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_REGISTER[*self as usize])?;
		Ok(())
	}
}
impl Default for Register {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		Register::None
	}
}
// GENERATOR-END: Register

impl Register {
	#[cfg_attr(has_must_use, must_use)]
	fn add(self, rhs: u32) -> Self {
		let result = (self as u32).wrapping_add(rhs);
		if result < IcedConstants::NUMBER_OF_REGISTERS {
			// safe: guaranteed to return a valid enum value
			unsafe { mem::transmute(result as u8) }
		} else {
			panic!()
		}
	}
	#[cfg_attr(has_must_use, must_use)]
	fn sub(self, rhs: u32) -> Self {
		let result = (self as u32).wrapping_sub(rhs);
		if result < IcedConstants::NUMBER_OF_REGISTERS {
			// safe: guaranteed to return a valid enum value
			unsafe { mem::transmute(result as u8) }
		} else {
			panic!()
		}
	}
}
// i32 + Register
impl Add<Register> for i32 {
	type Output = Register;

	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn add(self, rhs: Register) -> Self::Output {
		rhs.add(self as u32)
	}
}
// u32 + Register
impl Add<Register> for u32 {
	type Output = Register;

	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn add(self, rhs: Register) -> Self::Output {
		rhs.add(self)
	}
}
// Register + i32
impl Add<i32> for Register {
	type Output = Self;

	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn add(self, rhs: i32) -> Self::Output {
		self.add(rhs as u32)
	}
}
// Register + u32
impl Add<u32> for Register {
	type Output = Self;

	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn add(self, rhs: u32) -> Self::Output {
		self.add(rhs)
	}
}
// Register += i32
impl AddAssign<i32> for Register {
	#[inline]
	fn add_assign(&mut self, rhs: i32) {
		*self = self.add(rhs as u32)
	}
}
// Register += u32
impl AddAssign<u32> for Register {
	#[inline]
	fn add_assign(&mut self, rhs: u32) {
		*self = self.add(rhs)
	}
}
// Register - i32
impl Sub<i32> for Register {
	type Output = Self;

	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn sub(self, rhs: i32) -> Self::Output {
		self.sub(rhs as u32)
	}
}
// Register - u32
impl Sub<u32> for Register {
	type Output = Self;

	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn sub(self, rhs: u32) -> Self::Output {
		self.sub(rhs)
	}
}
// Register -= i32
impl SubAssign<i32> for Register {
	#[inline]
	fn sub_assign(&mut self, rhs: i32) {
		*self = self.sub(rhs as u32)
	}
}
// Register -= u32
impl SubAssign<u32> for Register {
	#[inline]
	fn sub_assign(&mut self, rhs: u32) {
		*self = self.sub(rhs)
	}
}

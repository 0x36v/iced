/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

use std::fmt;

// GENERATOR-BEGIN: LegacyOpCodeTable
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum LegacyOpCodeTable {
	Normal,
	Table0F,
	Table0F38,
	Table0F3A,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_LEGACY_OP_CODE_TABLE: [&str; 4] = [
	"Normal",
	"Table0F",
	"Table0F38",
	"Table0F3A",
];
impl fmt::Debug for LegacyOpCodeTable {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_LEGACY_OP_CODE_TABLE[*self as usize])?;
		Ok(())
	}
}
impl Default for LegacyOpCodeTable {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		LegacyOpCodeTable::Normal
	}
}
// GENERATOR-END: LegacyOpCodeTable

// GENERATOR-BEGIN: VexOpCodeTable
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum VexOpCodeTable {
	Table0F = 1,
	Table0F38,
	Table0F3A,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_VEX_OP_CODE_TABLE: [&str; 3] = [
	"Table0F",
	"Table0F38",
	"Table0F3A",
];
impl fmt::Debug for VexOpCodeTable {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_VEX_OP_CODE_TABLE[*self as usize])?;
		Ok(())
	}
}
impl Default for VexOpCodeTable {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		VexOpCodeTable::Table0F
	}
}
// GENERATOR-END: VexOpCodeTable

// GENERATOR-BEGIN: XopOpCodeTable
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum XopOpCodeTable {
	XOP8,
	XOP9,
	XOPA,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_XOP_OP_CODE_TABLE: [&str; 3] = [
	"XOP8",
	"XOP9",
	"XOPA",
];
impl fmt::Debug for XopOpCodeTable {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_XOP_OP_CODE_TABLE[*self as usize])?;
		Ok(())
	}
}
impl Default for XopOpCodeTable {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		XopOpCodeTable::XOP8
	}
}
// GENERATOR-END: XopOpCodeTable

// GENERATOR-BEGIN: EvexOpCodeTable
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum EvexOpCodeTable {
	Table0F = 1,
	Table0F38,
	Table0F3A,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_EVEX_OP_CODE_TABLE: [&str; 3] = [
	"Table0F",
	"Table0F38",
	"Table0F3A",
];
impl fmt::Debug for EvexOpCodeTable {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_EVEX_OP_CODE_TABLE[*self as usize])?;
		Ok(())
	}
}
impl Default for EvexOpCodeTable {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		EvexOpCodeTable::Table0F
	}
}
// GENERATOR-END: EvexOpCodeTable

// GENERATOR-BEGIN: Encodable
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum Encodable {
	Any,
	Only1632,
	Only64,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_ENCODABLE: [&str; 3] = [
	"Any",
	"Only1632",
	"Only64",
];
impl fmt::Debug for Encodable {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_ENCODABLE[*self as usize])?;
		Ok(())
	}
}
impl Default for Encodable {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		Encodable::Any
	}
}
// GENERATOR-END: Encodable

// GENERATOR-BEGIN: OpCodeHandlerFlags
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[cfg(feature = "ENCODER")]
pub(crate) struct OpCodeHandlerFlags;
#[cfg(feature = "ENCODER")]
impl OpCodeHandlerFlags {
	pub(crate) const NONE: u32 = 0x0000_0000;
	pub(crate) const FWAIT: u32 = 0x0000_0001;
	pub(crate) const DECLARE_DATA: u32 = 0x0000_0002;
}
// GENERATOR-END: OpCodeHandlerFlags

// GENERATOR-BEGIN: LegacyOpKind
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum LegacyOpKind {
	None,
	Aww,
	Adw,
	M,
	Mfbcd,
	Mf32,
	Mf64,
	Mf80,
	Mfi16,
	Mfi32,
	Mfi64,
	M14,
	M28,
	M98,
	M108,
	Mp,
	Ms,
	Mo,
	Mb,
	Mw,
	Md,
	Md_MPX,
	Mq,
	Mq_MPX,
	Mw2,
	Md2,
	Eb,
	Ew,
	Ed,
	Ed_MPX,
	Ew_d,
	Ew_q,
	Eq,
	Eq_MPX,
	Eww,
	Edw,
	Eqw,
	RdMb,
	RqMb,
	RdMw,
	RqMw,
	Gb,
	Gw,
	Gd,
	Gq,
	Rw,
	Rd,
	Rq,
	Sw,
	Cd,
	Cq,
	Dd,
	Dq,
	Td,
	Ib,
	Ib16,
	Ib32,
	Ib64,
	Iw,
	Id,
	Id64,
	Iq,
	Ib21,
	Ib11,
	Xb,
	Xw,
	Xd,
	Xq,
	Yb,
	Yw,
	Yd,
	Yq,
	wJb,
	dJb,
	qJb,
	Jw,
	wJd,
	dJd,
	qJd,
	Jxw,
	Jxd,
	Jdisp16,
	Jdisp32,
	Ob,
	Ow,
	Od,
	Oq,
	Imm1,
	B,
	BMq,
	BMo,
	MIB,
	N,
	P,
	Q,
	RX,
	VX,
	WX,
	rDI,
	MRBX,
	ES,
	CS,
	SS,
	DS,
	FS,
	GS,
	AL,
	CL,
	AX,
	DX,
	EAX,
	RAX,
	ST,
	STi,
	r8_rb,
	r16_rw,
	r32_rd,
	r64_ro,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_LEGACY_OP_KIND: [&str; 118] = [
	"None",
	"Aww",
	"Adw",
	"M",
	"Mfbcd",
	"Mf32",
	"Mf64",
	"Mf80",
	"Mfi16",
	"Mfi32",
	"Mfi64",
	"M14",
	"M28",
	"M98",
	"M108",
	"Mp",
	"Ms",
	"Mo",
	"Mb",
	"Mw",
	"Md",
	"Md_MPX",
	"Mq",
	"Mq_MPX",
	"Mw2",
	"Md2",
	"Eb",
	"Ew",
	"Ed",
	"Ed_MPX",
	"Ew_d",
	"Ew_q",
	"Eq",
	"Eq_MPX",
	"Eww",
	"Edw",
	"Eqw",
	"RdMb",
	"RqMb",
	"RdMw",
	"RqMw",
	"Gb",
	"Gw",
	"Gd",
	"Gq",
	"Rw",
	"Rd",
	"Rq",
	"Sw",
	"Cd",
	"Cq",
	"Dd",
	"Dq",
	"Td",
	"Ib",
	"Ib16",
	"Ib32",
	"Ib64",
	"Iw",
	"Id",
	"Id64",
	"Iq",
	"Ib21",
	"Ib11",
	"Xb",
	"Xw",
	"Xd",
	"Xq",
	"Yb",
	"Yw",
	"Yd",
	"Yq",
	"wJb",
	"dJb",
	"qJb",
	"Jw",
	"wJd",
	"dJd",
	"qJd",
	"Jxw",
	"Jxd",
	"Jdisp16",
	"Jdisp32",
	"Ob",
	"Ow",
	"Od",
	"Oq",
	"Imm1",
	"B",
	"BMq",
	"BMo",
	"MIB",
	"N",
	"P",
	"Q",
	"RX",
	"VX",
	"WX",
	"rDI",
	"MRBX",
	"ES",
	"CS",
	"SS",
	"DS",
	"FS",
	"GS",
	"AL",
	"CL",
	"AX",
	"DX",
	"EAX",
	"RAX",
	"ST",
	"STi",
	"r8_rb",
	"r16_rw",
	"r32_rd",
	"r64_ro",
];
impl fmt::Debug for LegacyOpKind {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_LEGACY_OP_KIND[*self as usize])?;
		Ok(())
	}
}
impl Default for LegacyOpKind {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		LegacyOpKind::None
	}
}
// GENERATOR-END: LegacyOpKind

// GENERATOR-BEGIN: VexOpKind
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum VexOpKind {
	None,
	Ed,
	Eq,
	Gd,
	Gq,
	RdMb,
	RqMb,
	RdMw,
	RqMw,
	Rd,
	Rq,
	Hd,
	Hq,
	HK,
	HX,
	HY,
	Ib,
	I2,
	Is4X,
	Is4Y,
	Is5X,
	Is5Y,
	M,
	Md,
	MK,
	rDI,
	RK,
	RX,
	RY,
	VK,
	VM32X,
	VM32Y,
	VM64X,
	VM64Y,
	VX,
	VY,
	WK,
	WX,
	WY,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_VEX_OP_KIND: [&str; 39] = [
	"None",
	"Ed",
	"Eq",
	"Gd",
	"Gq",
	"RdMb",
	"RqMb",
	"RdMw",
	"RqMw",
	"Rd",
	"Rq",
	"Hd",
	"Hq",
	"HK",
	"HX",
	"HY",
	"Ib",
	"I2",
	"Is4X",
	"Is4Y",
	"Is5X",
	"Is5Y",
	"M",
	"Md",
	"MK",
	"rDI",
	"RK",
	"RX",
	"RY",
	"VK",
	"VM32X",
	"VM32Y",
	"VM64X",
	"VM64Y",
	"VX",
	"VY",
	"WK",
	"WX",
	"WY",
];
impl fmt::Debug for VexOpKind {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_VEX_OP_KIND[*self as usize])?;
		Ok(())
	}
}
impl Default for VexOpKind {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		VexOpKind::None
	}
}
// GENERATOR-END: VexOpKind

// GENERATOR-BEGIN: XopOpKind
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum XopOpKind {
	None,
	Ed,
	Eq,
	Gd,
	Gq,
	Rd,
	Rq,
	Hd,
	Hq,
	HX,
	HY,
	Ib,
	Id,
	Is4X,
	Is4Y,
	VX,
	VY,
	WX,
	WY,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_XOP_OP_KIND: [&str; 19] = [
	"None",
	"Ed",
	"Eq",
	"Gd",
	"Gq",
	"Rd",
	"Rq",
	"Hd",
	"Hq",
	"HX",
	"HY",
	"Ib",
	"Id",
	"Is4X",
	"Is4Y",
	"VX",
	"VY",
	"WX",
	"WY",
];
impl fmt::Debug for XopOpKind {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_XOP_OP_KIND[*self as usize])?;
		Ok(())
	}
}
impl Default for XopOpKind {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		XopOpKind::None
	}
}
// GENERATOR-END: XopOpKind

// GENERATOR-BEGIN: EvexOpKind
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[derive(Copy, Clone, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub(crate) enum EvexOpKind {
	None,
	Ed,
	Eq,
	Gd,
	Gq,
	RdMb,
	RqMb,
	RdMw,
	RqMw,
	HX,
	HY,
	HZ,
	HXP3,
	HZP3,
	Ib,
	M,
	Rd,
	Rq,
	RX,
	RY,
	RZ,
	RK,
	VM32X,
	VM32Y,
	VM32Z,
	VM64X,
	VM64Y,
	VM64Z,
	VK,
	VKP1,
	VX,
	VY,
	VZ,
	WX,
	WY,
	WZ,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_EVEX_OP_KIND: [&str; 36] = [
	"None",
	"Ed",
	"Eq",
	"Gd",
	"Gq",
	"RdMb",
	"RqMb",
	"RdMw",
	"RqMw",
	"HX",
	"HY",
	"HZ",
	"HXP3",
	"HZP3",
	"Ib",
	"M",
	"Rd",
	"Rq",
	"RX",
	"RY",
	"RZ",
	"RK",
	"VM32X",
	"VM32Y",
	"VM32Z",
	"VM64X",
	"VM64Y",
	"VM64Z",
	"VK",
	"VKP1",
	"VX",
	"VY",
	"VZ",
	"WX",
	"WY",
	"WZ",
];
impl fmt::Debug for EvexOpKind {
	#[cfg_attr(feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items))]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_EVEX_OP_KIND[*self as usize])?;
		Ok(())
	}
}
impl Default for EvexOpKind {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		EvexOpKind::None
	}
}
// GENERATOR-END: EvexOpKind

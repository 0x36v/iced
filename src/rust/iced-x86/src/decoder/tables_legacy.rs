/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

use super::handlers::*;
use super::handlers_3dnow::OpCodeHandler_D3NOW;
use super::handlers_evex::OpCodeHandler_EVEX;
use super::handlers_fpu::*;
use super::handlers_legacy::*;
use super::handlers_vex::{OpCodeHandler_VEX2, OpCodeHandler_VEX3, OpCodeHandler_XOP};
use super::*;

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_3_B_JMPE_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Jmpe_rm16 as u32,
	code32: Code::Jmpe_rm32 as u32,
	code64: Code::INVALID as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_DONT_READ_MOD_RM_5: OpCodeHandler_Bitness_DontReadModRM = OpCodeHandler_Bitness_DontReadModRM {
	decode: OpCodeHandler_Bitness_DontReadModRM::decode,
	has_modrm: true,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_EV_3_B_JMPE_RM16 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS_DONT_READ_MOD_RM_1: OpCodeHandler_Options_DontReadModRM = OpCodeHandler_Options_DontReadModRM {
	decode: OpCodeHandler_Options_DontReadModRM::decode,
	has_modrm: true,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	opt_handler: unsafe { HandlerTransmuter { from: &GEN_BITNESS_DONT_READ_MOD_RM_5 }.to },
	flags: DecoderOptions::JMPE,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EW_VERW_RM16: OpCodeHandler_Ew = OpCodeHandler_Ew {
	decode: OpCodeHandler_Ew::decode,
	has_modrm: true,
	code16: Code::Verw_rm16 as u32,
	code32: Code::Verw_r32m16 as u32,
	code64: Code::Verw_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EW_VERR_RM16: OpCodeHandler_Ew = OpCodeHandler_Ew {
	decode: OpCodeHandler_Ew::decode,
	has_modrm: true,
	code16: Code::Verr_rm16 as u32,
	code32: Code::Verr_r32m16 as u32,
	code64: Code::Verr_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EW_LTR_RM16: OpCodeHandler_Ew = OpCodeHandler_Ew {
	decode: OpCodeHandler_Ew::decode,
	has_modrm: true,
	code16: Code::Ltr_rm16 as u32,
	code32: Code::Ltr_r32m16 as u32,
	code64: Code::Ltr_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EW_LLDT_RM16: OpCodeHandler_Ew = OpCodeHandler_Ew {
	decode: OpCodeHandler_Ew::decode,
	has_modrm: true,
	code16: Code::Lldt_rm16 as u32,
	code32: Code::Lldt_r32m16 as u32,
	code64: Code::Lldt_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EVW_STR_RM16: OpCodeHandler_Evw = OpCodeHandler_Evw {
	decode: OpCodeHandler_Evw::decode,
	has_modrm: true,
	code16: Code::Str_rm16 as u32,
	code32: Code::Str_r32m16 as u32,
	code64: Code::Str_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EVW_SLDT_RM16: OpCodeHandler_Evw = OpCodeHandler_Evw {
	decode: OpCodeHandler_Evw::decode,
	has_modrm: true,
	code16: Code::Sldt_rm16 as u32,
	code32: Code::Sldt_r32m16 as u32,
	code64: Code::Sldt_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_INVLPG_M: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Invlpg_m as u32,
	code_w1: Code::Invlpg_m as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EVW_LMSW_RM16: OpCodeHandler_Evw = OpCodeHandler_Evw {
	decode: OpCodeHandler_Evw::decode,
	has_modrm: true,
	code16: Code::Lmsw_rm16 as u32,
	code32: Code::Lmsw_r32m16 as u32,
	code64: Code::Lmsw_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_RSTORSSP_M64: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Rstorssp_m64 as u32,
	code_w1: Code::Rstorssp_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_254: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_M_1_RSTORSSP_M64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EVW_SMSW_RM16: OpCodeHandler_Evw = OpCodeHandler_Evw {
	decode: OpCodeHandler_Evw::decode,
	has_modrm: true,
	code16: Code::Smsw_rm16 as u32,
	code32: Code::Smsw_r32m16 as u32,
	code64: Code::Smsw_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MS_LIDT_M1632_16: OpCodeHandler_Ms = OpCodeHandler_Ms {
	decode: OpCodeHandler_Ms::decode,
	has_modrm: true,
	code16: Code::Lidt_m1632_16 as u32,
	code32: Code::Lidt_m1632 as u32,
	code64: Code::Lidt_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MS_LGDT_M1632_16: OpCodeHandler_Ms = OpCodeHandler_Ms {
	decode: OpCodeHandler_Ms::decode,
	has_modrm: true,
	code16: Code::Lgdt_m1632_16 as u32,
	code32: Code::Lgdt_m1632 as u32,
	code64: Code::Lgdt_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MS_SIDT_M1632_16: OpCodeHandler_Ms = OpCodeHandler_Ms {
	decode: OpCodeHandler_Ms::decode,
	has_modrm: true,
	code16: Code::Sidt_m1632_16 as u32,
	code32: Code::Sidt_m1632 as u32,
	code64: Code::Sidt_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MS_SGDT_M1632_16: OpCodeHandler_Ms = OpCodeHandler_Ms {
	decode: OpCodeHandler_Ms::decode,
	has_modrm: true,
	code16: Code::Sgdt_m1632_16 as u32,
	code32: Code::Sgdt_m1632 as u32,
	code64: Code::Sgdt_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_RDPRU: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Rdpru as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_CLZEROW: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Clzerow as u32,
	code32: Code::Clzerod as u32,
	code64: Code::Clzeroq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MWAITX: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Mwaitx as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MCOMMIT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Mcommit as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_MONITORXW: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Monitorxw as u32,
	code32: Code::Monitorxd as u32,
	code64: Code::Monitorxq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_21: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MONITORXW }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MCOMMIT }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_RDTSCP: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Rdtscp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_SWAPGS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Swapgs as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_DONT_READ_MOD_RM_4: OpCodeHandler_Bitness_DontReadModRM = OpCodeHandler_Bitness_DontReadModRM {
	decode: OpCodeHandler_Bitness_DontReadModRM::decode,
	has_modrm: true,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SWAPGS }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_WRPKRU: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Wrpkru as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_20: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_WRPKRU }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_RDPKRU: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Rdpkru as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_19: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_RDPKRU }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SAVEPREVSSP: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Saveprevssp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_253: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SAVEPREVSSP }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SETSSBSY: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Setssbsy as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_252: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SETSSBSY }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_INVLPGAW: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Invlpgaw as u32,
	code32: Code::Invlpgad as u32,
	code64: Code::Invlpgaq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_SKINIT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Skinit as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CLGI: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Clgi as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_STGI: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Stgi as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_VMSAVEW: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Vmsavew as u32,
	code32: Code::Vmsaved as u32,
	code64: Code::Vmsaveq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_VMLOADW: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Vmloadw as u32,
	code32: Code::Vmloadd as u32,
	code64: Code::Vmloadq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_VMMCALL: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Vmmcall as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_VMRUNW: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Vmrunw as u32,
	code32: Code::Vmrund as u32,
	code64: Code::Vmrunq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_ENCLU: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Enclu as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_18: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_ENCLU }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_XTEST: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Xtest as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_17: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_XTEST }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_XEND: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Xend as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_16: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_XEND }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_VMFUNC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Vmfunc as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_15: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_VMFUNC }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_XSETBV: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Xsetbv as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_14: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_XSETBV }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_XGETBV: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Xgetbv as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_13: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_XGETBV }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_ENCLS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Encls as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_12: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_ENCLS }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_STAC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Stac as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_11: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_STAC }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CLAC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Clac as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_10: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CLAC }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MWAIT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Mwait as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_9: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MWAIT }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_MONITORW: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Monitorw as u32,
	code32: Code::Monitord as u32,
	code64: Code::Monitorq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_8: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MONITORW }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_PCONFIG: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Pconfig as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_7: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_PCONFIG }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_VMXOFF: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Vmxoff as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_6: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_VMXOFF }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_VMRESUME: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Vmresume as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_5: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_VMRESUME }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_VMLAUNCH: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Vmlaunch as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_4: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_VMLAUNCH }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_VMCALL: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Vmcall as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_3: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_VMCALL }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_ENCLV: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Enclv as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_2: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_ENCLV }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_PREFETCHWT1_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Prefetchwt1_m8 as u32,
	code_w1: Code::Prefetchwt1_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_PREFETCHW_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Prefetchw_m8 as u32,
	code_w1: Code::Prefetchw_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_PREFETCH_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Prefetch_m8 as u32,
	code_w1: Code::Prefetch_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_25: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F0_D_MEM,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_21: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_GROUP_25 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_PREFETCHT2_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Prefetcht2_m8 as u32,
	code_w1: Code::Prefetcht2_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_PREFETCHT1_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Prefetcht1_m8 as u32,
	code_w1: Code::Prefetcht1_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_PREFETCHT0_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Prefetcht0_m8 as u32,
	code_w1: Code::Prefetcht0_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_PREFETCHNTA_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Prefetchnta_m8 as u32,
	code_w1: Code::Prefetchnta_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_24: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F18_MEM,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_20: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F18 }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_GROUP_24 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_19: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F18 }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_RM_20 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_CLDEMOTE_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Cldemote_m8 as u32,
	code_w1: Code::Cldemote_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_251: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_1_CLDEMOTE_M8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_23: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F1_C_MEM,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_18: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_GROUP_23 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_17: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_RM_18 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_RDSSPD_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Rdsspd_r32 as u32,
	code64: Code::Rdsspq_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_16: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_EV_REXW_RDSSPD_R32 }.to },
	mem: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_ENDBR32: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Endbr32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_250: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_ENDBR32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_ENDBR64: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Endbr64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_249: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_ENDBR64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_11: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_GRP_0_F1_E_REG_LO,
	table_high: &HANDLERS_GRP_0_F1_E_REG_HI,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_15: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_11 }.to },
	mem: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_3_A_NOP_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Nop_rm16 as u32,
	code32: Code::Nop_rm32 as u32,
	code64: Code::Nop_rm64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_22: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F1_F,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_REX_MOVDIRI_M32_R32: OpCodeHandler_Ev_Gv_REX = OpCodeHandler_Ev_Gv_REX {
	decode: OpCodeHandler_Ev_Gv_REX::decode,
	has_modrm: true,
	code32: Code::Movdiri_m32_r32 as u32,
	code64: Code::Movdiri_m64_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_14: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_EV_GV_REX_MOVDIRI_M32_R32 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_248: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_RM_14 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_M_AS_ENQCMD_R16_M512: OpCodeHandler_Gv_M_as = OpCodeHandler_Gv_M_as {
	decode: OpCodeHandler_Gv_M_as::decode,
	has_modrm: true,
	code16: Code::Enqcmd_r16_m512 as u32,
	code32: Code::Enqcmd_r32_m512 as u32,
	code64: Code::Enqcmd_r64_m512 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_M_AS_ENQCMDS_R16_M512: OpCodeHandler_Gv_M_as = OpCodeHandler_Gv_M_as {
	decode: OpCodeHandler_Gv_M_as::decode,
	has_modrm: true,
	code16: Code::Enqcmds_r16_m512 as u32,
	code32: Code::Enqcmds_r32_m512 as u32,
	code64: Code::Enqcmds_r64_m512 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_M_AS_MOVDIR64_B_R16_M512: OpCodeHandler_Gv_M_as = OpCodeHandler_Gv_M_as {
	decode: OpCodeHandler_Gv_M_as::decode,
	has_modrm: true,
	code16: Code::Movdir64b_r16_m512 as u32,
	code32: Code::Movdir64b_r32_m512 as u32,
	code64: Code::Movdir64b_r64_m512 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_247: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_M_AS_MOVDIR64_B_R16_M512 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_M_AS_ENQCMDS_R16_M512 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_M_AS_ENQCMD_R16_M512 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_REX_ADOX_R32_RM32: OpCodeHandler_Gv_Ev_REX = OpCodeHandler_Gv_Ev_REX {
	decode: OpCodeHandler_Gv_Ev_REX::decode,
	has_modrm: true,
	code32: Code::Adox_r32_rm32 as u32,
	code64: Code::Adox_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_REX_ADCX_R32_RM32: OpCodeHandler_Gv_Ev_REX = OpCodeHandler_Gv_Ev_REX {
	decode: OpCodeHandler_Gv_Ev_REX::decode,
	has_modrm: true,
	code32: Code::Adcx_r32_rm32 as u32,
	code64: Code::Adcx_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_REX_WRSSD_M32_R32: OpCodeHandler_Ev_Gv_REX = OpCodeHandler_Ev_Gv_REX {
	decode: OpCodeHandler_Ev_Gv_REX::decode,
	has_modrm: true,
	code32: Code::Wrssd_m32_r32 as u32,
	code64: Code::Wrssq_m64_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_13: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_EV_GV_REX_WRSSD_M32_R32 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_246: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_RM_13 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_EV_REX_ADCX_R32_RM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_EV_REX_ADOX_R32_RM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_REX_WRUSSD_M32_R32: OpCodeHandler_Ev_Gv_REX = OpCodeHandler_Ev_Gv_REX {
	decode: OpCodeHandler_Ev_Gv_REX::decode,
	has_modrm: true,
	code32: Code::Wrussd_m32_r32 as u32,
	code64: Code::Wrussq_m64_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_12: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_EV_GV_REX_WRUSSD_M32_R32 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_245: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_RM_12 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GDQ_EV_CRC32_R32_RM16: OpCodeHandler_Gdq_Ev = OpCodeHandler_Gdq_Ev {
	decode: OpCodeHandler_Gdq_Ev::decode,
	has_modrm: true,
	code16: Code::Crc32_r32_rm16 as u32,
	code32: Code::Crc32_r32_rm32 as u32,
	code64: Code::Crc32_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_GV_MOVBE_M16_R16: OpCodeHandler_Mv_Gv = OpCodeHandler_Mv_Gv {
	decode: OpCodeHandler_Mv_Gv::decode,
	has_modrm: true,
	code16: Code::Movbe_m16_r16 as u32,
	code32: Code::Movbe_m32_r32 as u32,
	code64: Code::Movbe_m64_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_F3_F2_2: OpCodeHandler_MandatoryPrefix_F3_F2 = OpCodeHandler_MandatoryPrefix_F3_F2 {
	decode: OpCodeHandler_MandatoryPrefix_F3_F2::decode,
	has_modrm: false,
	handler_normal: unsafe { HandlerTransmuter { from: &GEN_MV_GV_MOVBE_M16_R16 }.to },
	handler_f3: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	clear_f3: true,
	handler_f2: unsafe { HandlerTransmuter { from: &GEN_GDQ_EV_CRC32_R32_RM16 }.to },
	clear_f2: true,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EB_REX_CRC32_R32_RM8: OpCodeHandler_Gv_Eb_REX = OpCodeHandler_Gv_Eb_REX {
	decode: OpCodeHandler_Gv_Eb_REX::decode,
	has_modrm: true,
	code32: Code::Crc32_r32_rm8 as u32,
	code64: Code::Crc32_r64_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_MV_MOVBE_R16_M16: OpCodeHandler_Gv_Mv = OpCodeHandler_Gv_Mv {
	decode: OpCodeHandler_Gv_Mv::decode,
	has_modrm: true,
	code16: Code::Movbe_r16_m16 as u32,
	code32: Code::Movbe_r32_m32 as u32,
	code64: Code::Movbe_r64_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_F3_F2_1: OpCodeHandler_MandatoryPrefix_F3_F2 = OpCodeHandler_MandatoryPrefix_F3_F2 {
	decode: OpCodeHandler_MandatoryPrefix_F3_F2::decode,
	has_modrm: false,
	handler_normal: unsafe { HandlerTransmuter { from: &GEN_GV_MV_MOVBE_R16_M16 }.to },
	handler_f3: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	clear_f3: true,
	handler_f2: unsafe { HandlerTransmuter { from: &GEN_GV_EB_REX_CRC32_R32_RM8 }.to },
	clear_f2: true,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_189: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Aesdeclast_xmm_xmmm128 as u32,
	code_m: Code::Aesdeclast_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_244: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_189 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_188: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Aesdec_xmm_xmmm128 as u32,
	code_m: Code::Aesdec_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_243: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_188 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_187: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Aesenclast_xmm_xmmm128 as u32,
	code_m: Code::Aesenclast_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_242: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_187 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_186: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Aesenc_xmm_xmmm128 as u32,
	code_m: Code::Aesenc_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_241: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_186 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_185: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Aesimc_xmm_xmmm128 as u32,
	code_m: Code::Aesimc_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_240: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_185 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_184: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Gf2p8mulb_xmm_xmmm128 as u32,
	code_m: Code::Gf2p8mulb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_239: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_184 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_183: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sha256msg2_xmm_xmmm128 as u32,
	code_m: Code::Sha256msg2_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_238: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_183 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_182: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sha256msg1_xmm_xmmm128 as u32,
	code_m: Code::Sha256msg1_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_237: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_182 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_181: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sha256rnds2_xmm_xmmm128 as u32,
	code_m: Code::Sha256rnds2_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_236: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_181 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_180: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sha1msg2_xmm_xmmm128 as u32,
	code_m: Code::Sha1msg2_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_235: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_180 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_179: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sha1msg1_xmm_xmmm128 as u32,
	code_m: Code::Sha1msg1_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_234: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_179 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_178: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sha1nexte_xmm_xmmm128 as u32,
	code_m: Code::Sha1nexte_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_233: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_178 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_32_64_INVPCID_R32_M128: OpCodeHandler_Gv_Ev_32_64 = OpCodeHandler_Gv_Ev_32_64 {
	decode: OpCodeHandler_Gv_Ev_32_64::decode,
	has_modrm: true,
	code32: Code::Invpcid_r32_m128 as u32,
	code64: Code::Invpcid_r64_m128 as u32,
	disallow_mem: 0x0000_0000,
	disallow_reg: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_11: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_GV_EV_32_64_INVPCID_R32_M128 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_232: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_RM_11 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_32_64_INVVPID_R32_M128: OpCodeHandler_Gv_Ev_32_64 = OpCodeHandler_Gv_Ev_32_64 {
	decode: OpCodeHandler_Gv_Ev_32_64::decode,
	has_modrm: true,
	code32: Code::Invvpid_r32_m128 as u32,
	code64: Code::Invvpid_r64_m128 as u32,
	disallow_mem: 0x0000_0000,
	disallow_reg: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_10: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_GV_EV_32_64_INVVPID_R32_M128 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_231: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_RM_10 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_32_64_INVEPT_R32_M128: OpCodeHandler_Gv_Ev_32_64 = OpCodeHandler_Gv_Ev_32_64 {
	decode: OpCodeHandler_Gv_Ev_32_64::decode,
	has_modrm: true,
	code32: Code::Invept_r32_m128 as u32,
	code64: Code::Invept_r64_m128 as u32,
	disallow_mem: 0x0000_0000,
	disallow_reg: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_9: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_GV_EV_32_64_INVEPT_R32_M128 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_230: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_RM_9 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_177: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Phminposuw_xmm_xmmm128 as u32,
	code_m: Code::Phminposuw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_229: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_177 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_176: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmulld_xmm_xmmm128 as u32,
	code_m: Code::Pmulld_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_228: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_176 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_175: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaxud_xmm_xmmm128 as u32,
	code_m: Code::Pmaxud_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_227: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_175 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_174: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaxuw_xmm_xmmm128 as u32,
	code_m: Code::Pmaxuw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_226: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_174 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_173: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaxsd_xmm_xmmm128 as u32,
	code_m: Code::Pmaxsd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_225: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_173 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_172: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaxsb_xmm_xmmm128 as u32,
	code_m: Code::Pmaxsb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_224: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_172 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_171: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pminud_xmm_xmmm128 as u32,
	code_m: Code::Pminud_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_223: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_171 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_170: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pminuw_xmm_xmmm128 as u32,
	code_m: Code::Pminuw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_222: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_170 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_169: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pminsd_xmm_xmmm128 as u32,
	code_m: Code::Pminsd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_221: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_169 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_168: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pminsb_xmm_xmmm128 as u32,
	code_m: Code::Pminsb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_220: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_168 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_167: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpgtq_xmm_xmmm128 as u32,
	code_m: Code::Pcmpgtq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_219: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_167 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_166: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovzxdq_xmm_xmmm64 as u32,
	code_m: Code::Pmovzxdq_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_218: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_166 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_165: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovzxwq_xmm_xmmm32 as u32,
	code_m: Code::Pmovzxwq_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_217: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_165 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_164: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovzxwd_xmm_xmmm64 as u32,
	code_m: Code::Pmovzxwd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_216: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_164 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_163: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovzxbq_xmm_xmmm16 as u32,
	code_m: Code::Pmovzxbq_xmm_xmmm16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_215: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_163 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_162: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovzxbd_xmm_xmmm32 as u32,
	code_m: Code::Pmovzxbd_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_214: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_162 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_161: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovzxbw_xmm_xmmm64 as u32,
	code_m: Code::Pmovzxbw_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_213: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_161 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_160: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Packusdw_xmm_xmmm128 as u32,
	code_m: Code::Packusdw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_212: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_160 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VM_3: OpCodeHandler_VM = OpCodeHandler_VM {
	decode: OpCodeHandler_VM::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movntdqa_xmm_m128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_211: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VM_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_159: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpeqq_xmm_xmmm128 as u32,
	code_m: Code::Pcmpeqq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_210: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_159 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_158: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmuldq_xmm_xmmm128 as u32,
	code_m: Code::Pmuldq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_209: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_158 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_157: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovsxdq_xmm_xmmm64 as u32,
	code_m: Code::Pmovsxdq_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_208: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_157 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_156: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovsxwq_xmm_xmmm32 as u32,
	code_m: Code::Pmovsxwq_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_207: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_156 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_155: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovsxwd_xmm_xmmm64 as u32,
	code_m: Code::Pmovsxwd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_206: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_155 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_154: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovsxbq_xmm_xmmm16 as u32,
	code_m: Code::Pmovsxbq_xmm_xmmm16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_205: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_154 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_153: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovsxbd_xmm_xmmm32 as u32,
	code_m: Code::Pmovsxbd_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_204: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_153 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_152: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmovsxbw_xmm_xmmm64 as u32,
	code_m: Code::Pmovsxbw_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_203: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_152 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_151: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pabsd_xmm_xmmm128 as u32,
	code_m: Code::Pabsd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PABSD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pabsd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_202: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PABSD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_151 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_150: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pabsw_xmm_xmmm128 as u32,
	code_m: Code::Pabsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PABSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pabsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_201: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PABSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_150 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_149: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pabsb_xmm_xmmm128 as u32,
	code_m: Code::Pabsb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PABSB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pabsb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_200: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PABSB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_149 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_148: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Ptest_xmm_xmmm128 as u32,
	code_m: Code::Ptest_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_199: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_148 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_147: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Blendvpd_xmm_xmmm128 as u32,
	code_m: Code::Blendvpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_198: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_147 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_146: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Blendvps_xmm_xmmm128 as u32,
	code_m: Code::Blendvps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_197: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_146 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_145: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pblendvb_xmm_xmmm128 as u32,
	code_m: Code::Pblendvb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_196: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_145 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_144: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmulhrsw_xmm_xmmm128 as u32,
	code_m: Code::Pmulhrsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMULHRSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmulhrsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_195: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMULHRSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_144 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_143: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psignd_xmm_xmmm128 as u32,
	code_m: Code::Psignd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSIGND_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psignd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_194: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSIGND_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_143 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_142: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psignw_xmm_xmmm128 as u32,
	code_m: Code::Psignw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSIGNW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psignw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_193: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSIGNW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_142 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_141: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psignb_xmm_xmmm128 as u32,
	code_m: Code::Psignb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSIGNB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psignb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_192: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSIGNB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_141 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_140: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Phsubsw_xmm_xmmm128 as u32,
	code_m: Code::Phsubsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PHSUBSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Phsubsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_191: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PHSUBSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_140 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_139: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Phsubd_xmm_xmmm128 as u32,
	code_m: Code::Phsubd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PHSUBD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Phsubd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_190: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PHSUBD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_139 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_138: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Phsubw_xmm_xmmm128 as u32,
	code_m: Code::Phsubw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PHSUBW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Phsubw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_189: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PHSUBW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_138 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_137: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaddubsw_xmm_xmmm128 as u32,
	code_m: Code::Pmaddubsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMADDUBSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmaddubsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_188: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMADDUBSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_137 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_136: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Phaddsw_xmm_xmmm128 as u32,
	code_m: Code::Phaddsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PHADDSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Phaddsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_187: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PHADDSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_136 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_135: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Phaddd_xmm_xmmm128 as u32,
	code_m: Code::Phaddd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PHADDD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Phaddd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_186: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PHADDD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_135 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_134: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Phaddw_xmm_xmmm128 as u32,
	code_m: Code::Phaddw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PHADDW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Phaddw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_185: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PHADDW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_134 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_133: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pshufb_xmm_xmmm128 as u32,
	code_m: Code::Pshufb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSHUFB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pshufb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_184: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSHUFB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_133 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_27: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Aeskeygenassist_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Aeskeygenassist_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_183: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_27 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_26: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Gf2p8affineinvqb_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Gf2p8affineinvqb_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_182: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_26 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_25: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Gf2p8affineqb_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Gf2p8affineqb_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_181: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_25 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_24: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Sha1rnds4_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Sha1rnds4_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_180: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_24 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_23: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pcmpistri_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pcmpistri_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_179: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_23 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_22: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pcmpistrm_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pcmpistrm_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_178: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_22 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_3_1: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pcmpestri_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pcmpestri64_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_177: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_3_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_3: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pcmpestrm_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pcmpestrm64_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_176: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_21: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pclmulqdq_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pclmulqdq_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_175: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_21 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_20: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Mpsadbw_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Mpsadbw_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_174: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_20 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_19: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Dppd_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Dppd_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_173: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_19 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_18: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Dpps_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Dpps_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_172: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_18 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VX_E_IB_2: OpCodeHandler_VX_E_Ib = OpCodeHandler_VX_E_Ib {
	decode: OpCodeHandler_VX_E_Ib::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pinsrd_xmm_rm32_imm8 as u32,
	code64: Code::Pinsrq_xmm_rm64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_171: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VX_E_IB_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_17: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Insertps_xmm_xmmm32_imm8 as u32,
	code_w1: Code::Insertps_xmm_xmmm32_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_170: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_17 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VX_E_IB_1: OpCodeHandler_VX_E_Ib = OpCodeHandler_VX_E_Ib {
	decode: OpCodeHandler_VX_E_Ib::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pinsrb_xmm_r32m8_imm8 as u32,
	code64: Code::Pinsrb_xmm_r64m8_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_169: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VX_E_IB_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ED_V_IB: OpCodeHandler_Ed_V_Ib = OpCodeHandler_Ed_V_Ib {
	decode: OpCodeHandler_Ed_V_Ib::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Extractps_rm32_xmm_imm8 as u32,
	code64: Code::Extractps_r64m32_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_168: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_ED_V_IB }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_M_VX_IB_2: OpCodeHandler_GvM_VX_Ib = OpCodeHandler_GvM_VX_Ib {
	decode: OpCodeHandler_GvM_VX_Ib::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pextrd_rm32_xmm_imm8 as u32,
	code64: Code::Pextrq_rm64_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_167: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_M_VX_IB_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_M_VX_IB_1: OpCodeHandler_GvM_VX_Ib = OpCodeHandler_GvM_VX_Ib {
	decode: OpCodeHandler_GvM_VX_Ib::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pextrw_r32m16_xmm_imm8 as u32,
	code64: Code::Pextrw_r64m16_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_166: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_M_VX_IB_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_M_VX_IB: OpCodeHandler_GvM_VX_Ib = OpCodeHandler_GvM_VX_Ib {
	decode: OpCodeHandler_GvM_VX_Ib::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pextrb_r32m8_xmm_imm8 as u32,
	code64: Code::Pextrb_r64m8_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_165: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_M_VX_IB }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_16: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Palignr_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Palignr_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_IB_PALIGNR_MM_MMM64_IMM8: OpCodeHandler_P_Q_Ib = OpCodeHandler_P_Q_Ib {
	decode: OpCodeHandler_P_Q_Ib::decode,
	has_modrm: true,
	code: Code::Palignr_mm_mmm64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_164: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_IB_PALIGNR_MM_MMM64_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_15: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pblendw_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pblendw_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_163: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_15 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_14: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Blendpd_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Blendpd_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_162: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_14 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_13: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Blendps_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Blendps_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_161: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_13 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_12: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Roundsd_xmm_xmmm64_imm8 as u32,
	code_w1: Code::Roundsd_xmm_xmmm64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_160: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_12 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_11: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Roundss_xmm_xmmm32_imm8 as u32,
	code_w1: Code::Roundss_xmm_xmmm32_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_159: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_11 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_10: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Roundpd_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Roundpd_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_158: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_10 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_9: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Roundps_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Roundps_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_157: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_9 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_9: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psllw_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSLLW_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Psllw_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_156: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSLLW_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_9 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_8: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psraw_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSRAW_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Psraw_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_155: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSRAW_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_7: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psrlw_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSRLW_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Psrlw_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_154: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSRLW_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_7 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_6: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Pslld_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSLLD_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Pslld_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_153: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSLLD_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_6 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_5: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psrad_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSRAD_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Psrad_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_152: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSRAD_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_5 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_4: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psrld_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSRLD_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Psrld_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_151: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSRLD_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_4 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_3: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Pslldq_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_150: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_2: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psllq_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSLLQ_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Psllq_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_149: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSLLQ_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_1: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psrldq_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_148: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB: OpCodeHandler_RIb = OpCodeHandler_RIb {
	decode: OpCodeHandler_RIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Psrlq_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_NIB_PSRLQ_MM_IMM8: OpCodeHandler_NIb = OpCodeHandler_NIb {
	decode: OpCodeHandler_NIb::decode,
	has_modrm: true,
	code: Code::Psrlq_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_147: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_NIB_PSRLQ_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RIB }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RIB_IB: OpCodeHandler_RIbIb = OpCodeHandler_RIbIb {
	decode: OpCodeHandler_RIbIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Extrq_xmm_imm8_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XSHA256_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Xsha256_16 as u32,
	code32: Code::Xsha256_32 as u32,
	code64: Code::Xsha256_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XSHA1_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Xsha1_16 as u32,
	code32: Code::Xsha1_32 as u32,
	code64: Code::Xsha1_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_MONTMUL_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Montmul_16 as u32,
	code32: Code::Montmul_32 as u32,
	code64: Code::Montmul_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XCRYPT_OFB_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::XcryptOfb_16 as u32,
	code32: Code::XcryptOfb_32 as u32,
	code64: Code::XcryptOfb_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XCRYPT_CFB_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::XcryptCfb_16 as u32,
	code32: Code::XcryptCfb_32 as u32,
	code64: Code::XcryptCfb_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XCRYPT_CTR_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::XcryptCtr_16 as u32,
	code32: Code::XcryptCtr_32 as u32,
	code64: Code::XcryptCtr_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XCRYPT_CBC_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::XcryptCbc_16 as u32,
	code32: Code::XcryptCbc_32 as u32,
	code64: Code::XcryptCbc_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XCRYPT_ECB_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::XcryptEcb_16 as u32,
	code32: Code::XcryptEcb_32 as u32,
	code64: Code::XcryptEcb_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_XSTORE_16: OpCodeHandler_Simple5 = OpCodeHandler_Simple5 {
	decode: OpCodeHandler_Simple5::decode,
	has_modrm: false,
	code16: Code::Xstore_16 as u32,
	code32: Code::Xstore_32 as u32,
	code64: Code::Xstore_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_CLFLUSHOPT_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Clflushopt_m8 as u32,
	code_w1: Code::Clflushopt_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_CLFLUSH_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Clflush_m8 as u32,
	code_w1: Code::Clflush_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_146: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_1_CLFLUSH_M8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_M_1_CLFLUSHOPT_M8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_CLRSSBSY_M64: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Clrssbsy_m64 as u32,
	code_w1: Code::Clrssbsy_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_CLWB_M8: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Clwb_m8 as u32,
	code_w1: Code::Clwb_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_2_XSAVEOPT_MEM: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Xsaveopt_mem as u32,
	code_w1: Code::Xsaveopt64_mem as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_145: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_2_XSAVEOPT_MEM }.to },
		unsafe { HandlerTransmuter { from: &GEN_M_1_CLWB_M8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_M_1_CLRSSBSY_M64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_2_XRSTOR_MEM: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Xrstor_mem as u32,
	code_w1: Code::Xrstor64_mem as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_144: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_2_XRSTOR_MEM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_PTWRITE_RM32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Ptwrite_rm32 as u32,
	code64: Code::Ptwrite_rm64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_2_XSAVE_MEM: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Xsave_mem as u32,
	code_w1: Code::Xsave64_mem as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_143: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_2_XSAVE_MEM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_PTWRITE_RM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_WRGSBASE_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Wrgsbase_r32 as u32,
	code64: Code::Wrgsbase_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_8: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_EV_REXW_WRGSBASE_R32 }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_DONT_READ_MOD_RM_3: OpCodeHandler_Bitness_DontReadModRM = OpCodeHandler_Bitness_DontReadModRM {
	decode: OpCodeHandler_Bitness_DontReadModRM::decode,
	has_modrm: true,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_RM_8 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_STMXCSR_M32: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Stmxcsr_m32 as u32,
	code_w1: Code::Stmxcsr_m32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_142: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_1_STMXCSR_M32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_BITNESS_DONT_READ_MOD_RM_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_WRFSBASE_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Wrfsbase_r32 as u32,
	code64: Code::Wrfsbase_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_7: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_EV_REXW_WRFSBASE_R32 }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_DONT_READ_MOD_RM_2: OpCodeHandler_Bitness_DontReadModRM = OpCodeHandler_Bitness_DontReadModRM {
	decode: OpCodeHandler_Bitness_DontReadModRM::decode,
	has_modrm: true,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_RM_7 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_LDMXCSR_M32: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Ldmxcsr_m32 as u32,
	code_w1: Code::Ldmxcsr_m32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_141: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_1_LDMXCSR_M32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_BITNESS_DONT_READ_MOD_RM_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_RDGSBASE_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Rdgsbase_r32 as u32,
	code64: Code::Rdgsbase_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_6: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_EV_REXW_RDGSBASE_R32 }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_DONT_READ_MOD_RM_1: OpCodeHandler_Bitness_DontReadModRM = OpCodeHandler_Bitness_DontReadModRM {
	decode: OpCodeHandler_Bitness_DontReadModRM::decode,
	has_modrm: true,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_RM_6 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_2_FXRSTOR_M512_BYTE: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Fxrstor_m512byte as u32,
	code_w1: Code::Fxrstor64_m512byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_140: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_2_FXRSTOR_M512_BYTE }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_BITNESS_DONT_READ_MOD_RM_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_RDFSBASE_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Rdfsbase_r32 as u32,
	code64: Code::Rdfsbase_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_5: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_EV_REXW_RDFSBASE_R32 }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_DONT_READ_MOD_RM: OpCodeHandler_Bitness_DontReadModRM = OpCodeHandler_Bitness_DontReadModRM {
	decode: OpCodeHandler_Bitness_DontReadModRM::decode,
	has_modrm: true,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_RM_5 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_2_FXSAVE_M512_BYTE: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Fxsave_m512byte as u32,
	code_w1: Code::Fxsave64_m512byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_139: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_2_FXSAVE_M512_BYTE }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_BITNESS_DONT_READ_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE_FF: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence_FF as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_138: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE_FF }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE_FE: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence_FE as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_137: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE_FE }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE_FD: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence_FD as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_136: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE_FD }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE_FC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence_FC as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_135: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE_FC }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE_FB: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence_FB as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_134: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE_FB }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE_FA: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence_FA as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_133: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE_FA }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE_F9: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence_F9 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_132: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE_F9 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_PCOMMIT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Pcommit as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS_DONT_READ_MOD_RM: OpCodeHandler_Options_DontReadModRM = OpCodeHandler_Options_DontReadModRM {
	decode: OpCodeHandler_Options_DontReadModRM::decode,
	has_modrm: true,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	opt_handler: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_PCOMMIT }.to },
	flags: DecoderOptions::PCOMMIT,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_SFENCE: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Sfence as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_131: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_SFENCE }.to },
		unsafe { HandlerTransmuter { from: &GEN_OPTIONS_DONT_READ_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE_F7: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence_F7 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_130: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE_F7 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE_F6: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence_F6 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_129: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE_F6 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE_F5: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence_F5 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_128: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE_F5 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE_F4: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence_F4 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_127: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE_F4 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE_F3: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence_F3 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_126: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE_F3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE_F2: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence_F2 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_125: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE_F2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE_F1: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence_F1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_124: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE_F1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_UMWAIT_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Umwait_r32 as u32,
	code64: Code::Umwait_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16: OpCodeHandler_Simple5_ModRM_as = OpCodeHandler_Simple5_ModRM_as {
	decode: OpCodeHandler_Simple5_ModRM_as::decode,
	has_modrm: true,
	code16: Code::Umonitor_r16 as u32,
	code32: Code::Umonitor_r32 as u32,
	code64: Code::Umonitor_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_TPAUSE_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Tpause_r32 as u32,
	code64: Code::Tpause_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_MFENCE: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Mfence as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_123: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_MFENCE }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_TPAUSE_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MOD_RM_AS_UMONITOR_R16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_UMWAIT_R32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE_EF: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence_EF as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_122: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE_EF }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE_EE: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence_EE as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_121: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE_EE }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE_ED: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence_ED as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_120: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE_ED }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE_EC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence_EC as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_119: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE_EC }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE_EB: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence_EB as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_118: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE_EB }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE_EA: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence_EA as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_117: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE_EA }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE_E9: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence_E9 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_116: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE_E9 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_INCSSPD_R32: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Incsspd_r32 as u32,
	code64: Code::Incsspq_r64 as u32,
	disallow_reg: 0x0000_0000,
	disallow_mem: 0xFFFF_FFFF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_MOD_RM_LFENCE: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: true,
	code: Code::Lfence as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_115: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MOD_RM_LFENCE }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_REXW_INCSSPD_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_4_BTC_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Btc_rm16_imm8 as u32,
	code32: Code::Btc_rm32_imm8 as u32,
	code64: Code::Btc_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_4_BTR_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Btr_rm16_imm8 as u32,
	code32: Code::Btr_rm32_imm8 as u32,
	code64: Code::Btr_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_4_BTS_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Bts_rm16_imm8 as u32,
	code32: Code::Bts_rm32_imm8 as u32,
	code64: Code::Bts_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_BT_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Bt_rm16_imm8 as u32,
	code32: Code::Bt_rm32_imm8 as u32,
	code64: Code::Bt_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RV_32_64_RDPID_R32: OpCodeHandler_Rv_32_64 = OpCodeHandler_Rv_32_64 {
	decode: OpCodeHandler_Rv_32_64::decode,
	has_modrm: true,
	code32: Code::Rdpid_r32 as u32,
	code64: Code::Rdpid_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_VMPTRST_M64: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Vmptrst_m64 as u32,
	code_w1: Code::Vmptrst_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RV_RDSEED_R16: OpCodeHandler_Rv = OpCodeHandler_Rv {
	decode: OpCodeHandler_Rv::decode,
	has_modrm: true,
	code16: Code::Rdseed_r16 as u32,
	code32: Code::Rdseed_r32 as u32,
	code64: Code::Rdseed_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX3_1: OpCodeHandler_MandatoryPrefix3 = OpCodeHandler_MandatoryPrefix3 {
	decode: OpCodeHandler_MandatoryPrefix3::decode,
	has_modrm: true,
	handlers_reg: [
		(
			unsafe { HandlerTransmuter { from: &GEN_RV_RDSEED_R16 }.to },
			false,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_M_1_VMPTRST_M64 }.to },
			false,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_RV_RDSEED_R16 }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			true,
		),
	],
	handlers_mem: [
		(
			unsafe { HandlerTransmuter { from: &GEN_RV_32_64_RDPID_R32 }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			true,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_VMXON_M64: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Vmxon_m64 as u32,
	code_w1: Code::Vmxon_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_VMCLEAR_M64: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Vmclear_m64 as u32,
	code_w1: Code::Vmclear_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_1_VMPTRLD_M64: OpCodeHandler_M = OpCodeHandler_M {
	decode: OpCodeHandler_M::decode,
	has_modrm: true,
	code_w0: Code::Vmptrld_m64 as u32,
	code_w1: Code::Vmptrld_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RV_RDRAND_R16: OpCodeHandler_Rv = OpCodeHandler_Rv {
	decode: OpCodeHandler_Rv::decode,
	has_modrm: true,
	code16: Code::Rdrand_r16 as u32,
	code32: Code::Rdrand_r32 as u32,
	code64: Code::Rdrand_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX3: OpCodeHandler_MandatoryPrefix3 = OpCodeHandler_MandatoryPrefix3 {
	decode: OpCodeHandler_MandatoryPrefix3::decode,
	has_modrm: true,
	handlers_reg: [
		(
			unsafe { HandlerTransmuter { from: &GEN_RV_RDRAND_R16 }.to },
			false,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_M_1_VMPTRLD_M64 }.to },
			false,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_RV_RDRAND_R16 }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_M_1_VMCLEAR_M64 }.to },
			true,
		),
	],
	handlers_mem: [
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_M_1_VMXON_M64 }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			true,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			true,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_REXW_XSAVES_MEM: OpCodeHandler_Ev_REXW = OpCodeHandler_Ev_REXW {
	decode: OpCodeHandler_Ev_REXW::decode,
	has_modrm: true,
	code32: Code::Xsaves_mem as u32,
	code64: Code::Xsaves64_mem as u32,
	disallow_reg: 0xFFFF_FFFF,
	disallow_mem: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_4: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_EV_REXW_XSAVES_MEM }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_114: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_RM_4 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_REXW_2_XSAVEC_MEM: OpCodeHandler_M_REXW = OpCodeHandler_M_REXW {
	decode: OpCodeHandler_M_REXW::decode,
	has_modrm: true,
	code32: Code::Xsavec_mem as u32,
	code64: Code::Xsavec64_mem as u32,
	flags32: 0x0000_0000,
	flags64: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_113: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_REXW_2_XSAVEC_MEM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_REXW_2_XRSTORS_MEM: OpCodeHandler_M_REXW = OpCodeHandler_M_REXW {
	decode: OpCodeHandler_M_REXW::decode,
	has_modrm: true,
	code32: Code::Xrstors_mem as u32,
	code64: Code::Xrstors64_mem as u32,
	flags32: 0x0000_0000,
	flags64: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_112: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_M_REXW_2_XRSTORS_MEM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_M_REXW_4_CMPXCHG8_B_M64: OpCodeHandler_M_REXW = OpCodeHandler_M_REXW {
	decode: OpCodeHandler_M_REXW::decode,
	has_modrm: true,
	code32: Code::Cmpxchg8b_m64 as u32,
	code64: Code::Cmpxchg16b_m128 as u32,
	flags32: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
	flags64: HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_UD0_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Ud0_r16_rm16 as u32,
	code32: Code::Ud0_r32_rm32 as u32,
	code64: Code::Ud0_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_132: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddd_xmm_xmmm128 as u32,
	code_m: Code::Paddd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_111: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_132 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_131: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddw_xmm_xmmm128 as u32,
	code_m: Code::Paddw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_110: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_131 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_130: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddb_xmm_xmmm128 as u32,
	code_m: Code::Paddb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_109: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_130 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_129: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubq_xmm_xmmm128 as u32,
	code_m: Code::Psubq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBQ_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubq_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_108: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBQ_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_129 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_128: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubd_xmm_xmmm128 as u32,
	code_m: Code::Psubd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_107: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_128 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_127: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubw_xmm_xmmm128 as u32,
	code_m: Code::Psubw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_106: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_127 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_126: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubb_xmm_xmmm128 as u32,
	code_m: Code::Psubb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_105: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_126 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_R_DI_VX_RX: OpCodeHandler_rDI_VX_RX = OpCodeHandler_rDI_VX_RX {
	decode: OpCodeHandler_rDI_VX_RX::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Maskmovdqu_rDI_xmm_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_R_DI_P_N_MASKMOVQ_R_DI_MM_MM: OpCodeHandler_rDI_P_N = OpCodeHandler_rDI_P_N {
	decode: OpCodeHandler_rDI_P_N::decode,
	has_modrm: true,
	code: Code::Maskmovq_rDI_mm_mm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_104: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_R_DI_P_N_MASKMOVQ_R_DI_MM_MM }.to },
		unsafe { HandlerTransmuter { from: &GEN_R_DI_VX_RX }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_125: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psadbw_xmm_xmmm128 as u32,
	code_m: Code::Psadbw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSADBW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psadbw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_103: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSADBW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_125 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_124: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaddwd_xmm_xmmm128 as u32,
	code_m: Code::Pmaddwd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMADDWD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmaddwd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_102: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMADDWD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_124 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_123: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmuludq_xmm_xmmm128 as u32,
	code_m: Code::Pmuludq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMULUDQ_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmuludq_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_101: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMULUDQ_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_123 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_122: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psllq_xmm_xmmm128 as u32,
	code_m: Code::Psllq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSLLQ_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psllq_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_100: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSLLQ_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_122 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_121: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pslld_xmm_xmmm128 as u32,
	code_m: Code::Pslld_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSLLD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pslld_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_99: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSLLD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_121 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_120: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psllw_xmm_xmmm128 as u32,
	code_m: Code::Psllw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSLLW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psllw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_98: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSLLW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_120 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VM_2: OpCodeHandler_VM = OpCodeHandler_VM {
	decode: OpCodeHandler_VM::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Lddqu_xmm_m128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_97: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VM_2 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_119: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pxor_xmm_xmmm128 as u32,
	code_m: Code::Pxor_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PXOR_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pxor_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_96: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PXOR_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_119 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_118: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaxsw_xmm_xmmm128 as u32,
	code_m: Code::Pmaxsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMAXSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmaxsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_95: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMAXSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_118 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_117: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddsw_xmm_xmmm128 as u32,
	code_m: Code::Paddsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_94: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_117 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_116: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddsb_xmm_xmmm128 as u32,
	code_m: Code::Paddsb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDSB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddsb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_93: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDSB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_116 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_115: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Por_xmm_xmmm128 as u32,
	code_m: Code::Por_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_POR_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Por_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_92: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_POR_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_115 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_114: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pminsw_xmm_xmmm128 as u32,
	code_m: Code::Pminsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMINSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pminsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_91: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMINSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_114 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_113: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubsw_xmm_xmmm128 as u32,
	code_m: Code::Psubsw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubsw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_90: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_113 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_112: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubsb_xmm_xmmm128 as u32,
	code_m: Code::Psubsb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBSB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubsb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_89: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBSB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_112 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_8: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movntdq_m128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MP_MOVNTQ_M64_MM: OpCodeHandler_MP = OpCodeHandler_MP {
	decode: OpCodeHandler_MP::decode,
	has_modrm: true,
	code: Code::Movntq_m64_mm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_88: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_MP_MOVNTQ_M64_MM }.to },
		unsafe { HandlerTransmuter { from: &GEN_MV_8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_111: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtpd2dq_xmm_xmmm128 as u32,
	code_m: Code::Cvtpd2dq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_110: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtdq2pd_xmm_xmmm64 as u32,
	code_m: Code::Cvtdq2pd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_109: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvttpd2dq_xmm_xmmm128 as u32,
	code_m: Code::Cvttpd2dq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_87: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_109 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_110 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_111 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_108: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmulhw_xmm_xmmm128 as u32,
	code_m: Code::Pmulhw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMULHW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmulhw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_86: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMULHW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_108 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_107: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmulhuw_xmm_xmmm128 as u32,
	code_m: Code::Pmulhuw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMULHUW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmulhuw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_85: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMULHUW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_107 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_106: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pavgw_xmm_xmmm128 as u32,
	code_m: Code::Pavgw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PAVGW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pavgw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_84: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PAVGW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_106 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_105: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psrad_xmm_xmmm128 as u32,
	code_m: Code::Psrad_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSRAD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psrad_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_83: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSRAD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_105 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_104: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psraw_xmm_xmmm128 as u32,
	code_m: Code::Psraw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSRAW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psraw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_82: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSRAW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_104 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_103: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pavgb_xmm_xmmm128 as u32,
	code_m: Code::Pavgb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PAVGB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pavgb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_81: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PAVGB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_103 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_102: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pandn_xmm_xmmm128 as u32,
	code_m: Code::Pandn_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PANDN_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pandn_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_80: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PANDN_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_102 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_101: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmaxub_xmm_xmmm128 as u32,
	code_m: Code::Pmaxub_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMAXUB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmaxub_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_79: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMAXUB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_101 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_100: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddusw_xmm_xmmm128 as u32,
	code_m: Code::Paddusw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDUSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddusw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_78: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDUSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_100 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_99: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddusb_xmm_xmmm128 as u32,
	code_m: Code::Paddusb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDUSB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddusb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_77: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDUSB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_99 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_98: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pand_xmm_xmmm128 as u32,
	code_m: Code::Pand_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PAND_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pand_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_76: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PAND_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_98 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_97: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pminub_xmm_xmmm128 as u32,
	code_m: Code::Pminub_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMINUB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pminub_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_75: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMINUB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_97 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_96: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubusw_xmm_xmmm128 as u32,
	code_m: Code::Psubusw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBUSW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubusw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_74: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBUSW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_96 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_95: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psubusb_xmm_xmmm128 as u32,
	code_m: Code::Psubusb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSUBUSB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psubusb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_73: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSUBUSB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_95 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_RX_2: OpCodeHandler_Gv_RX = OpCodeHandler_Gv_RX {
	decode: OpCodeHandler_Gv_RX::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pmovmskb_r32_xmm as u32,
	code64: Code::Pmovmskb_r64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_N_PMOVMSKB_R32_MM: OpCodeHandler_Gv_N = OpCodeHandler_Gv_N {
	decode: OpCodeHandler_Gv_N::decode,
	has_modrm: true,
	code32: Code::Pmovmskb_r32_mm as u32,
	code64: Code::Pmovmskb_r64_mm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_72: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_GV_N_PMOVMSKB_R32_MM }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_RX_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_R: OpCodeHandler_P_R = OpCodeHandler_P_R {
	decode: OpCodeHandler_P_R::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movdq2q_mm_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VN: OpCodeHandler_VN = OpCodeHandler_VN {
	decode: OpCodeHandler_VN::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movq2dq_xmm_mm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_8: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movq_xmmm64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_71: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_WV_8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VN }.to },
		unsafe { HandlerTransmuter { from: &GEN_P_R }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_94: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pmullw_xmm_xmmm128 as u32,
	code_m: Code::Pmullw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PMULLW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pmullw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_70: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PMULLW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_94 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_93: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Paddq_xmm_xmmm128 as u32,
	code_m: Code::Paddq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PADDQ_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Paddq_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_69: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PADDQ_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_93 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_92: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psrlq_xmm_xmmm128 as u32,
	code_m: Code::Psrlq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSRLQ_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psrlq_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_68: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSRLQ_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_92 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_91: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psrld_xmm_xmmm128 as u32,
	code_m: Code::Psrld_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSRLD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psrld_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_67: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSRLD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_91 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_90: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Psrlw_xmm_xmmm128 as u32,
	code_m: Code::Psrlw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PSRLW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Psrlw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_66: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PSRLW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_90 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_89: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Addsubps_xmm_xmmm128 as u32,
	code_m: Code::Addsubps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_88: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Addsubpd_xmm_xmmm128 as u32,
	code_m: Code::Addsubpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_65: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_88 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_89 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16_7: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0007,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16_6: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0006,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16_5: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0005,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16_4: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0004,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16_3: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0003,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16_2: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0002,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16_1: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0001,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_BSWAP_R16: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Bswap_r16 as u32,
	index: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_21: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_FC7,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_8: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Shufpd_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Shufpd_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_7: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Shufps_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Shufps_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_64: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_7 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_IB_REX: OpCodeHandler_Gv_Ev_Ib_REX = OpCodeHandler_Gv_Ev_Ib_REX {
	decode: OpCodeHandler_Gv_Ev_Ib_REX::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pextrw_r32_xmm_imm8 as u32,
	code64: Code::Pextrw_r64_xmm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_3: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &GEN_GV_EV_IB_REX }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_N_IB_REX_PEXTRW_R32_MM_IMM8: OpCodeHandler_Gv_N_Ib_REX = OpCodeHandler_Gv_N_Ib_REX {
	decode: OpCodeHandler_Gv_N_Ib_REX::decode,
	has_modrm: true,
	code32: Code::Pextrw_r32_mm_imm8 as u32,
	code64: Code::Pextrw_r64_mm_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_63: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_GV_N_IB_REX_PEXTRW_R32_MM_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_RM_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VX_E_IB: OpCodeHandler_VX_E_Ib = OpCodeHandler_VX_E_Ib {
	decode: OpCodeHandler_VX_E_Ib::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Pinsrw_xmm_r32m16_imm8 as u32,
	code64: Code::Pinsrw_xmm_r64m16_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_EV_IB_PINSRW_MM_R32_M16_IMM8: OpCodeHandler_P_Ev_Ib = OpCodeHandler_P_Ev_Ib {
	decode: OpCodeHandler_P_Ev_Ib::decode,
	has_modrm: true,
	code32: Code::Pinsrw_mm_r32m16_imm8 as u32,
	code64: Code::Pinsrw_mm_r64m16_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_62: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_EV_IB_PINSRW_MM_R32_M16_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VX_E_IB }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_GV_REXW_MOVNTI_M32_R32: OpCodeHandler_Mv_Gv_REXW = OpCodeHandler_Mv_Gv_REXW {
	decode: OpCodeHandler_Mv_Gv_REXW::decode,
	has_modrm: true,
	code32: Code::Movnti_m32_r32 as u32,
	code64: Code::Movnti_m64_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_61: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_MV_GV_REXW_MOVNTI_M32_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_6: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cmpsd_xmm_xmmm64_imm8 as u32,
	code_w1: Code::Cmpsd_xmm_xmmm64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_5: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cmpss_xmm_xmmm32_imm8 as u32,
	code_w1: Code::Cmpss_xmm_xmmm32_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_4: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cmppd_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Cmppd_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_3: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cmpps_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Cmpps_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_60: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_4 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_5 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_6 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_XADD_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Xadd_rm16_r16 as u32,
	code32: Code::Xadd_rm32_r32 as u32,
	code64: Code::Xadd_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_XADD_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Xadd_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EW_MOVSX_R16_RM16: OpCodeHandler_Gv_Ew = OpCodeHandler_Gv_Ew {
	decode: OpCodeHandler_Gv_Ew::decode,
	has_modrm: true,
	code16: Code::Movsx_r16_rm16 as u32,
	code32: Code::Movsx_r32_rm16 as u32,
	code64: Code::Movsx_r64_rm16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EB_MOVSX_R16_RM8: OpCodeHandler_Gv_Eb = OpCodeHandler_Gv_Eb {
	decode: OpCodeHandler_Gv_Eb::decode,
	has_modrm: true,
	code16: Code::Movsx_r16_rm8 as u32,
	code32: Code::Movsx_r32_rm8 as u32,
	code64: Code::Movsx_r64_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_LZCNT_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Lzcnt_r16_rm16 as u32,
	code32: Code::Lzcnt_r32_rm32 as u32,
	code64: Code::Lzcnt_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_BSR_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Bsr_r16_rm16 as u32,
	code32: Code::Bsr_r32_rm32 as u32,
	code64: Code::Bsr_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_LEGACY_MANDATORY_PREFIX_F3_F2_1: OpCodeHandler_MandatoryPrefix_F3_F2 = OpCodeHandler_MandatoryPrefix_F3_F2 {
	decode: OpCodeHandler_MandatoryPrefix_F3_F2::decode,
	has_modrm: false,
	handler_normal: unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_BSR_R16_RM16 }.to },
	handler_f3: unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_LZCNT_R16_RM16 }.to },
	clear_f3: true,
	handler_f2: unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_BSR_R16_RM16 }.to },
	clear_f2: false,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_17: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_LEGACY_MANDATORY_PREFIX_F3_F2_1 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_BSR_R16_RM16 }.to },
			DecoderOptions::NO_MPFX_0FBD,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_TZCNT_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Tzcnt_r16_rm16 as u32,
	code32: Code::Tzcnt_r32_rm32 as u32,
	code64: Code::Tzcnt_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_BSF_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Bsf_r16_rm16 as u32,
	code32: Code::Bsf_r32_rm32 as u32,
	code64: Code::Bsf_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_LEGACY_MANDATORY_PREFIX_F3_F2: OpCodeHandler_MandatoryPrefix_F3_F2 = OpCodeHandler_MandatoryPrefix_F3_F2 {
	decode: OpCodeHandler_MandatoryPrefix_F3_F2::decode,
	has_modrm: false,
	handler_normal: unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_BSF_R16_RM16 }.to },
	handler_f3: unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_TZCNT_R16_RM16 }.to },
	clear_f3: true,
	handler_f2: unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_BSF_R16_RM16 }.to },
	clear_f2: false,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_16: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_LEGACY_MANDATORY_PREFIX_F3_F2 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_BSF_R16_RM16 }.to },
			DecoderOptions::NO_MPFX_0FBC,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_BTC_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Btc_rm16_r16 as u32,
	code32: Code::Btc_rm32_r32 as u32,
	code64: Code::Btc_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_20: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_FBA,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_UD1_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Ud1_r16_rm16 as u32,
	code32: Code::Ud1_r32_rm32 as u32,
	code64: Code::Ud1_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JDISP_JMPE_DISP16: OpCodeHandler_Jdisp = OpCodeHandler_Jdisp {
	decode: OpCodeHandler_Jdisp::decode,
	has_modrm: false,
	code16: Code::Jmpe_disp16 as u32,
	code32: Code::Jmpe_disp32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_54: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_JDISP_JMPE_DISP16 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_F3_F2 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_POPCNT_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Popcnt_r16_rm16 as u32,
	code32: Code::Popcnt_r32_rm32 as u32,
	code64: Code::Popcnt_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_F3_F2: OpCodeHandler_MandatoryPrefix_F3_F2 = OpCodeHandler_MandatoryPrefix_F3_F2 {
	decode: OpCodeHandler_MandatoryPrefix_F3_F2::decode,
	has_modrm: false,
	handler_normal: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	handler_f3: unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_POPCNT_R16_RM16 }.to },
	clear_f3: true,
	handler_f2: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	clear_f2: true,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_15: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_F3_F2 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_BITNESS_54 }.to },
			DecoderOptions::JMPE,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EW_MOVZX_R16_RM16: OpCodeHandler_Gv_Ew = OpCodeHandler_Gv_Ew {
	decode: OpCodeHandler_Gv_Ew::decode,
	has_modrm: true,
	code16: Code::Movzx_r16_rm16 as u32,
	code32: Code::Movzx_r32_rm16 as u32,
	code64: Code::Movzx_r64_rm16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EB_MOVZX_R16_RM8: OpCodeHandler_Gv_Eb = OpCodeHandler_Gv_Eb {
	decode: OpCodeHandler_Gv_Eb::decode,
	has_modrm: true,
	code16: Code::Movzx_r16_rm8 as u32,
	code32: Code::Movzx_r32_rm8 as u32,
	code64: Code::Movzx_r64_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_MP_3_LGS_R16_M1616: OpCodeHandler_Gv_Mp = OpCodeHandler_Gv_Mp {
	decode: OpCodeHandler_Gv_Mp::decode,
	has_modrm: true,
	code16: Code::Lgs_r16_m1616 as u32,
	code32: Code::Lgs_r32_m1632 as u32,
	code64: Code::Lgs_r64_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_MP_3_LFS_R16_M1616: OpCodeHandler_Gv_Mp = OpCodeHandler_Gv_Mp {
	decode: OpCodeHandler_Gv_Mp::decode,
	has_modrm: true,
	code16: Code::Lfs_r16_m1616 as u32,
	code32: Code::Lfs_r32_m1632 as u32,
	code64: Code::Lfs_r64_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_BTR_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Btr_rm16_r16 as u32,
	code32: Code::Btr_rm32_r32 as u32,
	code64: Code::Btr_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_MP_3_LSS_R16_M1616: OpCodeHandler_Gv_Mp = OpCodeHandler_Gv_Mp {
	decode: OpCodeHandler_Gv_Mp::decode,
	has_modrm: true,
	code16: Code::Lss_r16_m1616 as u32,
	code32: Code::Lss_r32_m1632 as u32,
	code64: Code::Lss_r64_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_CMPXCHG_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Cmpxchg_rm16_r16 as u32,
	code32: Code::Cmpxchg_rm32_r32 as u32,
	code64: Code::Cmpxchg_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_CMPXCHG_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Cmpxchg_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_IMUL_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Imul_r16_rm16 as u32,
	code32: Code::Imul_r32_rm32 as u32,
	code64: Code::Imul_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_10: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_GRP_0_FAE_LO,
	table_high: &HANDLERS_GRP_0_FAE_HI,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_CL_SHRD_RM16_R16_CL: OpCodeHandler_Ev_Gv_CL = OpCodeHandler_Ev_Gv_CL {
	decode: OpCodeHandler_Ev_Gv_CL::decode,
	has_modrm: true,
	code16: Code::Shrd_rm16_r16_CL as u32,
	code32: Code::Shrd_rm32_r32_CL as u32,
	code64: Code::Shrd_rm64_r64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_IB_SHRD_RM16_R16_IMM8: OpCodeHandler_Ev_Gv_Ib = OpCodeHandler_Ev_Gv_Ib {
	decode: OpCodeHandler_Ev_Gv_Ib::decode,
	has_modrm: true,
	code16: Code::Shrd_rm16_r16_imm8 as u32,
	code32: Code::Shrd_rm32_r32_imm8 as u32,
	code64: Code::Shrd_rm64_r64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_BTS_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Bts_rm16_r16 as u32,
	code32: Code::Bts_rm32_r32 as u32,
	code64: Code::Bts_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_RSM: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Rsm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_A_POPW_GS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Popw_GS as u32,
	code32: Code::Popd_GS as u32,
	code64: Code::Popq_GS as u32,
	reg: Register::GS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_A_PUSHW_GS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Pushw_GS as u32,
	code32: Code::Pushd_GS as u32,
	code64: Code::Pushq_GS as u32,
	reg: Register::GS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_3_B_CMPXCHG486_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Cmpxchg486_rm16_r16 as u32,
	code32: Code::Cmpxchg486_rm32_r32 as u32,
	code64: Code::INVALID as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_3_B_IBTS_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Ibts_rm16_r16 as u32,
	code32: Code::Ibts_rm32_r32 as u32,
	code64: Code::INVALID as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_9: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_GRP_0_FA7_LO,
	table_high: &HANDLERS_GRP_0_FA7_HI,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS5_1: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_9 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_EV_GV_3_B_IBTS_RM16_R16 }.to },
			DecoderOptions::XBTS,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_EV_GV_3_B_CMPXCHG486_RM16_R16 }.to },
			DecoderOptions::CMPXCHG486A,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_53: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS5_1 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_9 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_1_CMPXCHG486_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Cmpxchg486_rm8_r8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_B_XBTS_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Xbts_r16_rm16 as u32,
	code32: Code::Xbts_r32_rm32 as u32,
	code64: Code::INVALID as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_8: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_GRP_0_FA6_LO,
	table_high: &HANDLERS_GRP_0_FA6_HI,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS5: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_8 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_B_XBTS_R16_RM16 }.to },
			DecoderOptions::XBTS,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_EB_GB_1_CMPXCHG486_RM8_R8 }.to },
			DecoderOptions::CMPXCHG486A,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_52: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS5 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_8 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_CL_SHLD_RM16_R16_CL: OpCodeHandler_Ev_Gv_CL = OpCodeHandler_Ev_Gv_CL {
	decode: OpCodeHandler_Ev_Gv_CL::decode,
	has_modrm: true,
	code16: Code::Shld_rm16_r16_CL as u32,
	code32: Code::Shld_rm32_r32_CL as u32,
	code64: Code::Shld_rm64_r64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_IB_SHLD_RM16_R16_IMM8: OpCodeHandler_Ev_Gv_Ib = OpCodeHandler_Ev_Gv_Ib {
	decode: OpCodeHandler_Ev_Gv_Ib::decode,
	has_modrm: true,
	code16: Code::Shld_rm16_r16_imm8 as u32,
	code32: Code::Shld_rm32_r32_imm8 as u32,
	code64: Code::Shld_rm64_r64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_3_A_BT_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Bt_rm16_r16 as u32,
	code32: Code::Bt_rm32_r32 as u32,
	code64: Code::Bt_rm64_r64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CPUID: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Cpuid as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_A_POPW_FS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Popw_FS as u32,
	code32: Code::Popd_FS as u32,
	code64: Code::Popq_FS as u32,
	reg: Register::FS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_A_PUSHW_FS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Pushw_FS as u32,
	code32: Code::Pushd_FS as u32,
	code64: Code::Pushq_FS as u32,
	reg: Register::FS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETG_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setg_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETLE_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setle_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETGE_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setge_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETL_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setl_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETNP_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setnp_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETP_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setp_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETNS_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setns_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETS_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Sets_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETA_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Seta_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETBE_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setbe_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETNE_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setne_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETE_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Sete_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETAE_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setae_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETB_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setb_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETNO_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Setno_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_SETO_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Seto_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JG_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jg_rel16 as u32,
	code32: Code::Jg_rel32_32 as u32,
	code64: Code::Jg_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JLE_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jle_rel16 as u32,
	code32: Code::Jle_rel32_32 as u32,
	code64: Code::Jle_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JGE_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jge_rel16 as u32,
	code32: Code::Jge_rel32_32 as u32,
	code64: Code::Jge_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JL_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jl_rel16 as u32,
	code32: Code::Jl_rel32_32 as u32,
	code64: Code::Jl_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JNP_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jnp_rel16 as u32,
	code32: Code::Jnp_rel32_32 as u32,
	code64: Code::Jnp_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JP_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jp_rel16 as u32,
	code32: Code::Jp_rel32_32 as u32,
	code64: Code::Jp_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JNS_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jns_rel16 as u32,
	code32: Code::Jns_rel32_32 as u32,
	code64: Code::Jns_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JS_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Js_rel16 as u32,
	code32: Code::Js_rel32_32 as u32,
	code64: Code::Js_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JA_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Ja_rel16 as u32,
	code32: Code::Ja_rel32_32 as u32,
	code64: Code::Ja_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JBE_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jbe_rel16 as u32,
	code32: Code::Jbe_rel32_32 as u32,
	code64: Code::Jbe_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JNE_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jne_rel16 as u32,
	code32: Code::Jne_rel32_32 as u32,
	code64: Code::Jne_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JE_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Je_rel16 as u32,
	code32: Code::Je_rel32_32 as u32,
	code64: Code::Je_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JAE_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jae_rel16 as u32,
	code32: Code::Jae_rel32_32 as u32,
	code64: Code::Jae_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JB_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jb_rel16 as u32,
	code32: Code::Jb_rel32_32 as u32,
	code64: Code::Jb_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JNO_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jno_rel16 as u32,
	code32: Code::Jno_rel32_32 as u32,
	code64: Code::Jno_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JO_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jo_rel16 as u32,
	code32: Code::Jo_rel32_32 as u32,
	code64: Code::Jo_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_7: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movdqu_xmmm128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_6: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movdqa_xmmm128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_Q_P_MOVQ_MMM64_MM: OpCodeHandler_Q_P = OpCodeHandler_Q_P {
	decode: OpCodeHandler_Q_P::decode,
	has_modrm: true,
	code: Code::Movq_mmm64_mm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_59: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_Q_P_MOVQ_MMM64_MM }.to },
		unsafe { HandlerTransmuter { from: &GEN_WV_6 }.to },
		unsafe { HandlerTransmuter { from: &GEN_WV_7 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_87: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movq_xmm_xmmm64 as u32,
	code_m: Code::Movq_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_VX_MOVD_RM32_XMM: OpCodeHandler_Ev_VX = OpCodeHandler_Ev_VX {
	decode: OpCodeHandler_Ev_VX::decode,
	has_modrm: true,
	code32: Code::Movd_rm32_xmm as u32,
	code64: Code::Movq_rm64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_P_MOVD_RM32_MM: OpCodeHandler_Ev_P = OpCodeHandler_Ev_P {
	decode: OpCodeHandler_Ev_P::decode,
	has_modrm: true,
	code32: Code::Movd_rm32_mm as u32,
	code64: Code::Movq_rm64_mm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_58: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_EV_P_MOVD_RM32_MM }.to },
		unsafe { HandlerTransmuter { from: &GEN_EV_VX_MOVD_RM32_XMM }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_87 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_86: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Hsubps_xmm_xmmm128 as u32,
	code_m: Code::Hsubps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_85: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Hsubpd_xmm_xmmm128 as u32,
	code_m: Code::Hsubpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_57: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_85 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_86 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_84: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Haddps_xmm_xmmm128 as u32,
	code_m: Code::Haddps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_83: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Haddpd_xmm_xmmm128 as u32,
	code_m: Code::Haddpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_56: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_83 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_84 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_3_3: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Insertq_xmm_xmm as u32,
	code_m: Code::INVALID as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_3_2: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Extrq_xmm_xmm as u32,
	code_m: Code::INVALID as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_32_64_VMWRITE_R32_RM32: OpCodeHandler_Gv_Ev_32_64 = OpCodeHandler_Gv_Ev_32_64 {
	decode: OpCodeHandler_Gv_Ev_32_64::decode,
	has_modrm: true,
	code32: Code::Vmwrite_r32_rm32 as u32,
	code64: Code::Vmwrite_r64_rm64 as u32,
	disallow_mem: 0x0000_0000,
	disallow_reg: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_55: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_GV_EV_32_64_VMWRITE_R32_RM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_3_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_3_3 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VRIB_IB: OpCodeHandler_VRIbIb = OpCodeHandler_VRIbIb {
	decode: OpCodeHandler_VRIbIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Insertq_xmm_xmm_imm8_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_19: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_660_F78,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_32_64_VMREAD_RM32_R32: OpCodeHandler_Ev_Gv_32_64 = OpCodeHandler_Ev_Gv_32_64 {
	decode: OpCodeHandler_Ev_Gv_32_64::decode,
	has_modrm: true,
	code32: Code::Vmread_rm32_r32 as u32,
	code64: Code::Vmread_rm64_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_54: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_EV_GV_32_64_VMREAD_RM32_R32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GROUP_19 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VRIB_IB }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_EMMS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Emms as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM_1: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_EMMS }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_82: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpeqd_xmm_xmmm128 as u32,
	code_m: Code::Pcmpeqd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PCMPEQD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pcmpeqd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_53: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PCMPEQD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_82 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_81: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpeqw_xmm_xmmm128 as u32,
	code_m: Code::Pcmpeqw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PCMPEQW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pcmpeqw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_52: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PCMPEQW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_81 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_80: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpeqb_xmm_xmmm128 as u32,
	code_m: Code::Pcmpeqb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PCMPEQB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pcmpeqb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_51: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PCMPEQB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_80 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_18: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F73,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_17: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F72,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_16: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F71,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_2: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pshuflw_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pshuflw_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2_1: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pshufhw_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pshufhw_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VWIB_2: OpCodeHandler_VWIb = OpCodeHandler_VWIb {
	decode: OpCodeHandler_VWIb::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Pshufd_xmm_xmmm128_imm8 as u32,
	code_w1: Code::Pshufd_xmm_xmmm128_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_IB_PSHUFW_MM_MMM64_IMM8: OpCodeHandler_P_Q_Ib = OpCodeHandler_P_Q_Ib {
	decode: OpCodeHandler_P_Q_Ib::decode,
	has_modrm: true,
	code: Code::Pshufw_mm_mmm64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_50: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_IB_PSHUFW_MM_MMM64_IMM8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VWIB_2_2 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_79: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movdqu_xmm_xmmm128 as u32,
	code_m: Code::Movdqu_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_78: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movdqa_xmm_xmmm128 as u32,
	code_m: Code::Movdqa_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_MOVQ_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Movq_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_49: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_MOVQ_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_78 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_79 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VX_EV_MOVD_XMM_RM32: OpCodeHandler_VX_Ev = OpCodeHandler_VX_Ev {
	decode: OpCodeHandler_VX_Ev::decode,
	has_modrm: true,
	code32: Code::Movd_xmm_rm32 as u32,
	code64: Code::Movq_xmm_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_EV_MOVD_MM_RM32: OpCodeHandler_P_Ev = OpCodeHandler_P_Ev {
	decode: OpCodeHandler_P_Ev::decode,
	has_modrm: true,
	code32: Code::Movd_mm_rm32 as u32,
	code64: Code::Movq_mm_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_48: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_EV_MOVD_MM_RM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VX_EV_MOVD_XMM_RM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_77: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpckhqdq_xmm_xmmm128 as u32,
	code_m: Code::Punpckhqdq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_47: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_77 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_76: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpcklqdq_xmm_xmmm128 as u32,
	code_m: Code::Punpcklqdq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_46: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_76 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_75: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Packssdw_xmm_xmmm128 as u32,
	code_m: Code::Packssdw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PACKSSDW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Packssdw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_45: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PACKSSDW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_75 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_74: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpckhdq_xmm_xmmm128 as u32,
	code_m: Code::Punpckhdq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PUNPCKHDQ_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Punpckhdq_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_44: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PUNPCKHDQ_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_74 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_73: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpckhwd_xmm_xmmm128 as u32,
	code_m: Code::Punpckhwd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PUNPCKHWD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Punpckhwd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_43: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PUNPCKHWD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_73 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_72: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpckhbw_xmm_xmmm128 as u32,
	code_m: Code::Punpckhbw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PUNPCKHBW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Punpckhbw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_42: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PUNPCKHBW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_72 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_71: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Packuswb_xmm_xmmm128 as u32,
	code_m: Code::Packuswb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PACKUSWB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Packuswb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_41: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PACKUSWB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_71 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_70: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpgtd_xmm_xmmm128 as u32,
	code_m: Code::Pcmpgtd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PCMPGTD_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pcmpgtd_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_40: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PCMPGTD_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_70 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_69: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpgtw_xmm_xmmm128 as u32,
	code_m: Code::Pcmpgtw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PCMPGTW_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pcmpgtw_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_39: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PCMPGTW_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_69 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_68: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Pcmpgtb_xmm_xmmm128 as u32,
	code_m: Code::Pcmpgtb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PCMPGTB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Pcmpgtb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_38: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PCMPGTB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_68 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_67: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Packsswb_xmm_xmmm128 as u32,
	code_m: Code::Packsswb_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PACKSSWB_MM_MMM64: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Packsswb_mm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_37: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PACKSSWB_MM_MMM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_67 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_66: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpckldq_xmm_xmmm128 as u32,
	code_m: Code::Punpckldq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PUNPCKLDQ_MM_MMM32: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Punpckldq_mm_mmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_36: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PUNPCKLDQ_MM_MMM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_66 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_65: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpcklwd_xmm_xmmm128 as u32,
	code_m: Code::Punpcklwd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PUNPCKLWD_MM_MMM32: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Punpcklwd_mm_mmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_35: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PUNPCKLWD_MM_MMM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_65 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_64: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Punpcklbw_xmm_xmmm128 as u32,
	code_m: Code::Punpcklbw_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_Q_PUNPCKLBW_MM_MMM32: OpCodeHandler_P_Q = OpCodeHandler_P_Q {
	decode: OpCodeHandler_P_Q::decode,
	has_modrm: true,
	code: Code::Punpcklbw_mm_mmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_34: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_Q_PUNPCKLBW_MM_MMM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_63: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Maxsd_xmm_xmmm64 as u32,
	code_m: Code::Maxsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_62: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Maxss_xmm_xmmm32 as u32,
	code_m: Code::Maxss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_61: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Maxpd_xmm_xmmm128 as u32,
	code_m: Code::Maxpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_60: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Maxps_xmm_xmmm128 as u32,
	code_m: Code::Maxps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_33: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_60 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_61 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_62 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_63 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_59: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Divsd_xmm_xmmm64 as u32,
	code_m: Code::Divsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_58: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Divss_xmm_xmmm32 as u32,
	code_m: Code::Divss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_57: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Divpd_xmm_xmmm128 as u32,
	code_m: Code::Divpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_56: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Divps_xmm_xmmm128 as u32,
	code_m: Code::Divps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_32: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_56 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_57 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_58 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_59 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_55: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Minsd_xmm_xmmm64 as u32,
	code_m: Code::Minsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_54: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Minss_xmm_xmmm32 as u32,
	code_m: Code::Minss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_53: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Minpd_xmm_xmmm128 as u32,
	code_m: Code::Minpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_52: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Minps_xmm_xmmm128 as u32,
	code_m: Code::Minps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_31: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_52 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_53 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_54 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_55 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_51: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Subsd_xmm_xmmm64 as u32,
	code_m: Code::Subsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_50: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Subss_xmm_xmmm32 as u32,
	code_m: Code::Subss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_49: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Subpd_xmm_xmmm128 as u32,
	code_m: Code::Subpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_48: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Subps_xmm_xmmm128 as u32,
	code_m: Code::Subps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_30: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_48 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_49 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_50 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_51 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_47: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvttps2dq_xmm_xmmm128 as u32,
	code_m: Code::Cvttps2dq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_46: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtps2dq_xmm_xmmm128 as u32,
	code_m: Code::Cvtps2dq_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_45: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtdq2ps_xmm_xmmm128 as u32,
	code_m: Code::Cvtdq2ps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_29: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_45 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_46 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_47 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_44: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtsd2ss_xmm_xmmm64 as u32,
	code_m: Code::Cvtsd2ss_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_43: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtss2sd_xmm_xmmm32 as u32,
	code_m: Code::Cvtss2sd_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_42: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtpd2ps_xmm_xmmm128 as u32,
	code_m: Code::Cvtpd2ps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_41: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Cvtps2pd_xmm_xmmm64 as u32,
	code_m: Code::Cvtps2pd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_28: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_41 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_42 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_43 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_44 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_40: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Mulsd_xmm_xmmm64 as u32,
	code_m: Code::Mulsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_39: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Mulss_xmm_xmmm32 as u32,
	code_m: Code::Mulss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_38: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Mulpd_xmm_xmmm128 as u32,
	code_m: Code::Mulpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_37: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Mulps_xmm_xmmm128 as u32,
	code_m: Code::Mulps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_27: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_37 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_38 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_39 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_40 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_36: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Addsd_xmm_xmmm64 as u32,
	code_m: Code::Addsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_35: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Addss_xmm_xmmm32 as u32,
	code_m: Code::Addss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_34: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Addpd_xmm_xmmm128 as u32,
	code_m: Code::Addpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_33: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Addps_xmm_xmmm128 as u32,
	code_m: Code::Addps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_26: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_33 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_34 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_35 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_36 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_32: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Xorpd_xmm_xmmm128 as u32,
	code_m: Code::Xorpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_31: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Xorps_xmm_xmmm128 as u32,
	code_m: Code::Xorps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_25: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_31 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_30: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Orpd_xmm_xmmm128 as u32,
	code_m: Code::Orpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_29: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Orps_xmm_xmmm128 as u32,
	code_m: Code::Orps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_24: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_29 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_30 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_28: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Andnpd_xmm_xmmm128 as u32,
	code_m: Code::Andnpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_27: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Andnps_xmm_xmmm128 as u32,
	code_m: Code::Andnps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_23: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_27 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_28 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_26: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Andpd_xmm_xmmm128 as u32,
	code_m: Code::Andpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_25: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Andps_xmm_xmmm128 as u32,
	code_m: Code::Andps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_22: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_25 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_26 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_24: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Rcpss_xmm_xmmm32 as u32,
	code_m: Code::Rcpss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_23: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Rcpps_xmm_xmmm128 as u32,
	code_m: Code::Rcpps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_21: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_23 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_24 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_22: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Rsqrtss_xmm_xmmm32 as u32,
	code_m: Code::Rsqrtss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_21: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Rsqrtps_xmm_xmmm128 as u32,
	code_m: Code::Rsqrtps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_20: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_21 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_22 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_20: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sqrtsd_xmm_xmmm64 as u32,
	code_m: Code::Sqrtsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_19: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sqrtss_xmm_xmmm32 as u32,
	code_m: Code::Sqrtss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_18: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sqrtpd_xmm_xmmm128 as u32,
	code_m: Code::Sqrtpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_17: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Sqrtps_xmm_xmmm128 as u32,
	code_m: Code::Sqrtps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_19: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_17 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_18 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_19 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_20 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_RX_1: OpCodeHandler_Gv_RX = OpCodeHandler_Gv_RX {
	decode: OpCodeHandler_Gv_RX::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Movmskpd_r32_xmm as u32,
	code64: Code::Movmskpd_r64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_RX: OpCodeHandler_Gv_RX = OpCodeHandler_Gv_RX {
	decode: OpCodeHandler_Gv_RX::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code32: Code::Movmskps_r32_xmm as u32,
	code64: Code::Movmskps_r64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_18: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_GV_RX }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_RX_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVG_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovg_r16_rm16 as u32,
	code32: Code::Cmovg_r32_rm32 as u32,
	code64: Code::Cmovg_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVLE_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovle_r16_rm16 as u32,
	code32: Code::Cmovle_r32_rm32 as u32,
	code64: Code::Cmovle_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVGE_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovge_r16_rm16 as u32,
	code32: Code::Cmovge_r32_rm32 as u32,
	code64: Code::Cmovge_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVL_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovl_r16_rm16 as u32,
	code32: Code::Cmovl_r32_rm32 as u32,
	code64: Code::Cmovl_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVNP_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovnp_r16_rm16 as u32,
	code32: Code::Cmovnp_r32_rm32 as u32,
	code64: Code::Cmovnp_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVP_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovp_r16_rm16 as u32,
	code32: Code::Cmovp_r32_rm32 as u32,
	code64: Code::Cmovp_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVNS_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovns_r16_rm16 as u32,
	code32: Code::Cmovns_r32_rm32 as u32,
	code64: Code::Cmovns_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVS_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovs_r16_rm16 as u32,
	code32: Code::Cmovs_r32_rm32 as u32,
	code64: Code::Cmovs_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVA_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmova_r16_rm16 as u32,
	code32: Code::Cmova_r32_rm32 as u32,
	code64: Code::Cmova_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVBE_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovbe_r16_rm16 as u32,
	code32: Code::Cmovbe_r32_rm32 as u32,
	code64: Code::Cmovbe_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVNE_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovne_r16_rm16 as u32,
	code32: Code::Cmovne_r32_rm32 as u32,
	code64: Code::Cmovne_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVE_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmove_r16_rm16 as u32,
	code32: Code::Cmove_r32_rm32 as u32,
	code64: Code::Cmove_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVAE_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovae_r16_rm16 as u32,
	code32: Code::Cmovae_r32_rm32 as u32,
	code64: Code::Cmovae_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVB_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovb_r16_rm16 as u32,
	code32: Code::Cmovb_r32_rm32 as u32,
	code64: Code::Cmovb_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVNO_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovno_r16_rm16 as u32,
	code32: Code::Cmovno_r32_rm32 as u32,
	code64: Code::Cmovno_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMOVO_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmovo_r16_rm16 as u32,
	code32: Code::Cmovo_r32_rm32 as u32,
	code64: Code::Cmovo_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ANOTHER_TABLE_2: OpCodeHandler_AnotherTable = OpCodeHandler_AnotherTable {
	decode: OpCodeHandler_AnotherTable::decode,
	has_modrm: false,
	group_handlers: &THREE_BYTE_HANDLERS_0_F3_AXX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ANOTHER_TABLE_1: OpCodeHandler_AnotherTable = OpCodeHandler_AnotherTable {
	decode: OpCodeHandler_AnotherTable::decode,
	has_modrm: false,
	group_handlers: &THREE_BYTE_HANDLERS_0_F38_XX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_INVALID_NO_MOD_RM: OpCodeHandler_Invalid = OpCodeHandler_Invalid {
	decode: OpCodeHandler_Invalid::decode,
	has_modrm: false,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_GETSEC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Getsec as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_NO_MOD_RM: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: false,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_SIMPLE_GETSEC }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID_NO_MOD_RM }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE4_SYSEXITD: OpCodeHandler_Simple4 = OpCodeHandler_Simple4 {
	decode: OpCodeHandler_Simple4::decode,
	has_modrm: false,
	code32: Code::Sysexitd as u32,
	code64: Code::Sysexitq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_SYSENTER: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Sysenter as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_RDPMC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Rdpmc as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_RDMSR: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Rdmsr as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_RDTSC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Rdtsc as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_WRMSR: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Wrmsr as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_16: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Comisd_xmm_xmmm64 as u32,
	code_m: Code::Comisd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_15: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Comiss_xmm_xmmm32 as u32,
	code_m: Code::Comiss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_17: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_15 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_16 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_14: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Ucomisd_xmm_xmmm64 as u32,
	code_m: Code::Ucomisd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_13: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Ucomiss_xmm_xmmm32 as u32,
	code_m: Code::Ucomiss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_16: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_13 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_14 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_W_3: OpCodeHandler_Gv_W = OpCodeHandler_Gv_W {
	decode: OpCodeHandler_Gv_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cvtsd2si_r32_xmmm64 as u32,
	code_w1: Code::Cvtsd2si_r64_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_W_2: OpCodeHandler_Gv_W = OpCodeHandler_Gv_W {
	decode: OpCodeHandler_Gv_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cvtss2si_r32_xmmm32 as u32,
	code_w1: Code::Cvtss2si_r64_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_W_3: OpCodeHandler_P_W = OpCodeHandler_P_W {
	decode: OpCodeHandler_P_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Cvtpd2pi_mm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_W_2: OpCodeHandler_P_W = OpCodeHandler_P_W {
	decode: OpCodeHandler_P_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Cvtps2pi_mm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_15: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_W_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_P_W_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_W_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_W_3 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_W_1: OpCodeHandler_Gv_W = OpCodeHandler_Gv_W {
	decode: OpCodeHandler_Gv_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cvttsd2si_r32_xmmm64 as u32,
	code_w1: Code::Cvttsd2si_r64_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_W: OpCodeHandler_Gv_W = OpCodeHandler_Gv_W {
	decode: OpCodeHandler_Gv_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cvttss2si_r32_xmmm32 as u32,
	code_w1: Code::Cvttss2si_r64_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_W_1: OpCodeHandler_P_W = OpCodeHandler_P_W {
	decode: OpCodeHandler_P_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Cvttpd2pi_mm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_P_W: OpCodeHandler_P_W = OpCodeHandler_P_W {
	decode: OpCodeHandler_P_W::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Cvttps2pi_mm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_14: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_P_W }.to },
		unsafe { HandlerTransmuter { from: &GEN_P_W_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_W }.to },
		unsafe { HandlerTransmuter { from: &GEN_GV_W_1 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_7: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movntsd_m64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_6: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movntss_m32_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_5: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movntpd_m128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_4: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movntps_m128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_13: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_MV_4 }.to },
		unsafe { HandlerTransmuter { from: &GEN_MV_5 }.to },
		unsafe { HandlerTransmuter { from: &GEN_MV_6 }.to },
		unsafe { HandlerTransmuter { from: &GEN_MV_7 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_V_EV_1: OpCodeHandler_V_Ev = OpCodeHandler_V_Ev {
	decode: OpCodeHandler_V_Ev::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cvtsi2sd_xmm_rm32 as u32,
	code_w1: Code::Cvtsi2sd_xmm_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_V_EV: OpCodeHandler_V_Ev = OpCodeHandler_V_Ev {
	decode: OpCodeHandler_V_Ev::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_w0: Code::Cvtsi2ss_xmm_rm32 as u32,
	code_w1: Code::Cvtsi2ss_xmm_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VQ_1: OpCodeHandler_VQ = OpCodeHandler_VQ {
	decode: OpCodeHandler_VQ::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Cvtpi2pd_xmm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VQ: OpCodeHandler_VQ = OpCodeHandler_VQ {
	decode: OpCodeHandler_VQ::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Cvtpi2ps_xmm_mmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_12: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VQ }.to },
		unsafe { HandlerTransmuter { from: &GEN_VQ_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_V_EV }.to },
		unsafe { HandlerTransmuter { from: &GEN_V_EV_1 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_5: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movapd_xmmm128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_4: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movaps_xmmm128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_11: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_WV_4 }.to },
		unsafe { HandlerTransmuter { from: &GEN_WV_5 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_12: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movapd_xmm_xmmm128 as u32,
	code_m: Code::Movapd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_11: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movaps_xmm_xmmm128 as u32,
	code_m: Code::Movaps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_10: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_11 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_12 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_C_R_3_B_MOV_TR_R32: OpCodeHandler_C_R = OpCodeHandler_C_R {
	decode: OpCodeHandler_C_R::decode,
	has_modrm: true,
	code32: Code::Mov_tr_r32 as u32,
	code64: Code::INVALID as u32,
	base_reg: Register::TR0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_14: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_C_R_3_B_MOV_TR_R32 }.to },
			DecoderOptions::MOV_TR,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_51: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_14 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_R_C_3_B_MOV_R32_TR: OpCodeHandler_R_C = OpCodeHandler_R_C {
	decode: OpCodeHandler_R_C::decode,
	has_modrm: true,
	code32: Code::Mov_r32_tr as u32,
	code64: Code::INVALID as u32,
	base_reg: Register::TR0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_13: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_R_C_3_B_MOV_R32_TR }.to },
			DecoderOptions::MOV_TR,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_50: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_13 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_C_R_3_A_MOV_DR_R32: OpCodeHandler_C_R = OpCodeHandler_C_R {
	decode: OpCodeHandler_C_R::decode,
	has_modrm: true,
	code32: Code::Mov_dr_r32 as u32,
	code64: Code::Mov_dr_r64 as u32,
	base_reg: Register::DR0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_C_R_3_A_MOV_CR_R32: OpCodeHandler_C_R = OpCodeHandler_C_R {
	decode: OpCodeHandler_C_R::decode,
	has_modrm: true,
	code32: Code::Mov_cr_r32 as u32,
	code64: Code::Mov_cr_r64 as u32,
	base_reg: Register::CR0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_R_C_3_A_MOV_R32_DR: OpCodeHandler_R_C = OpCodeHandler_R_C {
	decode: OpCodeHandler_R_C::decode,
	has_modrm: true,
	code32: Code::Mov_r32_dr as u32,
	code64: Code::Mov_r64_dr as u32,
	base_reg: Register::DR0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_R_C_3_A_MOV_R32_CR: OpCodeHandler_R_C = OpCodeHandler_R_C {
	decode: OpCodeHandler_R_C::decode,
	has_modrm: true,
	code32: Code::Mov_r32_cr as u32,
	code64: Code::Mov_r64_cr as u32,
	base_reg: Register::CR0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_B_EV_BNDCN_BND_RM32: OpCodeHandler_B_Ev = OpCodeHandler_B_Ev {
	decode: OpCodeHandler_B_Ev::decode,
	has_modrm: true,
	code32: Code::Bndcn_bnd_rm32 as u32,
	code64: Code::Bndcn_bnd_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_B_EV_BNDMK_BND_M32: OpCodeHandler_B_Ev = OpCodeHandler_B_Ev {
	decode: OpCodeHandler_B_Ev::decode,
	has_modrm: true,
	code32: Code::Bndmk_bnd_m32 as u32,
	code64: Code::Bndmk_bnd_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_2: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_B }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_B_EV_BNDMK_BND_M32 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BM_B_BNDMOV_BNDM64_BND: OpCodeHandler_BM_B = OpCodeHandler_BM_B {
	decode: OpCodeHandler_BM_B::decode,
	has_modrm: true,
	code32: Code::Bndmov_bndm64_bnd as u32,
	code64: Code::Bndmov_bndm128_bnd as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MIB_B_BNDSTX_MIB_BND: OpCodeHandler_MIB_B = OpCodeHandler_MIB_B {
	decode: OpCodeHandler_MIB_B::decode,
	has_modrm: true,
	code: Code::Bndstx_mib_bnd as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM_1: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_B }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_MIB_B_BNDSTX_MIB_BND }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_9: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_RM_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_BM_B_BNDMOV_BNDM64_BND }.to },
		unsafe { HandlerTransmuter { from: &GEN_RM_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_B_EV_BNDCN_BND_RM32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RESERVED_NOP_2: OpCodeHandler_ReservedNop = OpCodeHandler_ReservedNop {
	decode: OpCodeHandler_ReservedNop::decode,
	has_modrm: true,
	reserved_nop_handler: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_B }.to },
	other_handler: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_9 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_B_EV_BNDCU_BND_RM32: OpCodeHandler_B_Ev = OpCodeHandler_B_Ev {
	decode: OpCodeHandler_B_Ev::decode,
	has_modrm: true,
	code32: Code::Bndcu_bnd_rm32 as u32,
	code64: Code::Bndcu_bnd_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_B_EV_BNDCL_BND_RM32: OpCodeHandler_B_Ev = OpCodeHandler_B_Ev {
	decode: OpCodeHandler_B_Ev::decode,
	has_modrm: true,
	code32: Code::Bndcl_bnd_rm32 as u32,
	code64: Code::Bndcl_bnd_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_B_BM_BNDMOV_BND_BNDM64: OpCodeHandler_B_BM = OpCodeHandler_B_BM {
	decode: OpCodeHandler_B_BM::decode,
	has_modrm: true,
	code32: Code::Bndmov_bnd_bndm64 as u32,
	code64: Code::Bndmov_bnd_bndm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_B_MIB_BNDLDX_BND_MIB: OpCodeHandler_B_MIB = OpCodeHandler_B_MIB {
	decode: OpCodeHandler_B_MIB::decode,
	has_modrm: true,
	code: Code::Bndldx_bnd_mib as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RM: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_A }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_B_MIB_BNDLDX_BND_MIB }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_8: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_RM }.to },
		unsafe { HandlerTransmuter { from: &GEN_B_BM_BNDMOV_BND_BNDM64 }.to },
		unsafe { HandlerTransmuter { from: &GEN_B_EV_BNDCL_BND_RM32 }.to },
		unsafe { HandlerTransmuter { from: &GEN_B_EV_BNDCU_BND_RM32 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RESERVED_NOP_1: OpCodeHandler_ReservedNop = OpCodeHandler_ReservedNop {
	decode: OpCodeHandler_ReservedNop::decode,
	has_modrm: true,
	reserved_nop_handler: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_A }.to },
	other_handler: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_8 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_3: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movhpd_m64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_2: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movhps_m64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_7: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_MV_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_MV_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_10: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movshdup_xmm_xmmm128 as u32,
	code_m: Code::Movshdup_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VM_1: OpCodeHandler_VM = OpCodeHandler_VM {
	decode: OpCodeHandler_VM::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movhpd_xmm_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_3_1: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movlhps_xmm_xmm as u32,
	code_m: Code::Movhps_xmm_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_6: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_3_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VM_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_10 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_9: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Unpckhpd_xmm_xmmm128 as u32,
	code_m: Code::Unpckhpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_8: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Unpckhps_xmm_xmmm128 as u32,
	code_m: Code::Unpckhps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_5: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_8 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_9 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_7: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Unpcklpd_xmm_xmmm128 as u32,
	code_m: Code::Unpcklpd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_6: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Unpcklps_xmm_xmmm128 as u32,
	code_m: Code::Unpcklps_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_4: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2_6 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_7 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_B_UMOV_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Umov_r16_rm16 as u32,
	code32: Code::Umov_r32_rm32 as u32,
	code64: Code::INVALID as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV_1: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movlpd_m64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MV: OpCodeHandler_MV = OpCodeHandler_MV {
	decode: OpCodeHandler_MV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movlps_m64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_3: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_MV }.to },
		unsafe { HandlerTransmuter { from: &GEN_MV_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
		unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_12: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_3 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_B_UMOV_R16_RM16 }.to },
			DecoderOptions::UMOV,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_49: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_12 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_3 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_UMOV_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Umov_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_5: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movddup_xmm_xmmm64 as u32,
	code_m: Code::Movddup_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_4: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movsldup_xmm_xmmm128 as u32,
	code_m: Code::Movsldup_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VM: OpCodeHandler_VM = OpCodeHandler_VM {
	decode: OpCodeHandler_VM::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movlpd_xmm_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_3: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movhlps_xmm_xmm as u32,
	code_m: Code::Movlps_xmm_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_2: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_3 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VM }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_4 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_5 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_11: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_2 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_GB_EB_UMOV_R8_RM8 }.to },
			DecoderOptions::UMOV,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_48: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_11 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_2 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_3_B_UMOV_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Umov_rm16_r16 as u32,
	code32: Code::Umov_rm32_r32 as u32,
	code64: Code::INVALID as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_3: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movsd_xmmm64_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_2: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movss_xmmm32_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV_1: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movupd_xmmm128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WV: OpCodeHandler_WV = OpCodeHandler_WV {
	decode: OpCodeHandler_WV::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code: Code::Movups_xmmm128_xmm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX_1: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_WV }.to },
		unsafe { HandlerTransmuter { from: &GEN_WV_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_WV_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_WV_3 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_10: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_1 }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_EV_GV_3_B_UMOV_RM16_R16 }.to },
			DecoderOptions::UMOV,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_47: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_10 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_1 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_1_UMOV_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Umov_rm8_r8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_3: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movsd_xmm_xmmm64 as u32,
	code_m: Code::Movsd_xmm_xmmm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_2: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movss_xmm_xmmm32 as u32,
	code_m: Code::Movss_xmm_xmmm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2_1: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movupd_xmm_xmmm128 as u32,
	code_m: Code::Movupd_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VW_2: OpCodeHandler_VW = OpCodeHandler_VW {
	decode: OpCodeHandler_VW::decode,
	has_modrm: true,
	base_reg: Register::XMM0,
	code_r: Code::Movups_xmm_xmmm128 as u32,
	code_m: Code::Movups_xmm_xmmm128 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MANDATORY_PREFIX: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &GEN_VW_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_1 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_2 }.to },
		unsafe { HandlerTransmuter { from: &GEN_VW_2_3 }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_9: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_EB_GB_1_UMOV_RM8_R8 }.to },
			DecoderOptions::UMOV,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_46: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_9 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_D3_NOW: OpCodeHandler_D3NOW = OpCodeHandler_D3NOW {
	decode: OpCodeHandler_D3NOW::decode,
	has_modrm: true,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FEMMS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Femms as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RESERVED_NOP: OpCodeHandler_ReservedNop = OpCodeHandler_ReservedNop {
	decode: OpCodeHandler_ReservedNop::decode,
	has_modrm: true,
	reserved_nop_handler: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
	other_handler: unsafe { HandlerTransmuter { from: &GRP0_F0_D }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_UD2: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Ud2 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CL1_INVMB: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Cl1invmb as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_8: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CL1_INVMB }.to },
			DecoderOptions::CL1INVMB,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_45: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_8 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_8 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_WBINVD: OpCodeHandler_Wbinvd = OpCodeHandler_Wbinvd {
	decode: OpCodeHandler_Wbinvd::decode,
	has_modrm: false,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_INVD: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Invd as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_LOADALL386: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Loadall386 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_3_B_SYSRETD: OpCodeHandler_Simple2 = OpCodeHandler_Simple2 {
	decode: OpCodeHandler_Simple2::decode,
	has_modrm: false,
	code16: Code::Sysretd as u32,
	code32: Code::Sysretd as u32,
	code64: Code::Sysretq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_7: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_B_SYSRETD }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_SIMPLE_LOADALL386 }.to },
			DecoderOptions::LOADALL386,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_44: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_7 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_B_SYSRETD }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CLTS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Clts as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_LOADALL286: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Loadall286 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_SYSCALL: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Syscall as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_6: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SYSCALL }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_SIMPLE_LOADALL286 }.to },
			DecoderOptions::LOADALL286,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_43: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_6 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SYSCALL }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_LOADALLRESET286: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Loadallreset286 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_5: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_SIMPLE_LOADALLRESET286 }.to },
			DecoderOptions::LOADALL286,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_42: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_5 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV3_LSL_R16_RM16: OpCodeHandler_Gv_Ev3 = OpCodeHandler_Gv_Ev3 {
	decode: OpCodeHandler_Gv_Ev3::decode,
	has_modrm: true,
	code16: Code::Lsl_r16_rm16 as u32,
	code32: Code::Lsl_r32_r32m16 as u32,
	code64: Code::Lsl_r64_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV3_LAR_R16_RM16: OpCodeHandler_Gv_Ev3 = OpCodeHandler_Gv_Ev3 {
	decode: OpCodeHandler_Gv_Ev3::decode,
	has_modrm: true,
	code16: Code::Lar_r16_rm16 as u32,
	code32: Code::Lar_r32_r32m16 as u32,
	code64: Code::Lar_r64_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_7: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_GRP_0_F01_LO,
	table_high: &HANDLERS_GRP_0_F01_HI,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_15: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_0_F00,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_CMP_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Cmp_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_XOR_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Xor_rm8_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_SUB_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Sub_rm8_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_AND_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::And_rm8_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_SBB_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Sbb_rm8_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_ADC_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Adc_rm8_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_OR_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Or_rm8_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_ADD_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Add_rm8_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_3_CMP_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Cmp_rm16_imm16 as u32,
	code32: Code::Cmp_rm32_imm32 as u32,
	code64: Code::Cmp_rm64_imm32 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_XOR_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Xor_rm16_imm16 as u32,
	code32: Code::Xor_rm32_imm32 as u32,
	code64: Code::Xor_rm64_imm32 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_SUB_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Sub_rm16_imm16 as u32,
	code32: Code::Sub_rm32_imm32 as u32,
	code64: Code::Sub_rm64_imm32 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_AND_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::And_rm16_imm16 as u32,
	code32: Code::And_rm32_imm32 as u32,
	code64: Code::And_rm64_imm32 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_SBB_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Sbb_rm16_imm16 as u32,
	code32: Code::Sbb_rm32_imm32 as u32,
	code64: Code::Sbb_rm64_imm32 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_ADC_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Adc_rm16_imm16 as u32,
	code32: Code::Adc_rm32_imm32 as u32,
	code64: Code::Adc_rm64_imm32 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_OR_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Or_rm16_imm16 as u32,
	code32: Code::Or_rm32_imm32 as u32,
	code64: Code::Or_rm64_imm32 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_ADD_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Add_rm16_imm16 as u32,
	code32: Code::Add_rm32_imm32 as u32,
	code64: Code::Add_rm64_imm32 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_CMP_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Cmp_rm8_imm8_82 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_XOR_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Xor_rm8_imm8_82 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_SUB_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Sub_rm8_imm8_82 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_AND_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::And_rm8_imm8_82 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_SBB_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Sbb_rm8_imm8_82 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_ADC_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Adc_rm8_imm8_82 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_OR_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Or_rm8_imm8_82 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_ADD_RM8_IMM8_82: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Add_rm8_imm8_82 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_3_CMP_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Cmp_rm16_imm8 as u32,
	code32: Code::Cmp_rm32_imm8 as u32,
	code64: Code::Cmp_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_4_XOR_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Xor_rm16_imm8 as u32,
	code32: Code::Xor_rm32_imm8 as u32,
	code64: Code::Xor_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_4_SUB_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Sub_rm16_imm8 as u32,
	code32: Code::Sub_rm32_imm8 as u32,
	code64: Code::Sub_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_4_AND_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::And_rm16_imm8 as u32,
	code32: Code::And_rm32_imm8 as u32,
	code64: Code::And_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_4_SBB_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Sbb_rm16_imm8 as u32,
	code32: Code::Sbb_rm32_imm8 as u32,
	code64: Code::Sbb_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_4_ADC_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Adc_rm16_imm8 as u32,
	code32: Code::Adc_rm32_imm8 as u32,
	code64: Code::Adc_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_4_OR_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Or_rm16_imm8 as u32,
	code32: Code::Or_rm32_imm8 as u32,
	code64: Code::Or_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB_4_ADD_RM16_IMM8: OpCodeHandler_Ev_Ib = OpCodeHandler_Ev_Ib {
	decode: OpCodeHandler_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Add_rm16_imm8 as u32,
	code32: Code::Add_rm32_imm8 as u32,
	code64: Code::Add_rm64_imm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_EV_POP_RM16: OpCodeHandler_PushEv = OpCodeHandler_PushEv {
	decode: OpCodeHandler_PushEv::decode,
	has_modrm: true,
	code16: Code::Pop_rm16 as u32,
	code32: Code::Pop_rm32 as u32,
	code64: Code::Pop_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_SAR_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Sar_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_SAL_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Sal_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_SHR_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Shr_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_SHL_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Shl_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_RCR_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Rcr_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_RCL_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Rcl_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_ROR_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Ror_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_ROL_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Rol_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_SAR_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Sar_rm16_imm8 as u32,
	code32: Code::Sar_rm32_imm8 as u32,
	code64: Code::Sar_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_SAL_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Sal_rm16_imm8 as u32,
	code32: Code::Sal_rm32_imm8 as u32,
	code64: Code::Sal_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_SHR_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Shr_rm16_imm8 as u32,
	code32: Code::Shr_rm32_imm8 as u32,
	code64: Code::Shr_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_SHL_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Shl_rm16_imm8 as u32,
	code32: Code::Shl_rm32_imm8 as u32,
	code64: Code::Shl_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_RCR_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Rcr_rm16_imm8 as u32,
	code32: Code::Rcr_rm32_imm8 as u32,
	code64: Code::Rcr_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_RCL_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Rcl_rm16_imm8 as u32,
	code32: Code::Rcl_rm32_imm8 as u32,
	code64: Code::Rcl_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_ROR_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Ror_rm16_imm8 as u32,
	code32: Code::Ror_rm32_imm8 as u32,
	code64: Code::Ror_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IB2_3_ROL_RM16_IMM8: OpCodeHandler_Ev_Ib2 = OpCodeHandler_Ev_Ib2 {
	decode: OpCodeHandler_Ev_Ib2::decode,
	has_modrm: true,
	code16: Code::Rol_rm16_imm8 as u32,
	code32: Code::Rol_rm32_imm8 as u32,
	code64: Code::Rol_rm64_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_2_MOV_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Mov_rm8_imm8 as u32,
	flags: HandlerFlags::XRELEASE | HandlerFlags::XACQUIRE_XRELEASE_NO_LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_IB3_XABORT_IMM8: OpCodeHandler_Ib3 = OpCodeHandler_Ib3 {
	decode: OpCodeHandler_Ib3::decode,
	has_modrm: true,
	code: Code::Xabort_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_4_MOV_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Mov_rm16_imm16 as u32,
	code32: Code::Mov_rm32_imm32 as u32,
	code64: Code::Mov_rm64_imm32 as u32,
	flags: HandlerFlags::XRELEASE | HandlerFlags::XACQUIRE_XRELEASE_NO_LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JX_XBEGIN_REL16: OpCodeHandler_Jx = OpCodeHandler_Jx {
	decode: OpCodeHandler_Jx::decode,
	has_modrm: false,
	code16: Code::Xbegin_rel16 as u32,
	code32: Code::Xbegin_rel32 as u32,
	code64: Code::Xbegin_rel32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_SAR_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Sar_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_SAL_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Sal_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_SHR_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Shr_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_SHL_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Shl_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_RCR_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Rcr_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_RCL_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Rcl_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_ROR_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Ror_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB1_ROL_RM8_1: OpCodeHandler_Eb_1 = OpCodeHandler_Eb_1 {
	decode: OpCodeHandler_Eb_1::decode,
	has_modrm: true,
	code: Code::Rol_rm8_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_SAR_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Sar_rm16_1 as u32,
	code32: Code::Sar_rm32_1 as u32,
	code64: Code::Sar_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_SAL_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Sal_rm16_1 as u32,
	code32: Code::Sal_rm32_1 as u32,
	code64: Code::Sal_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_SHR_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Shr_rm16_1 as u32,
	code32: Code::Shr_rm32_1 as u32,
	code64: Code::Shr_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_SHL_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Shl_rm16_1 as u32,
	code32: Code::Shl_rm32_1 as u32,
	code64: Code::Shl_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_RCR_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Rcr_rm16_1 as u32,
	code32: Code::Rcr_rm32_1 as u32,
	code64: Code::Rcr_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_RCL_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Rcl_rm16_1 as u32,
	code32: Code::Rcl_rm32_1 as u32,
	code64: Code::Rcl_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_ROR_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Ror_rm16_1 as u32,
	code32: Code::Ror_rm32_1 as u32,
	code64: Code::Ror_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV1_ROL_RM16_1: OpCodeHandler_Ev_1 = OpCodeHandler_Ev_1 {
	decode: OpCodeHandler_Ev_1::decode,
	has_modrm: true,
	code16: Code::Rol_rm16_1 as u32,
	code32: Code::Rol_rm32_1 as u32,
	code64: Code::Rol_rm64_1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_SAR_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Sar_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_SAL_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Sal_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_SHR_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Shr_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_SHL_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Shl_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_RCR_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Rcr_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_RCL_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Rcl_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_ROR_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Ror_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_CL_ROL_RM8_CL: OpCodeHandler_Eb_CL = OpCodeHandler_Eb_CL {
	decode: OpCodeHandler_Eb_CL::decode,
	has_modrm: true,
	code: Code::Rol_rm8_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_SAR_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Sar_rm16_CL as u32,
	code32: Code::Sar_rm32_CL as u32,
	code64: Code::Sar_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_SAL_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Sal_rm16_CL as u32,
	code32: Code::Sal_rm32_CL as u32,
	code64: Code::Sal_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_SHR_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Shr_rm16_CL as u32,
	code32: Code::Shr_rm32_CL as u32,
	code64: Code::Shr_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_SHL_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Shl_rm16_CL as u32,
	code32: Code::Shl_rm32_CL as u32,
	code64: Code::Shl_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_RCR_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Rcr_rm16_CL as u32,
	code32: Code::Rcr_rm32_CL as u32,
	code64: Code::Rcr_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_RCL_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Rcl_rm16_CL as u32,
	code32: Code::Rcl_rm32_CL as u32,
	code64: Code::Rcl_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_ROR_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Ror_rm16_CL as u32,
	code32: Code::Ror_rm32_CL as u32,
	code64: Code::Ror_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_CL_ROL_RM16_CL: OpCodeHandler_Ev_CL = OpCodeHandler_Ev_CL {
	decode: OpCodeHandler_Ev_CL::decode,
	has_modrm: true,
	code16: Code::Rol_rm16_CL as u32,
	code32: Code::Rol_rm32_CL as u32,
	code64: Code::Rol_rm64_CL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FDIVR_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fdivr_m32fp as u32,
	code32: Code::Fdivr_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FDIV_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fdiv_m32fp as u32,
	code32: Code::Fdiv_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FSUBR_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fsubr_m32fp as u32,
	code32: Code::Fsubr_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FSUB_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fsub_m32fp as u32,
	code32: Code::Fsub_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FCOMP_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fcomp_m32fp as u32,
	code32: Code::Fcomp_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FCOM_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fcom_m32fp as u32,
	code32: Code::Fcom_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FMUL_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fmul_m32fp as u32,
	code32: Code::Fmul_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FADD_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fadd_m32fp as u32,
	code32: Code::Fadd_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FDIVR_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fdivr_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FDIV_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fdiv_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FSUBR_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fsubr_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FSUB_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fsub_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCOMP_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcomp_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCOM_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcom_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FMUL_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fmul_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FADD_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fadd_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FNSTCW_M2_BYTE: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fnstcw_m2byte as u32,
	code32: Code::Fnstcw_m2byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_2_B_FNSTENV_M14_BYTE: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fnstenv_m14byte as u32,
	code32: Code::Fnstenv_m28byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FLDCW_M2_BYTE: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fldcw_m2byte as u32,
	code32: Code::Fldcw_m2byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_2_A_FLDENV_M14_BYTE: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fldenv_m14byte as u32,
	code32: Code::Fldenv_m28byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FSTP_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fstp_m32fp as u32,
	code32: Code::Fstp_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FST_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fst_m32fp as u32,
	code32: Code::Fst_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FLD_M32_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fld_m32fp as u32,
	code32: Code::Fld_m32fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FCOS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fcos as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FSIN: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fsin as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FSCALE: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fscale as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FRNDINT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Frndint as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FSINCOS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fsincos as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FSQRT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fsqrt as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FYL2_XP1: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fyl2xp1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FPREM: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fprem as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FINCSTP: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fincstp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FDECSTP: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fdecstp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FPREM1: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fprem1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FXTRACT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fxtract as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FPATAN: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fpatan as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FPTAN: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fptan as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FYL2_X: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fyl2x as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_F2_XM1: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::F2xm1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FLDZ: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fldz as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FLDLN2: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fldln2 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FLDLG2: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fldlg2 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FLDPI: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fldpi as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FLDL2_E: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fldl2e as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FLDL2_T: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fldl2t as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FLD1: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fld1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FXAM: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fxam as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FTST: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Ftst as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FABS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fabs as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FCHS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fchs as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_FSTPNCE_STI: OpCodeHandler_STi = OpCodeHandler_STi {
	decode: OpCodeHandler_STi::decode,
	has_modrm: true,
	code: Code::Fstpnce_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FNOP: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fnop as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FXCH_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fxch_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FLD_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fld_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIDIVR_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fidivr_m32int as u32,
	code32: Code::Fidivr_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIDIV_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fidiv_m32int as u32,
	code32: Code::Fidiv_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISUBR_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fisubr_m32int as u32,
	code32: Code::Fisubr_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISUB_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fisub_m32int as u32,
	code32: Code::Fisub_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FICOMP_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Ficomp_m32int as u32,
	code32: Code::Ficomp_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FICOM_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Ficom_m32int as u32,
	code32: Code::Ficom_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIMUL_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fimul_m32int as u32,
	code32: Code::Fimul_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIADD_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fiadd_m32int as u32,
	code32: Code::Fiadd_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FUCOMPP: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fucompp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVU_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmovu_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVBE_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmovbe_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVE_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmove_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVB_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmovb_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FSTP_M80_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fstp_m80fp as u32,
	code32: Code::Fstp_m80fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FLD_M80_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fld_m80fp as u32,
	code32: Code::Fld_m80fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISTP_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fistp_m32int as u32,
	code32: Code::Fistp_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIST_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fist_m32int as u32,
	code32: Code::Fist_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISTTP_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fisttp_m32int as u32,
	code32: Code::Fisttp_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FILD_M32_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fild_m32int as u32,
	code32: Code::Fild_m32int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCOMI_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcomi_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FUCOMI_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fucomi_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FRSTPM: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Frstpm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_4: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FRSTPM }.to },
			DecoderOptions::OLD_FPU,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_41: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_4 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FNSETPM: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fnsetpm as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FNINIT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fninit as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FNCLEX: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fnclex as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FNDISI: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fndisi as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FNENI: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fneni as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVNU_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmovnu_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVNBE_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmovnbe_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVNE_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmovne_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCMOVNB_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcmovnb_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FDIVR_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fdivr_m64fp as u32,
	code32: Code::Fdivr_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FDIV_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fdiv_m64fp as u32,
	code32: Code::Fdiv_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FSUBR_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fsubr_m64fp as u32,
	code32: Code::Fsubr_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FSUB_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fsub_m64fp as u32,
	code32: Code::Fsub_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FCOMP_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fcomp_m64fp as u32,
	code32: Code::Fcomp_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FCOM_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fcom_m64fp as u32,
	code32: Code::Fcom_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FMUL_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fmul_m64fp as u32,
	code32: Code::Fmul_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FADD_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fadd_m64fp as u32,
	code32: Code::Fadd_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FDIV_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fdiv_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FDIVR_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fdivr_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FSUB_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fsub_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FSUBR_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fsubr_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCOMP_ST0_STI_DCD8: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcomp_st0_sti_DCD8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCOM_ST0_STI_DCD0: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcom_st0_sti_DCD0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FMUL_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fmul_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FADD_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fadd_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FNSTSW_M2_BYTE: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fnstsw_m2byte as u32,
	code32: Code::Fnstsw_m2byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_2_B_FNSAVE_M94_BYTE: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fnsave_m94byte as u32,
	code32: Code::Fnsave_m108byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_2_A_FRSTOR_M94_BYTE: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Frstor_m94byte as u32,
	code32: Code::Frstor_m108byte as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FSTP_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fstp_m64fp as u32,
	code32: Code::Fstp_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FST_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fst_m64fp as u32,
	code32: Code::Fst_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISTTP_M64_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fisttp_m64int as u32,
	code32: Code::Fisttp_m64int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FLD_M64_FP: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fld_m64fp as u32,
	code32: Code::Fld_m64fp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FUCOMP_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fucomp_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FUCOM_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fucom_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_FSTP_STI: OpCodeHandler_STi = OpCodeHandler_STi {
	decode: OpCodeHandler_STi::decode,
	has_modrm: true,
	code: Code::Fstp_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_FST_STI: OpCodeHandler_STi = OpCodeHandler_STi {
	decode: OpCodeHandler_STi::decode,
	has_modrm: true,
	code: Code::Fst_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FXCH_ST0_STI_DDC8: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fxch_st0_sti_DDC8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_FFREE_STI: OpCodeHandler_STi = OpCodeHandler_STi {
	decode: OpCodeHandler_STi::decode,
	has_modrm: true,
	code: Code::Ffree_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIDIVR_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fidivr_m16int as u32,
	code32: Code::Fidivr_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIDIV_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fidiv_m16int as u32,
	code32: Code::Fidiv_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISUBR_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fisubr_m16int as u32,
	code32: Code::Fisubr_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISUB_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fisub_m16int as u32,
	code32: Code::Fisub_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FICOMP_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Ficomp_m16int as u32,
	code32: Code::Ficomp_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FICOM_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Ficom_m16int as u32,
	code32: Code::Ficom_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIMUL_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fimul_m16int as u32,
	code32: Code::Fimul_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIADD_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fiadd_m16int as u32,
	code32: Code::Fiadd_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FDIVP_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fdivp_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FDIVRP_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fdivrp_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FSUBP_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fsubp_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FSUBRP_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fsubrp_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_FCOMPP: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Fcompp as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCOMP_ST0_STI_DED0: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcomp_st0_sti_DED0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FMULP_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Fmulp_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_ST_FADDP_STI_ST0: OpCodeHandler_STi_ST = OpCodeHandler_STi_ST {
	decode: OpCodeHandler_STi_ST::decode,
	has_modrm: true,
	code: Code::Faddp_sti_st0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISTP_M64_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fistp_m64int as u32,
	code32: Code::Fistp_m64int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FBSTP_M80_BCD: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fbstp_m80bcd as u32,
	code32: Code::Fbstp_m80bcd as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FILD_M64_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fild_m64int as u32,
	code32: Code::Fild_m64int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FBLD_M80_BCD: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fbld_m80bcd as u32,
	code32: Code::Fbld_m80bcd as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISTP_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fistp_m16int as u32,
	code32: Code::Fistp_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FIST_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fist_m16int as u32,
	code32: Code::Fist_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FISTTP_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fisttp_m16int as u32,
	code32: Code::Fisttp_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MF_1_FILD_M16_INT: OpCodeHandler_Mf = OpCodeHandler_Mf {
	decode: OpCodeHandler_Mf::decode,
	has_modrm: true,
	code16: Code::Fild_m16int as u32,
	code32: Code::Fild_m16int as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FCOMIP_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fcomip_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FUCOMIP_ST0_STI: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fucomip_st0_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_FSTSG_AX: OpCodeHandler_Reg = OpCodeHandler_Reg {
	decode: OpCodeHandler_Reg::decode,
	has_modrm: false,
	code: Code::Fstsg_AX as u32,
	reg: Register::AX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_3: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_REG_FSTSG_AX }.to },
			DecoderOptions::OLD_FPU,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_40: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_3 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_FSTDW_AX: OpCodeHandler_Reg = OpCodeHandler_Reg {
	decode: OpCodeHandler_Reg::decode,
	has_modrm: false,
	code: Code::Fstdw_AX as u32,
	reg: Register::AX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_2: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_REG_FSTDW_AX }.to },
			DecoderOptions::OLD_FPU,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_39: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_2 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_FNSTSW_AX: OpCodeHandler_Reg = OpCodeHandler_Reg {
	decode: OpCodeHandler_Reg::decode,
	has_modrm: false,
	code: Code::Fnstsw_AX as u32,
	reg: Register::AX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_FSTP_STI_DFD8: OpCodeHandler_STi = OpCodeHandler_STi {
	decode: OpCodeHandler_STi::decode,
	has_modrm: true,
	code: Code::Fstp_sti_DFD8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_FSTP_STI_DFD0: OpCodeHandler_STi = OpCodeHandler_STi {
	decode: OpCodeHandler_STi::decode,
	has_modrm: true,
	code: Code::Fstp_sti_DFD0 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ST_STI_FXCH_ST0_STI_DFC8: OpCodeHandler_ST_STi = OpCodeHandler_ST_STi {
	decode: OpCodeHandler_ST_STi::decode,
	has_modrm: true,
	code: Code::Fxch_st0_sti_DFC8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_STI_FFREEP_STI: OpCodeHandler_STi = OpCodeHandler_STi {
	decode: OpCodeHandler_STi::decode,
	has_modrm: true,
	code: Code::Ffreep_sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_IDIV_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Idiv_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_DIV_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Div_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_IMUL_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Imul_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_1_MUL_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Mul_rm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_2_NEG_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Neg_rm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_2_NOT_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Not_rm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_TEST_RM8_IMM8_F6_R1: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Test_rm8_imm8_F6r1 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_IB_1_TEST_RM8_IMM8: OpCodeHandler_Eb_Ib = OpCodeHandler_Eb_Ib {
	decode: OpCodeHandler_Eb_Ib::decode,
	has_modrm: true,
	code: Code::Test_rm8_imm8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_3_A_IDIV_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Idiv_rm16 as u32,
	code32: Code::Idiv_rm32 as u32,
	code64: Code::Idiv_rm64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_3_A_DIV_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Div_rm16 as u32,
	code32: Code::Div_rm32 as u32,
	code64: Code::Div_rm64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_3_A_IMUL_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Imul_rm16 as u32,
	code32: Code::Imul_rm32 as u32,
	code64: Code::Imul_rm64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_3_A_MUL_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Mul_rm16 as u32,
	code32: Code::Mul_rm32 as u32,
	code64: Code::Mul_rm64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_4_NEG_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Neg_rm16 as u32,
	code32: Code::Neg_rm32 as u32,
	code64: Code::Neg_rm64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_4_NOT_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Not_rm16 as u32,
	code32: Code::Not_rm32 as u32,
	code64: Code::Not_rm64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_3_TEST_RM16_IMM16_F7_R1: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Test_rm16_imm16_F7r1 as u32,
	code32: Code::Test_rm32_imm32_F7r1 as u32,
	code64: Code::Test_rm64_imm32_F7r1 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_IZ_3_TEST_RM16_IMM16: OpCodeHandler_Ev_Iz = OpCodeHandler_Ev_Iz {
	decode: OpCodeHandler_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Test_rm16_imm16 as u32,
	code32: Code::Test_rm32_imm32 as u32,
	code64: Code::Test_rm64_imm32 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_2_DEC_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Dec_rm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_2_INC_RM8: OpCodeHandler_Eb = OpCodeHandler_Eb {
	decode: OpCodeHandler_Eb::decode,
	has_modrm: true,
	code: Code::Inc_rm8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_EV_PUSH_RM16: OpCodeHandler_PushEv = OpCodeHandler_PushEv {
	decode: OpCodeHandler_PushEv::decode,
	has_modrm: true,
	code16: Code::Push_rm16 as u32,
	code32: Code::Push_rm32 as u32,
	code64: Code::Push_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EP_JMP_M1616: OpCodeHandler_Ep = OpCodeHandler_Ep {
	decode: OpCodeHandler_Ep::decode,
	has_modrm: true,
	code16: Code::Jmp_m1616 as u32,
	code32: Code::Jmp_m1632 as u32,
	code64: Code::Jmp_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EVJ_JMP_RM16: OpCodeHandler_Evj = OpCodeHandler_Evj {
	decode: OpCodeHandler_Evj::decode,
	has_modrm: true,
	code16: Code::Jmp_rm16 as u32,
	code32: Code::Jmp_rm32 as u32,
	code64: Code::Jmp_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EP_CALL_M1616: OpCodeHandler_Ep = OpCodeHandler_Ep {
	decode: OpCodeHandler_Ep::decode,
	has_modrm: true,
	code16: Code::Call_m1616 as u32,
	code32: Code::Call_m1632 as u32,
	code64: Code::Call_m1664 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EVJ_CALL_RM16: OpCodeHandler_Evj = OpCodeHandler_Evj {
	decode: OpCodeHandler_Evj::decode,
	has_modrm: true,
	code16: Code::Call_rm16 as u32,
	code32: Code::Call_rm32 as u32,
	code64: Code::Call_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_4_DEC_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Dec_rm16 as u32,
	code32: Code::Dec_rm32 as u32,
	code64: Code::Dec_rm64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_4_INC_RM16: OpCodeHandler_Ev = OpCodeHandler_Ev {
	decode: OpCodeHandler_Ev::decode,
	has_modrm: true,
	code16: Code::Inc_rm16 as u32,
	code32: Code::Inc_rm32 as u32,
	code64: Code::Inc_rm64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_14: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_FF,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_13: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_FE,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_STD: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Std as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CLD: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Cld as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_STI: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Sti as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CLI: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Cli as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_STC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Stc as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CLC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Clc as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_12: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_F7,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_11: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_F6,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_CMC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Cmc as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_HLT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Hlt as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_INT1: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Int1 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DX_E_AX_OUT_DX_AX: OpCodeHandler_DX_eAX = OpCodeHandler_DX_eAX {
	decode: OpCodeHandler_DX_eAX::decode,
	has_modrm: false,
	code16: Code::Out_DX_AX as u32,
	code32: Code::Out_DX_EAX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DX_AL_OUT_DX_AL: OpCodeHandler_DX_AL = OpCodeHandler_DX_AL {
	decode: OpCodeHandler_DX_AL::decode,
	has_modrm: false,
	code: Code::Out_DX_AL as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_E_AX_DX_IN_AX_DX: OpCodeHandler_eAX_DX = OpCodeHandler_eAX_DX {
	decode: OpCodeHandler_eAX_DX::decode,
	has_modrm: false,
	code16: Code::In_AX_DX as u32,
	code32: Code::In_EAX_DX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_AL_DX_IN_AL_DX: OpCodeHandler_AL_DX = OpCodeHandler_AL_DX {
	decode: OpCodeHandler_AL_DX::decode,
	has_modrm: false,
	code: Code::In_AL_DX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JMP_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jmp_rel8_16 as u32,
	code32: Code::Jmp_rel8_32 as u32,
	code64: Code::Jmp_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_AP_JMP_PTR1616: OpCodeHandler_Ap = OpCodeHandler_Ap {
	decode: OpCodeHandler_Ap::decode,
	has_modrm: false,
	code16: Code::Jmp_ptr1616 as u32,
	code32: Code::Jmp_ptr1632 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_38: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_AP_JMP_PTR1616 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_JMP_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Jmp_rel16 as u32,
	code32: Code::Jmp_rel32_32 as u32,
	code64: Code::Jmp_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JZ_CALL_REL16: OpCodeHandler_Jz = OpCodeHandler_Jz {
	decode: OpCodeHandler_Jz::decode,
	has_modrm: false,
	code16: Code::Call_rel16 as u32,
	code32: Code::Call_rel32_32 as u32,
	code64: Code::Call_rel32_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_IB_REG2_OUT_IMM8_AX: OpCodeHandler_IbReg2 = OpCodeHandler_IbReg2 {
	decode: OpCodeHandler_IbReg2::decode,
	has_modrm: false,
	code16: Code::Out_imm8_AX as u32,
	code32: Code::Out_imm8_EAX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_IB_REG_OUT_IMM8_AL: OpCodeHandler_IbReg = OpCodeHandler_IbReg {
	decode: OpCodeHandler_IbReg::decode,
	has_modrm: false,
	code: Code::Out_imm8_AL as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB2_IN_AX_IMM8: OpCodeHandler_Reg_Ib2 = OpCodeHandler_Reg_Ib2 {
	decode: OpCodeHandler_Reg_Ib2::decode,
	has_modrm: false,
	code16: Code::In_AX_imm8 as u32,
	code32: Code::In_EAX_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_IN_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::In_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB2_JCXZ_REL8_16: OpCodeHandler_Jb2 = OpCodeHandler_Jb2 {
	decode: OpCodeHandler_Jb2::decode,
	has_modrm: false,
	code16_16: Code::Jcxz_rel8_16 as u32,
	code16_32: Code::Jecxz_rel8_16 as u32,
	code16_64: Code::Jrcxz_rel8_16 as u32,
	code32_16: Code::Jcxz_rel8_32 as u32,
	code32_32: Code::Jecxz_rel8_32 as u32,
	code64_32: Code::Jecxz_rel8_64 as u32,
	code64_64: Code::Jrcxz_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB2_LOOP_REL8_16_CX: OpCodeHandler_Jb2 = OpCodeHandler_Jb2 {
	decode: OpCodeHandler_Jb2::decode,
	has_modrm: false,
	code16_16: Code::Loop_rel8_16_CX as u32,
	code16_32: Code::Loop_rel8_16_ECX as u32,
	code16_64: Code::Loop_rel8_16_RCX as u32,
	code32_16: Code::Loop_rel8_32_CX as u32,
	code32_32: Code::Loop_rel8_32_ECX as u32,
	code64_32: Code::Loop_rel8_64_ECX as u32,
	code64_64: Code::Loop_rel8_64_RCX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB2_LOOPE_REL8_16_CX: OpCodeHandler_Jb2 = OpCodeHandler_Jb2 {
	decode: OpCodeHandler_Jb2::decode,
	has_modrm: false,
	code16_16: Code::Loope_rel8_16_CX as u32,
	code16_32: Code::Loope_rel8_16_ECX as u32,
	code16_64: Code::Loope_rel8_16_RCX as u32,
	code32_16: Code::Loope_rel8_32_CX as u32,
	code32_32: Code::Loope_rel8_32_ECX as u32,
	code64_32: Code::Loope_rel8_64_ECX as u32,
	code64_64: Code::Loope_rel8_64_RCX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB2_LOOPNE_REL8_16_CX: OpCodeHandler_Jb2 = OpCodeHandler_Jb2 {
	decode: OpCodeHandler_Jb2::decode,
	has_modrm: false,
	code16_16: Code::Loopne_rel8_16_CX as u32,
	code16_32: Code::Loopne_rel8_16_ECX as u32,
	code16_64: Code::Loopne_rel8_16_RCX as u32,
	code32_16: Code::Loopne_rel8_32_CX as u32,
	code32_32: Code::Loopne_rel8_32_ECX as u32,
	code64_32: Code::Loopne_rel8_64_ECX as u32,
	code64_64: Code::Loopne_rel8_64_RCX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_6: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_DF_LOW,
	table_high: &HANDLERS_FPU_DF_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_5: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_DE_LOW,
	table_high: &HANDLERS_FPU_DE_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X8_2: OpCodeHandler_Group8x8 = OpCodeHandler_Group8x8 {
	decode: OpCodeHandler_Group8x8::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_DD_LOW,
	table_high: &HANDLERS_FPU_DD_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X8_1: OpCodeHandler_Group8x8 = OpCodeHandler_Group8x8 {
	decode: OpCodeHandler_Group8x8::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_DC_LOW,
	table_high: &HANDLERS_FPU_DC_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_4: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_DB_LOW,
	table_high: &HANDLERS_FPU_DB_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_3: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_DA_LOW,
	table_high: &HANDLERS_FPU_DA_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_2: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_D9_LOW,
	table_high: &HANDLERS_FPU_D9_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X8: OpCodeHandler_Group8x8 = OpCodeHandler_Group8x8 {
	decode: OpCodeHandler_Group8x8::decode,
	has_modrm: true,
	table_low: &HANDLERS_FPU_D8_LOW,
	table_high: &HANDLERS_FPU_D8_HIGH,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_MEM_BX_XLAT_M8: OpCodeHandler_MemBx = OpCodeHandler_MemBx {
	decode: OpCodeHandler_MemBx::decode,
	has_modrm: false,
	code: Code::Xlat_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_SALC: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Salc as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_37: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SALC }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_IB_AAD_IMM8: OpCodeHandler_Ib = OpCodeHandler_Ib {
	decode: OpCodeHandler_Ib::decode,
	has_modrm: false,
	code: Code::Aad_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_36: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_IB_AAD_IMM8 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_IB_AAM_IMM8: OpCodeHandler_Ib = OpCodeHandler_Ib {
	decode: OpCodeHandler_Ib::decode,
	has_modrm: false,
	code: Code::Aam_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_35: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_IB_AAM_IMM8 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_10: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_D3,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_9: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_D2,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_8: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_D1,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_7: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_D0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_3_A_IRETW: OpCodeHandler_Simple2 = OpCodeHandler_Simple2 {
	decode: OpCodeHandler_Simple2::decode,
	has_modrm: false,
	code16: Code::Iretw as u32,
	code32: Code::Iretd as u32,
	code64: Code::Iretq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_INTO: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Into as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_34: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_INTO }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_IB_INT_IMM8: OpCodeHandler_Ib = OpCodeHandler_Ib {
	decode: OpCodeHandler_Ib::decode,
	has_modrm: false,
	code: Code::Int_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_INT3: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Int3 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_3_A_RETFW: OpCodeHandler_Simple2 = OpCodeHandler_Simple2 {
	decode: OpCodeHandler_Simple2::decode,
	has_modrm: false,
	code16: Code::Retfw as u32,
	code32: Code::Retfd as u32,
	code64: Code::Retfq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_IW_RETFW_IMM16: OpCodeHandler_Simple2Iw = OpCodeHandler_Simple2Iw {
	decode: OpCodeHandler_Simple2Iw::decode,
	has_modrm: false,
	code16: Code::Retfw_imm16 as u32,
	code32: Code::Retfd_imm16 as u32,
	code64: Code::Retfq_imm16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE3_LEAVEW: OpCodeHandler_Simple3 = OpCodeHandler_Simple3 {
	decode: OpCodeHandler_Simple3::decode,
	has_modrm: false,
	code16: Code::Leavew as u32,
	code32: Code::Leaved as u32,
	code64: Code::Leaveq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_IW_IB_ENTERW_IMM16_IMM8: OpCodeHandler_Iw_Ib = OpCodeHandler_Iw_Ib {
	decode: OpCodeHandler_Iw_Ib::decode,
	has_modrm: false,
	code16: Code::Enterw_imm16_imm8 as u32,
	code32: Code::Enterd_imm16_imm8 as u32,
	code64: Code::Enterq_imm16_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64_1: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_GRP_C7_LO,
	table_high: &HANDLERS_GRP_C7_HI,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP8_X64: OpCodeHandler_Group8x64 = OpCodeHandler_Group8x64 {
	decode: OpCodeHandler_Group8x64::decode,
	has_modrm: true,
	table_low: &HANDLERS_GRP_C6_LO,
	table_high: &HANDLERS_GRP_C6_HI,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_MP_2_LDS_R16_M1616: OpCodeHandler_Gv_Mp = OpCodeHandler_Gv_Mp {
	decode: OpCodeHandler_Gv_Mp::decode,
	has_modrm: true,
	code16: Code::Lds_r16_m1616 as u32,
	code32: Code::Lds_r32_m1632 as u32,
	code64: Code::INVALID as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VEX2: OpCodeHandler_VEX2 = OpCodeHandler_VEX2 {
	decode: OpCodeHandler_VEX2::decode,
	has_modrm: true,
	handler_mem: unsafe { HandlerTransmuter { from: &GEN_GV_MP_2_LDS_R16_M1616 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_MP_2_LES_R16_M1616: OpCodeHandler_Gv_Mp = OpCodeHandler_Gv_Mp {
	decode: OpCodeHandler_Gv_Mp::decode,
	has_modrm: true,
	code16: Code::Les_r16_m1616 as u32,
	code32: Code::Les_r32_m1632 as u32,
	code64: Code::INVALID as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_VEX3: OpCodeHandler_VEX3 = OpCodeHandler_VEX3 {
	decode: OpCodeHandler_VEX3::decode,
	has_modrm: true,
	handler_mem: unsafe { HandlerTransmuter { from: &GEN_GV_MP_2_LES_R16_M1616 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BRANCH_SIMPLE_RETNW: OpCodeHandler_BranchSimple = OpCodeHandler_BranchSimple {
	decode: OpCodeHandler_BranchSimple::decode,
	has_modrm: false,
	code16: Code::Retnw as u32,
	code32: Code::Retnd as u32,
	code64: Code::Retnq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BRANCH_IW_RETNW_IMM16: OpCodeHandler_BranchIw = OpCodeHandler_BranchIw {
	decode: OpCodeHandler_BranchIw::decode,
	has_modrm: false,
	code16: Code::Retnw_imm16 as u32,
	code32: Code::Retnd_imm16 as u32,
	code64: Code::Retnq_imm16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_6: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_C1,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_5: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_C0,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2_7: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0007,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2_6: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0006,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2_5: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0005,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2_4: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0004,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2_3: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0003,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2_2: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0002,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2_1: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0001,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ2: OpCodeHandler_RegIz2 = OpCodeHandler_RegIz2 {
	decode: OpCodeHandler_RegIz2::decode,
	has_modrm: false,
	index: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3_7: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0007,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3_6: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0006,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3_5: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0005,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3_4: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0004,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3_3: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0003,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3_2: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0002,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3_1: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0001,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB3: OpCodeHandler_RegIb3 = OpCodeHandler_RegIb3 {
	decode: OpCodeHandler_RegIb3::decode,
	has_modrm: false,
	index: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_YV_SCASW_AX_M16: OpCodeHandler_Reg_Yv = OpCodeHandler_Reg_Yv {
	decode: OpCodeHandler_Reg_Yv::decode,
	has_modrm: false,
	code16: Code::Scasw_AX_m16 as u32,
	code32: Code::Scasd_EAX_m32 as u32,
	code64: Code::Scasq_RAX_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_YB_SCASB_AL_M8: OpCodeHandler_Reg_Yb = OpCodeHandler_Reg_Yb {
	decode: OpCodeHandler_Reg_Yb::decode,
	has_modrm: false,
	code: Code::Scasb_AL_m8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_XV_LODSW_AX_M16: OpCodeHandler_Reg_Xv = OpCodeHandler_Reg_Xv {
	decode: OpCodeHandler_Reg_Xv::decode,
	has_modrm: false,
	code16: Code::Lodsw_AX_m16 as u32,
	code32: Code::Lodsd_EAX_m32 as u32,
	code64: Code::Lodsq_RAX_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_XB_LODSB_AL_M8: OpCodeHandler_Reg_Xb = OpCodeHandler_Reg_Xb {
	decode: OpCodeHandler_Reg_Xb::decode,
	has_modrm: false,
	code: Code::Lodsb_AL_m8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_YV_REG_STOSW_M16_AX: OpCodeHandler_Yv_Reg = OpCodeHandler_Yv_Reg {
	decode: OpCodeHandler_Yv_Reg::decode,
	has_modrm: false,
	code16: Code::Stosw_m16_AX as u32,
	code32: Code::Stosd_m32_EAX as u32,
	code64: Code::Stosq_m64_RAX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_YB_REG_STOSB_M8_AL: OpCodeHandler_Yb_Reg = OpCodeHandler_Yb_Reg {
	decode: OpCodeHandler_Yb_Reg::decode,
	has_modrm: false,
	code: Code::Stosb_m8_AL as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_TEST_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Test_AX_imm16 as u32,
	code32: Code::Test_EAX_imm32 as u32,
	code64: Code::Test_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_TEST_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Test_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XV_YV_CMPSW_M16_M16: OpCodeHandler_Xv_Yv = OpCodeHandler_Xv_Yv {
	decode: OpCodeHandler_Xv_Yv::decode,
	has_modrm: false,
	code16: Code::Cmpsw_m16_m16 as u32,
	code32: Code::Cmpsd_m32_m32 as u32,
	code64: Code::Cmpsq_m64_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XB_YB_CMPSB_M8_M8: OpCodeHandler_Xb_Yb = OpCodeHandler_Xb_Yb {
	decode: OpCodeHandler_Xb_Yb::decode,
	has_modrm: false,
	code: Code::Cmpsb_m8_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_YV_XV_MOVSW_M16_M16: OpCodeHandler_Yv_Xv = OpCodeHandler_Yv_Xv {
	decode: OpCodeHandler_Yv_Xv::decode,
	has_modrm: false,
	code16: Code::Movsw_m16_m16 as u32,
	code32: Code::Movsd_m32_m32 as u32,
	code64: Code::Movsq_m64_m64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_YB_XB_MOVSB_M8_M8: OpCodeHandler_Yb_Xb = OpCodeHandler_Yb_Xb {
	decode: OpCodeHandler_Yb_Xb::decode,
	has_modrm: false,
	code: Code::Movsb_m8_m8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OV_REG_MOV_MOFFS16_AX: OpCodeHandler_Ov_Reg = OpCodeHandler_Ov_Reg {
	decode: OpCodeHandler_Ov_Reg::decode,
	has_modrm: false,
	code16: Code::Mov_moffs16_AX as u32,
	code32: Code::Mov_moffs32_EAX as u32,
	code64: Code::Mov_moffs64_RAX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OB_REG_MOV_MOFFS8_AL: OpCodeHandler_Ob_Reg = OpCodeHandler_Ob_Reg {
	decode: OpCodeHandler_Ob_Reg::decode,
	has_modrm: false,
	code: Code::Mov_moffs8_AL as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_OV_MOV_AX_MOFFS16: OpCodeHandler_Reg_Ov = OpCodeHandler_Reg_Ov {
	decode: OpCodeHandler_Reg_Ov::decode,
	has_modrm: false,
	code16: Code::Mov_AX_moffs16 as u32,
	code32: Code::Mov_EAX_moffs32 as u32,
	code64: Code::Mov_RAX_moffs64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_OB_MOV_AL_MOFFS8: OpCodeHandler_Reg_Ob = OpCodeHandler_Reg_Ob {
	decode: OpCodeHandler_Reg_Ob::decode,
	has_modrm: false,
	code: Code::Mov_AL_moffs8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3_1: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_LAHF }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			DecoderOptions::NO_LAHF_SAHF_64,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_LAHF: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Lahf as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_33: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_LAHF }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_1 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_OPTIONS3: OpCodeHandler_Options = OpCodeHandler_Options {
	decode: OpCodeHandler_Options::decode,
	has_modrm: false,
	default_handler: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SAHF }.to },
	infos: [
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			DecoderOptions::NO_LAHF_SAHF_64,
		),
		(
			unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
			0x0000_0000,
		),
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_SAHF: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Sahf as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_32: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SAHF }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_OPTIONS3 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE2_POPFW: OpCodeHandler_PushSimple2 = OpCodeHandler_PushSimple2 {
	decode: OpCodeHandler_PushSimple2::decode,
	has_modrm: false,
	code16: Code::Popfw as u32,
	code32: Code::Popfd as u32,
	code64: Code::Popfq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE2_PUSHFW: OpCodeHandler_PushSimple2 = OpCodeHandler_PushSimple2 {
	decode: OpCodeHandler_PushSimple2::decode,
	has_modrm: false,
	code16: Code::Pushfw as u32,
	code32: Code::Pushfd as u32,
	code64: Code::Pushfq as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_WAIT: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Wait as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_AP_CALL_PTR1616: OpCodeHandler_Ap = OpCodeHandler_Ap {
	decode: OpCodeHandler_Ap::decode,
	has_modrm: false,
	code16: Code::Call_ptr1616 as u32,
	code32: Code::Call_ptr1632 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_31: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_AP_CALL_PTR1616 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_3_A_CWD: OpCodeHandler_Simple2 = OpCodeHandler_Simple2 {
	decode: OpCodeHandler_Simple2::decode,
	has_modrm: false,
	code16: Code::Cwd as u32,
	code32: Code::Cdq as u32,
	code64: Code::Cqo as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_3_A_CBW: OpCodeHandler_Simple2 = OpCodeHandler_Simple2 {
	decode: OpCodeHandler_Simple2::decode,
	has_modrm: false,
	code16: Code::Cbw as u32,
	code32: Code::Cwde as u32,
	code64: Code::Cdqe as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX_7: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0007,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX_6: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0006,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX_5: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0005,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX_4: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0004,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX_3: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0003,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX_2: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0002,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX_1: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0001,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XCHG_REG_R_AX: OpCodeHandler_Xchg_Reg_rAX = OpCodeHandler_Xchg_Reg_rAX {
	decode: OpCodeHandler_Xchg_Reg_rAX::decode,
	has_modrm: false,
	index: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_4: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_8_F,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_XOP: OpCodeHandler_XOP = OpCodeHandler_XOP {
	decode: OpCodeHandler_XOP::decode,
	has_modrm: true,
	handler_reg0: unsafe { HandlerTransmuter { from: &GEN_GROUP_4 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SW_EV_MOV_SREG_RM16: OpCodeHandler_Sw_Ev = OpCodeHandler_Sw_Ev {
	decode: OpCodeHandler_Sw_Ev::decode,
	has_modrm: true,
	code16: Code::Mov_Sreg_rm16 as u32,
	code32: Code::Mov_Sreg_r32m16 as u32,
	code64: Code::Mov_Sreg_r64m16 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_M_LEA_R16_M: OpCodeHandler_Gv_M = OpCodeHandler_Gv_M {
	decode: OpCodeHandler_Gv_M::decode,
	has_modrm: true,
	code16: Code::Lea_r16_m as u32,
	code32: Code::Lea_r32_m as u32,
	code64: Code::Lea_r64_m as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_SW_MOV_RM16_SREG: OpCodeHandler_Ev_Sw = OpCodeHandler_Ev_Sw {
	decode: OpCodeHandler_Ev_Sw::decode,
	has_modrm: true,
	code16: Code::Mov_rm16_Sreg as u32,
	code32: Code::Mov_r32m16_Sreg as u32,
	code64: Code::Mov_r64m16_Sreg as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_MOV_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Mov_r16_rm16 as u32,
	code32: Code::Mov_r32_rm32 as u32,
	code64: Code::Mov_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_MOV_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Mov_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_MOV_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Mov_rm16_r16 as u32,
	code32: Code::Mov_rm32_r32 as u32,
	code64: Code::Mov_rm64_r64 as u32,
	flags: HandlerFlags::XRELEASE | HandlerFlags::XACQUIRE_XRELEASE_NO_LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_MOV_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Mov_rm8_r8 as u32,
	flags: HandlerFlags::XRELEASE | HandlerFlags::XACQUIRE_XRELEASE_NO_LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_XCHG_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Xchg_rm16_r16 as u32,
	code32: Code::Xchg_rm32_r32 as u32,
	code64: Code::Xchg_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::XACQUIRE_XRELEASE_NO_LOCK | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_XCHG_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Xchg_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::XACQUIRE_XRELEASE_NO_LOCK | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_3_A_TEST_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Test_rm16_r16 as u32,
	code32: Code::Test_rm32_r32 as u32,
	code64: Code::Test_rm64_r64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_1_TEST_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Test_rm8_r8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_3: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_83,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_2: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_82,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_30: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_GROUP_2 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP_1: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_81,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GROUP: OpCodeHandler_Group = OpCodeHandler_Group {
	decode: OpCodeHandler_Group::decode,
	has_modrm: true,
	group_handlers: &HANDLERS_GRP_80,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JG_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jg_rel8_16 as u32,
	code32: Code::Jg_rel8_32 as u32,
	code64: Code::Jg_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JLE_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jle_rel8_16 as u32,
	code32: Code::Jle_rel8_32 as u32,
	code64: Code::Jle_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JGE_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jge_rel8_16 as u32,
	code32: Code::Jge_rel8_32 as u32,
	code64: Code::Jge_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JL_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jl_rel8_16 as u32,
	code32: Code::Jl_rel8_32 as u32,
	code64: Code::Jl_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JNP_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jnp_rel8_16 as u32,
	code32: Code::Jnp_rel8_32 as u32,
	code64: Code::Jnp_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JP_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jp_rel8_16 as u32,
	code32: Code::Jp_rel8_32 as u32,
	code64: Code::Jp_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JNS_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jns_rel8_16 as u32,
	code32: Code::Jns_rel8_32 as u32,
	code64: Code::Jns_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JS_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Js_rel8_16 as u32,
	code32: Code::Js_rel8_32 as u32,
	code64: Code::Js_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JA_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Ja_rel8_16 as u32,
	code32: Code::Ja_rel8_32 as u32,
	code64: Code::Ja_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JBE_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jbe_rel8_16 as u32,
	code32: Code::Jbe_rel8_32 as u32,
	code64: Code::Jbe_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JNE_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jne_rel8_16 as u32,
	code32: Code::Jne_rel8_32 as u32,
	code64: Code::Jne_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JE_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Je_rel8_16 as u32,
	code32: Code::Je_rel8_32 as u32,
	code64: Code::Je_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JAE_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jae_rel8_16 as u32,
	code32: Code::Jae_rel8_32 as u32,
	code64: Code::Jae_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JB_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jb_rel8_16 as u32,
	code32: Code::Jb_rel8_32 as u32,
	code64: Code::Jb_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JNO_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jno_rel8_16 as u32,
	code32: Code::Jno_rel8_32 as u32,
	code64: Code::Jno_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_JB_JO_REL8_16: OpCodeHandler_Jb = OpCodeHandler_Jb {
	decode: OpCodeHandler_Jb::decode,
	has_modrm: false,
	code16: Code::Jo_rel8_16 as u32,
	code32: Code::Jo_rel8_32 as u32,
	code64: Code::Jo_rel8_64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_XV2_OUTSW_DX_M16: OpCodeHandler_Reg_Xv2 = OpCodeHandler_Reg_Xv2 {
	decode: OpCodeHandler_Reg_Xv2::decode,
	has_modrm: false,
	code16: Code::Outsw_DX_m16 as u32,
	code32: Code::Outsd_DX_m32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_XB_OUTSB_DX_M8: OpCodeHandler_Reg_Xb = OpCodeHandler_Reg_Xb {
	decode: OpCodeHandler_Reg_Xb::decode,
	has_modrm: false,
	code: Code::Outsb_DX_m8 as u32,
	reg: Register::DX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_YV_REG2_INSW_M16_DX: OpCodeHandler_Yv_Reg2 = OpCodeHandler_Yv_Reg2 {
	decode: OpCodeHandler_Yv_Reg2::decode,
	has_modrm: false,
	code16: Code::Insw_m16_DX as u32,
	code32: Code::Insd_m32_DX as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_YB_REG_INSB_M8_DX: OpCodeHandler_Yb_Reg = OpCodeHandler_Yb_Reg {
	decode: OpCodeHandler_Yb_Reg::decode,
	has_modrm: false,
	code: Code::Insb_m8_DX as u32,
	reg: Register::DX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_IB_IMUL_R16_RM16_IMM8: OpCodeHandler_Gv_Ev_Ib = OpCodeHandler_Gv_Ev_Ib {
	decode: OpCodeHandler_Gv_Ev_Ib::decode,
	has_modrm: true,
	code16: Code::Imul_r16_rm16_imm8 as u32,
	code32: Code::Imul_r32_rm32_imm8 as u32,
	code64: Code::Imul_r64_rm64_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_IB2_PUSHW_IMM8: OpCodeHandler_PushIb2 = OpCodeHandler_PushIb2 {
	decode: OpCodeHandler_PushIb2::decode,
	has_modrm: false,
	code16: Code::Pushw_imm8 as u32,
	code32: Code::Pushd_imm8 as u32,
	code64: Code::Pushq_imm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_IZ_IMUL_R16_RM16_IMM16: OpCodeHandler_Gv_Ev_Iz = OpCodeHandler_Gv_Ev_Iz {
	decode: OpCodeHandler_Gv_Ev_Iz::decode,
	has_modrm: true,
	code16: Code::Imul_r16_rm16_imm16 as u32,
	code32: Code::Imul_r32_rm32_imm32 as u32,
	code64: Code::Imul_r64_rm64_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_IZ_PUSH_IMM16: OpCodeHandler_PushIz = OpCodeHandler_PushIz {
	decode: OpCodeHandler_PushIz::decode,
	has_modrm: false,
	code16: Code::Push_imm16 as u32,
	code32: Code::Pushd_imm32 as u32,
	code64: Code::Pushq_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV2_MOVSXD_R16_RM16: OpCodeHandler_Gv_Ev2 = OpCodeHandler_Gv_Ev2 {
	decode: OpCodeHandler_Gv_Ev2::decode,
	has_modrm: true,
	code16: Code::Movsxd_r16_rm16 as u32,
	code32: Code::Movsxd_r32_rm32 as u32,
	code64: Code::Movsxd_r64_rm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_RV_MW_GW_ARPL_RM16_R16: OpCodeHandler_RvMw_Gw = OpCodeHandler_RvMw_Gw {
	decode: OpCodeHandler_RvMw_Gw::decode,
	has_modrm: true,
	code16: Code::Arpl_rm16_r16 as u32,
	code32: Code::Arpl_r32m16_r32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_29: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_RV_MW_GW_ARPL_RM16_R16 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_GV_EV2_MOVSXD_R16_RM16 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_MA_BOUND_R16_M1616: OpCodeHandler_Gv_Ma = OpCodeHandler_Gv_Ma {
	decode: OpCodeHandler_Gv_Ma::decode,
	has_modrm: true,
	code16: Code::Bound_r16_m1616 as u32,
	code32: Code::Bound_r32_m3232 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EVEX: OpCodeHandler_EVEX = OpCodeHandler_EVEX {
	decode: OpCodeHandler_EVEX::decode,
	has_modrm: true,
	handler_mem: unsafe { HandlerTransmuter { from: &GEN_GV_MA_BOUND_R16_M1616 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_3_B_POPAW: OpCodeHandler_Simple2 = OpCodeHandler_Simple2 {
	decode: OpCodeHandler_Simple2::decode,
	has_modrm: false,
	code16: Code::Popaw as u32,
	code32: Code::Popad as u32,
	code64: Code::Popad as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_28: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_B_POPAW }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE2_3_B_PUSHAW: OpCodeHandler_Simple2 = OpCodeHandler_Simple2 {
	decode: OpCodeHandler_Simple2::decode,
	has_modrm: false,
	code16: Code::Pushaw as u32,
	code32: Code::Pushad as u32,
	code64: Code::Pushad as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_27: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_B_PUSHAW }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_15: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0007,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_14: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0006,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_13: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0005,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_12: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0004,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_11: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0003,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_10: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0002,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_9: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0001,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_8: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0000,
	code16: Code::Pop_r16 as u32,
	code32: Code::Pop_r32 as u32,
	code64: Code::Pop_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_7: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0007,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_6: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0006,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_5: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0005,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_4: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0004,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_3: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0003,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_2: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0002,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG_1: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0001,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_SIMPLE_REG: OpCodeHandler_PushSimpleReg = OpCodeHandler_PushSimpleReg {
	decode: OpCodeHandler_PushSimpleReg::decode,
	has_modrm: false,
	index: 0x0000_0000,
	code16: Code::Push_r16 as u32,
	code32: Code::Push_r32 as u32,
	code64: Code::Push_r64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16_7: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0007,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_26: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16_7 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16_6: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0006,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_25: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16_6 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16_5: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0005,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_24: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16_5 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16_4: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0004,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_23: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16_4 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16_3: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0003,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_22: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16_3 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16_2: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0002,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_21: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16_2 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16_1: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0001,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_20: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16_1 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_DEC_R16: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Dec_r16 as u32,
	index: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_19: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_DEC_R16 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16_7: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0007,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_18: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16_7 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16_6: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0006,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_17: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16_6 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16_5: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0005,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_16: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16_5 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16_4: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0004,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_15: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16_4 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16_3: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0003,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_14: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16_3 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16_2: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0002,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_13: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16_2 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16_1: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0001,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_12: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16_1 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_REG_INC_R16: OpCodeHandler_SimpleReg = OpCodeHandler_SimpleReg {
	decode: OpCodeHandler_SimpleReg::decode,
	has_modrm: false,
	code: Code::Inc_r16 as u32,
	index: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_11: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_INC_R16 }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_AAS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Aas as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_10: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_AAS }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_CMP_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Cmp_AX_imm16 as u32,
	code32: Code::Cmp_EAX_imm32 as u32,
	code64: Code::Cmp_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_CMP_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Cmp_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_CMP_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Cmp_r16_rm16 as u32,
	code32: Code::Cmp_r32_rm32 as u32,
	code64: Code::Cmp_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_CMP_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Cmp_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_3_A_CMP_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Cmp_rm16_r16 as u32,
	code32: Code::Cmp_rm32_r32 as u32,
	code64: Code::Cmp_rm64_r64 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_1_CMP_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Cmp_rm8_r8 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_AAA: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Aaa as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_9: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_AAA }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_XOR_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Xor_AX_imm16 as u32,
	code32: Code::Xor_EAX_imm32 as u32,
	code64: Code::Xor_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_XOR_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Xor_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_XOR_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Xor_r16_rm16 as u32,
	code32: Code::Xor_r32_rm32 as u32,
	code64: Code::Xor_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_XOR_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Xor_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_XOR_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Xor_rm16_r16 as u32,
	code32: Code::Xor_rm32_r32 as u32,
	code64: Code::Xor_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_XOR_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Xor_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_DAS: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Das as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_8: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_DAS }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_SUB_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Sub_AX_imm16 as u32,
	code32: Code::Sub_EAX_imm32 as u32,
	code64: Code::Sub_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_SUB_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Sub_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_SUB_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Sub_r16_rm16 as u32,
	code32: Code::Sub_r32_rm32 as u32,
	code64: Code::Sub_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_SUB_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Sub_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_SUB_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Sub_rm16_r16 as u32,
	code32: Code::Sub_rm32_r32 as u32,
	code64: Code::Sub_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_SUB_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Sub_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_SIMPLE_DAA: OpCodeHandler_Simple = OpCodeHandler_Simple {
	decode: OpCodeHandler_Simple::decode,
	has_modrm: false,
	code: Code::Daa as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_7: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_SIMPLE_DAA }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_AND_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::And_AX_imm16 as u32,
	code32: Code::And_EAX_imm32 as u32,
	code64: Code::And_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_AND_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::And_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_AND_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::And_r16_rm16 as u32,
	code32: Code::And_r32_rm32 as u32,
	code64: Code::And_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_AND_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::And_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_AND_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::And_rm16_r16 as u32,
	code32: Code::And_rm32_r32 as u32,
	code64: Code::And_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_AND_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::And_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_B_POPW_DS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Popw_DS as u32,
	code32: Code::Popd_DS as u32,
	code64: Code::INVALID as u32,
	reg: Register::DS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_6: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_B_POPW_DS }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_DS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Pushw_DS as u32,
	code32: Code::Pushd_DS as u32,
	code64: Code::INVALID as u32,
	reg: Register::DS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_5: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_DS }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_SBB_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Sbb_AX_imm16 as u32,
	code32: Code::Sbb_EAX_imm32 as u32,
	code64: Code::Sbb_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_SBB_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Sbb_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_SBB_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Sbb_r16_rm16 as u32,
	code32: Code::Sbb_r32_rm32 as u32,
	code64: Code::Sbb_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_SBB_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Sbb_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_SBB_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Sbb_rm16_r16 as u32,
	code32: Code::Sbb_rm32_r32 as u32,
	code64: Code::Sbb_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_SBB_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Sbb_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_B_POPW_SS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Popw_SS as u32,
	code32: Code::Popd_SS as u32,
	code64: Code::INVALID as u32,
	reg: Register::SS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_4: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_B_POPW_SS }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_SS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Pushw_SS as u32,
	code32: Code::Pushd_SS as u32,
	code64: Code::INVALID as u32,
	reg: Register::SS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_3: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_SS }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_ADC_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Adc_AX_imm16 as u32,
	code32: Code::Adc_EAX_imm32 as u32,
	code64: Code::Adc_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_ADC_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Adc_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_ADC_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Adc_r16_rm16 as u32,
	code32: Code::Adc_r32_rm32 as u32,
	code64: Code::Adc_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_ADC_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Adc_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_ADC_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Adc_rm16_r16 as u32,
	code32: Code::Adc_rm32_r32 as u32,
	code64: Code::Adc_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_ADC_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Adc_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_ANOTHER_TABLE: OpCodeHandler_AnotherTable = OpCodeHandler_AnotherTable {
	decode: OpCodeHandler_AnotherTable::decode,
	has_modrm: false,
	group_handlers: &TWO_BYTE_HANDLERS_0_FXX,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_CS: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Pushw_CS as u32,
	code32: Code::Pushd_CS as u32,
	code64: Code::INVALID as u32,
	reg: Register::CS,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_2: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_CS }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_OR_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Or_AX_imm16 as u32,
	code32: Code::Or_EAX_imm32 as u32,
	code64: Code::Or_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_OR_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Or_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_OR_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Or_r16_rm16 as u32,
	code32: Code::Or_r32_rm32 as u32,
	code64: Code::Or_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_OR_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Or_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_OR_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Or_rm16_r16 as u32,
	code32: Code::Or_rm32_r32 as u32,
	code64: Code::Or_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_OR_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Or_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_B_POPW_ES: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Popw_ES as u32,
	code32: Code::Popd_ES as u32,
	code64: Code::INVALID as u32,
	reg: Register::ES,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS_1: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_B_POPW_ES }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_INVALID: OpCodeHandler_Invalid = OpCodeHandler_Invalid {
	decode: OpCodeHandler_Invalid::decode,
	has_modrm: true,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_ES: OpCodeHandler_PushOpSizeReg = OpCodeHandler_PushOpSizeReg {
	decode: OpCodeHandler_PushOpSizeReg::decode,
	has_modrm: false,
	code16: Code::Pushw_ES as u32,
	code32: Code::Pushd_ES as u32,
	code64: Code::INVALID as u32,
	reg: Register::ES,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_BITNESS: OpCodeHandler_Bitness = OpCodeHandler_Bitness {
	decode: OpCodeHandler_Bitness::decode,
	has_modrm: false,
	handler1632: unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_B_PUSHW_ES }.to },
	handler64: unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IZ_ADD_AX_IMM16: OpCodeHandler_Reg_Iz = OpCodeHandler_Reg_Iz {
	decode: OpCodeHandler_Reg_Iz::decode,
	has_modrm: false,
	code16: Code::Add_AX_imm16 as u32,
	code32: Code::Add_EAX_imm32 as u32,
	code64: Code::Add_RAX_imm32 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_REG_IB_ADD_AL_IMM8: OpCodeHandler_RegIb = OpCodeHandler_RegIb {
	decode: OpCodeHandler_RegIb::decode,
	has_modrm: false,
	code: Code::Add_AL_imm8 as u32,
	reg: Register::AL,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GV_EV_3_A_ADD_R16_RM16: OpCodeHandler_Gv_Ev = OpCodeHandler_Gv_Ev {
	decode: OpCodeHandler_Gv_Ev::decode,
	has_modrm: true,
	code16: Code::Add_r16_rm16 as u32,
	code32: Code::Add_r32_rm32 as u32,
	code64: Code::Add_r64_rm64 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_GB_EB_ADD_R8_RM8: OpCodeHandler_Gb_Eb = OpCodeHandler_Gb_Eb {
	decode: OpCodeHandler_Gb_Eb::decode,
	has_modrm: true,
	code: Code::Add_r8_rm8 as u32,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EV_GV_4_ADD_RM16_R16: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::Add_rm16_r16 as u32,
	code32: Code::Add_rm32_r32 as u32,
	code64: Code::Add_rm64_r64 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_EB_GB_2_ADD_RM8_R8: OpCodeHandler_Eb_Gb = OpCodeHandler_Eb_Gb {
	decode: OpCodeHandler_Eb_Gb::decode,
	has_modrm: true,
	code: Code::Add_rm8_r8 as u32,
	flags: HandlerFlags::XACQUIRE | HandlerFlags::XRELEASE | HandlerFlags::LOCK,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_D8_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FADD_M32_FP }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FMUL_M32_FP }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FCOM_M32_FP }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FCOMP_M32_FP }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FSUB_M32_FP }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FSUBR_M32_FP }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FDIV_M32_FP }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FDIVR_M32_FP }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_D8_HIGH: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FADD_ST0_STI }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FMUL_ST0_STI }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOM_ST0_STI }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FSUB_ST0_STI }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FSUBR_ST0_STI }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FDIV_ST0_STI }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FDIVR_ST0_STI }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_D9_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FLD_M32_FP }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FST_M32_FP }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FSTP_M32_FP }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MF_2_A_FLDENV_M14_BYTE }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FLDCW_M2_BYTE }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MF_2_B_FNSTENV_M14_BYTE }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FNSTCW_M2_BYTE }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_D9_HIGH: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FLD_ST0_STI }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FNOP }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTPNCE_STI }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FCHS }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FABS }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FTST }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FXAM }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FLD1 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FLDL2_T }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FLDL2_E }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FLDPI }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FLDLG2 }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FLDLN2 }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FLDZ }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_F2_XM1 }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FYL2_X }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FPTAN }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FPATAN }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FXTRACT }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FPREM1 }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FDECSTP }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FINCSTP }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FPREM }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FYL2_XP1 }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FSQRT }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FSINCOS }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FRNDINT }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FSCALE }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FSIN }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FCOS }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DA_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIADD_M32_INT }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIMUL_M32_INT }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FICOM_M32_INT }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FICOMP_M32_INT }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISUB_M32_INT }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISUBR_M32_INT }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIDIV_M32_INT }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIDIVR_M32_INT }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DA_HIGH: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVB_ST0_STI }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVE_ST0_STI }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVBE_ST0_STI }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVU_ST0_STI }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FUCOMPP }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DB_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FILD_M32_INT }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISTTP_M32_INT }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIST_M32_INT }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISTP_M32_INT }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FLD_M80_FP }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FSTP_M80_FP }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DB_HIGH: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNB_ST0_STI }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNE_ST0_STI }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNBE_ST0_STI }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCMOVNU_ST0_STI }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FNENI }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FNDISI }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FNCLEX }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FNINIT }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FNSETPM }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_41 }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMI_ST0_STI }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMI_ST0_STI }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DC_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FADD_M64_FP }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FMUL_M64_FP }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FCOM_M64_FP }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FCOMP_M64_FP }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FSUB_M64_FP }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FSUBR_M64_FP }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FDIV_M64_FP }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FDIVR_M64_FP }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DC_HIGH: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADD_STI_ST0 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMUL_STI_ST0 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOM_ST0_STI_DCD0 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DCD8 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBR_STI_ST0 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUB_STI_ST0 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVR_STI_ST0 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIV_STI_ST0 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DD_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FLD_M64_FP }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISTTP_M64_INT }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FST_M64_FP }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FSTP_M64_FP }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MF_2_A_FRSTOR_M94_BYTE }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MF_2_B_FNSAVE_M94_BYTE }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FNSTSW_M2_BYTE }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DD_HIGH: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREE_STI }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DDC8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_STI_FST_STI }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOM_ST0_STI }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMP_ST0_STI }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DE_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIADD_M16_INT }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIMUL_M16_INT }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FICOM_M16_INT }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FICOMP_M16_INT }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISUB_M16_INT }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISUBR_M16_INT }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIDIV_M16_INT }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIDIVR_M16_INT }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DE_HIGH: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FADDP_STI_ST0 }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FMULP_STI_ST0 }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMP_ST0_STI_DED0 }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FCOMPP }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBRP_STI_ST0 }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FSUBP_STI_ST0 }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVRP_STI_ST0 }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_STI_ST_FDIVP_STI_ST0 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DF_LOW: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FILD_M16_INT }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISTTP_M16_INT }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FIST_M16_INT }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISTP_M16_INT }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FBLD_M80_BCD }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FILD_M64_INT }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FBSTP_M80_BCD }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MF_1_FISTP_M64_INT }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_FPU_DF_HIGH: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_STI_FFREEP_STI }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FXCH_ST0_STI_DFC8 }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD0 }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_STI_FSTP_STI_DFD8 }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_REG_FNSTSW_AX }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_39 }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_40 }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FUCOMIP_ST0_STI }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_ST_STI_FCOMIP_ST0_STI }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_80: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_ADD_RM8_IMM8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_OR_RM8_IMM8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_ADC_RM8_IMM8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_SBB_RM8_IMM8 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_AND_RM8_IMM8 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_SUB_RM8_IMM8 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_XOR_RM8_IMM8 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_CMP_RM8_IMM8 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_81: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_ADD_RM16_IMM16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_OR_RM16_IMM16 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_ADC_RM16_IMM16 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_SBB_RM16_IMM16 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_AND_RM16_IMM16 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_SUB_RM16_IMM16 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_XOR_RM16_IMM16 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_3_CMP_RM16_IMM16 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_82: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_ADD_RM8_IMM8_82 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_OR_RM8_IMM8_82 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_ADC_RM8_IMM8_82 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_SBB_RM8_IMM8_82 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_AND_RM8_IMM8_82 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_SUB_RM8_IMM8_82 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_XOR_RM8_IMM8_82 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_CMP_RM8_IMM8_82 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_83: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_4_ADD_RM16_IMM8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_4_OR_RM16_IMM8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_4_ADC_RM16_IMM8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_4_SBB_RM16_IMM8 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_4_AND_RM16_IMM8 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_4_SUB_RM16_IMM8 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_4_XOR_RM16_IMM8 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EV_IB_3_CMP_RM16_IMM8 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_8_F: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_PUSH_EV_POP_RM16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_C0: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_ROL_RM8_IMM8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_ROR_RM8_IMM8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_RCL_RM8_IMM8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_RCR_RM8_IMM8 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_SHL_RM8_IMM8 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_SHR_RM8_IMM8 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_SAL_RM8_IMM8 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_SAR_RM8_IMM8 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_C1: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_ROL_RM16_IMM8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_ROR_RM16_IMM8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_RCL_RM16_IMM8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_RCR_RM16_IMM8 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_SHL_RM16_IMM8 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_SHR_RM16_IMM8 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_SAL_RM16_IMM8 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_SAR_RM16_IMM8 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_D0: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB1_ROL_RM8_1 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EB1_ROR_RM8_1 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EB1_RCL_RM8_1 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EB1_RCR_RM8_1 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EB1_SHL_RM8_1 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EB1_SHR_RM8_1 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EB1_SAL_RM8_1 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EB1_SAR_RM8_1 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_D1: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV1_ROL_RM16_1 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV1_ROR_RM16_1 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EV1_RCL_RM16_1 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EV1_RCR_RM16_1 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EV1_SHL_RM16_1 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EV1_SHR_RM16_1 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EV1_SAL_RM16_1 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EV1_SAR_RM16_1 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_D2: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_ROL_RM8_CL }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_ROR_RM8_CL }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_RCL_RM8_CL }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_RCR_RM8_CL }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_SHL_RM8_CL }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_SHR_RM8_CL }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_SAL_RM8_CL }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EB_CL_SAR_RM8_CL }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_D3: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_ROL_RM16_CL }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_ROR_RM16_CL }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_RCL_RM16_CL }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_RCR_RM16_CL }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_SHL_RM16_CL }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_SHR_RM16_CL }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_SAL_RM16_CL }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EV_CL_SAR_RM16_CL }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_F6: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_TEST_RM8_IMM8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_1_TEST_RM8_IMM8_F6_R1 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EB_2_NOT_RM8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EB_2_NEG_RM8 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EB_1_MUL_RM8 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EB_1_IMUL_RM8 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EB_1_DIV_RM8 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EB_1_IDIV_RM8 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_F7: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_3_TEST_RM16_IMM16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_3_TEST_RM16_IMM16_F7_R1 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EV_4_NOT_RM16 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EV_4_NEG_RM16 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EV_3_A_MUL_RM16 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EV_3_A_IMUL_RM16 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EV_3_A_DIV_RM16 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EV_3_A_IDIV_RM16 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_FE: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_2_INC_RM8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EB_2_DEC_RM8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_FF: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_4_INC_RM16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV_4_DEC_RM16 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EVJ_CALL_RM16 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EP_CALL_M1616 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EVJ_JMP_RM16 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EP_JMP_M1616 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_PUSH_EV_PUSH_RM16 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F00: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EVW_SLDT_RM16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EVW_STR_RM16 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_EW_LLDT_RM16 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_EW_LTR_RM16 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EW_VERR_RM16 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EW_VERW_RM16 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_OPTIONS_DONT_READ_MOD_RM_1 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F01_LO: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MS_SGDT_M1632_16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MS_SIDT_M1632_16 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MS_LGDT_M1632_16 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MS_LIDT_M1632_16 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EVW_SMSW_RM16 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_254 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EVW_LMSW_RM16 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_M_1_INVLPG_M }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F01_HI: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_2 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_3 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_4 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_5 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_6 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_7 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_8 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_9 }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_10 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_11 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_12 }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_13 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_14 }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_15 }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_16 }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_17 }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_18 }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_VMRUNW }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_VMMCALL }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_VMLOADW }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_VMSAVEW }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_STGI }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CLGI }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SKINIT }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_INVLPGAW }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_252 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_253 }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_19 }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_20 }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_DONT_READ_MOD_RM_4 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_RDTSCP }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_21 }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_MWAITX }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_CLZEROW }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_RDPRU }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FA6_LO: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FA6_HI: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_MONTMUL_16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XSHA1_16 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XSHA256_16 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FA7_LO: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FA7_HI: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XSTORE_16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XCRYPT_ECB_16 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XCRYPT_CBC_16 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XCRYPT_CTR_16 }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XCRYPT_CFB_16 }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE5_XCRYPT_OFB_16 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FBA: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_3_BT_RM16_IMM8 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_4_BTS_RM16_IMM8 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_4_BTR_RM16_IMM8 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_EV_IB2_4_BTC_RM16_IMM8 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FC7: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_M_REXW_4_CMPXCHG8_B_M64 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_112 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_113 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_114 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX3 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX3_1 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_C6_LO: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_IB_2_MOV_RM8_IMM8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_C6_HI: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_IB3_XABORT_IMM8 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_C7_LO: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_IZ_4_MOV_RM16_IMM16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_C7_HI: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_JX_XBEGIN_REL16 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F71: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_154 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_155 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_156 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F72: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_151 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_152 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_153 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F73: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_147 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_148 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_149 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_150 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FAE_LO: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_139 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_140 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_141 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_142 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_143 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_144 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_145 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_146 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_FAE_HI: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_115 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_116 }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_117 }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_118 }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_119 }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_120 }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_121 }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_122 }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_123 }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_124 }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_125 }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_126 }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_127 }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_128 }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_129 }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_130 }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_131 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_132 }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_133 }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_134 }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_135 }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_136 }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_137 }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_138 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F0_D: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F0D as u32,
	code32: Code::ReservedNop_rm32_r32_0F0D as u32,
	code64: Code::ReservedNop_rm64_r64_0F0D as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F18: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F18 as u32,
	code32: Code::ReservedNop_rm32_r32_0F18 as u32,
	code64: Code::ReservedNop_rm64_r64_0F18 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F19: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F19 as u32,
	code32: Code::ReservedNop_rm32_r32_0F19 as u32,
	code64: Code::ReservedNop_rm64_r64_0F19 as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F1_A: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F1A as u32,
	code32: Code::ReservedNop_rm32_r32_0F1A as u32,
	code64: Code::ReservedNop_rm64_r64_0F1A as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F1_B: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F1B as u32,
	code32: Code::ReservedNop_rm32_r32_0F1B as u32,
	code64: Code::ReservedNop_rm64_r64_0F1B as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F1_C: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F1C as u32,
	code32: Code::ReservedNop_rm32_r32_0F1C as u32,
	code64: Code::ReservedNop_rm64_r64_0F1C as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F1_D: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F1D as u32,
	code32: Code::ReservedNop_rm32_r32_0F1D as u32,
	code64: Code::ReservedNop_rm64_r64_0F1D as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F1_E: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F1E as u32,
	code32: Code::ReservedNop_rm32_r32_0F1E as u32,
	code64: Code::ReservedNop_rm64_r64_0F1E as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static RESERVED_NOP_0_F1_F: OpCodeHandler_Ev_Gv = OpCodeHandler_Ev_Gv {
	decode: OpCodeHandler_Ev_Gv::decode,
	has_modrm: true,
	code16: Code::ReservedNop_rm16_r16_0F1F as u32,
	code32: Code::ReservedNop_rm32_r32_0F1F as u32,
	code64: Code::ReservedNop_rm64_r64_0F1F as u32,
	flags: 0x0000_0000,
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F0_D_MEM: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_M_1_PREFETCH_M8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_M_1_PREFETCHW_M8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_M_1_PREFETCHWT1_M8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
	/*04*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
	/*05*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
	/*06*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
	/*07*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GRP0_F0_D: OpCodeHandler_RM = OpCodeHandler_RM {
	decode: OpCodeHandler_RM::decode,
	has_modrm: true,
	reg: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F0_D }.to },
	mem: unsafe { HandlerTransmuter { from: &GEN_RM_21 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F18_MEM: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_M_1_PREFETCHNTA_M8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_M_1_PREFETCHT0_M8 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_M_1_PREFETCHT1_M8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_M_1_PREFETCHT2_M8 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F18 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F18 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F18 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F18 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GRP0_F18: OpCodeHandler_ReservedNop = OpCodeHandler_ReservedNop {
	decode: OpCodeHandler_ReservedNop::decode,
	has_modrm: true,
	reserved_nop_handler: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F18 }.to },
	other_handler: unsafe { HandlerTransmuter { from: &GEN_RM_19 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F1_C_MEM: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_251 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	/*02*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	/*03*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	/*04*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	/*05*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	/*06*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	/*07*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GRP0_F1_C: OpCodeHandler_ReservedNop = OpCodeHandler_ReservedNop {
	decode: OpCodeHandler_ReservedNop::decode,
	has_modrm: true,
	reserved_nop_handler: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_C }.to },
	other_handler: unsafe { HandlerTransmuter { from: &GEN_RM_17 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F1_E_REG_LO: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	/*01*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	/*02*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	/*03*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	/*04*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	/*05*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	/*06*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	/*07*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GRP0_F1_E_1: OpCodeHandler_MandatoryPrefix = OpCodeHandler_MandatoryPrefix {
	decode: OpCodeHandler_MandatoryPrefix::decode,
	has_modrm: true,
	handlers: [
		unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
		unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
		unsafe { HandlerTransmuter { from: &GEN_RM_16 }.to },
		unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	],
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F1_E_REG_HI: [&OpCodeHandler; 0x40] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GRP0_F1_E_1 }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_249 }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_250 }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_NULL_HANDLER }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GRP0_F1_E: OpCodeHandler_ReservedNop = OpCodeHandler_ReservedNop {
	decode: OpCodeHandler_ReservedNop::decode,
	has_modrm: true,
	reserved_nop_handler: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_E }.to },
	other_handler: unsafe { HandlerTransmuter { from: &GEN_RM_15 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_0_F1_F: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EV_3_A_NOP_RM16 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
	/*02*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
	/*03*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
	/*04*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
	/*05*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
	/*06*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
	/*07*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GRP0_F1_F: OpCodeHandler_ReservedNop = OpCodeHandler_ReservedNop {
	decode: OpCodeHandler_ReservedNop::decode,
	has_modrm: true,
	reserved_nop_handler: unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_F }.to },
	other_handler: unsafe { HandlerTransmuter { from: &GEN_GROUP_22 }.to },
};

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static HANDLERS_GRP_660_F78: [&OpCodeHandler; 8] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_RIB_IB }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static THREE_BYTE_HANDLERS_0_F38_XX: [&OpCodeHandler; 0x100] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_184 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_185 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_186 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_187 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_188 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_189 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_190 }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_191 }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_192 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_193 }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_194 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_195 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_196 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_197 }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_198 }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_199 }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_200 }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_201 }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_202 }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_203 }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_204 }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_205 }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_206 }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_207 }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_208 }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_209 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_210 }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_211 }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_212 }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_213 }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_214 }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_215 }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_216 }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_217 }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_218 }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_219 }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_220 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_221 }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_222 }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_223 }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_224 }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_225 }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_226 }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_227 }.to },
	/*40*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_228 }.to },
	/*41*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_229 }.to },
	/*42*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*43*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*44*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*45*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*46*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*47*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*48*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*49*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*50*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*51*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*52*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*53*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*54*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*55*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*56*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*57*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*58*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*59*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*60*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*61*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*62*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*63*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*64*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*65*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*66*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*67*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*68*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*69*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*70*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*71*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*72*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*73*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*74*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*75*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*76*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*77*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*78*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*79*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*80*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_230 }.to },
	/*81*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_231 }.to },
	/*82*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_232 }.to },
	/*83*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*84*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*85*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*86*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*87*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*88*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*89*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*90*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*91*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*92*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*93*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*94*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*95*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*96*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*97*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*98*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*99*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C8*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_233 }.to },
	/*C9*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_234 }.to },
	/*CA*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_235 }.to },
	/*CB*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_236 }.to },
	/*CC*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_237 }.to },
	/*CD*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_238 }.to },
	/*CE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*CF*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_239 }.to },
	/*D0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DB*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_240 }.to },
	/*DC*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_241 }.to },
	/*DD*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_242 }.to },
	/*DE*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_243 }.to },
	/*DF*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_244 }.to },
	/*E0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*ED*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F0*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_F3_F2_1 }.to },
	/*F1*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_F3_F2_2 }.to },
	/*F2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F5*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_245 }.to },
	/*F6*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_246 }.to },
	/*F7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F8*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_247 }.to },
	/*F9*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_248 }.to },
	/*FA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static THREE_BYTE_HANDLERS_0_F3_AXX: [&OpCodeHandler; 0x100] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_157 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_158 }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_159 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_160 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_161 }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_162 }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_163 }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_164 }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_165 }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_166 }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_167 }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_168 }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_169 }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_170 }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_171 }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*40*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_172 }.to },
	/*41*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_173 }.to },
	/*42*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_174 }.to },
	/*43*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*44*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_175 }.to },
	/*45*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*46*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*47*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*48*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*49*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*4F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*50*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*51*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*52*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*53*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*54*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*55*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*56*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*57*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*58*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*59*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*5F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*60*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_176 }.to },
	/*61*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_177 }.to },
	/*62*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_178 }.to },
	/*63*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_179 }.to },
	/*64*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*65*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*66*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*67*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*68*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*69*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*6F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*70*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*71*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*72*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*73*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*74*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*75*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*76*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*77*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*78*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*79*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*80*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*81*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*82*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*83*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*84*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*85*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*86*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*87*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*88*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*89*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*8F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*90*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*91*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*92*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*93*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*94*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*95*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*96*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*97*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*98*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*99*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*9F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*A9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*AF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*B9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*BF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*C9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*CA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*CB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*CC*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_180 }.to },
	/*CD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*CE*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_181 }.to },
	/*CF*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_182 }.to },
	/*D0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*D9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*DF*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_183 }.to },
	/*E0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*E9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*ED*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*EF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F1*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F4*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F5*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F6*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F7*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F8*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F9*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FA*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FB*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FC*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FD*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FE*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*FF*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static TWO_BYTE_HANDLERS_0_FXX: [&OpCodeHandler; 0x100] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_GROUP_15 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_7 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_GV_EV3_LAR_R16_RM16 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_GV_EV3_LSL_R16_RM16 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_42 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_43 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CLTS }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_44 }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_INVD }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_WBINVD }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_45 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_UD2 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_RESERVED_NOP }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_FEMMS }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_D3_NOW }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_46 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_47 }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_48 }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_49 }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_4 }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_5 }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_6 }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_7 }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GRP0_F18 }.to },
	/*19*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F19 }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_RESERVED_NOP_1 }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_RESERVED_NOP_2 }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GRP0_F1_C }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &RESERVED_NOP_0_F1_D }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GRP0_F1_E }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GRP0_F1_F }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_R_C_3_A_MOV_R32_CR }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_R_C_3_A_MOV_R32_DR }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_C_R_3_A_MOV_CR_R32 }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_C_R_3_A_MOV_DR_R32 }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_50 }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_51 }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_10 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_11 }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_12 }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_13 }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_14 }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_15 }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_16 }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_17 }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_WRMSR }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_RDTSC }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_RDMSR }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_RDPMC }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_SYSENTER }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE4_SYSEXITD }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_ANOTHER_TABLE_1 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_ANOTHER_TABLE_2 }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*40*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVO_R16_RM16 }.to },
	/*41*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVNO_R16_RM16 }.to },
	/*42*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVB_R16_RM16 }.to },
	/*43*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVAE_R16_RM16 }.to },
	/*44*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVE_R16_RM16 }.to },
	/*45*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVNE_R16_RM16 }.to },
	/*46*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVBE_R16_RM16 }.to },
	/*47*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVA_R16_RM16 }.to },
	/*48*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVS_R16_RM16 }.to },
	/*49*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVNS_R16_RM16 }.to },
	/*4A*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVP_R16_RM16 }.to },
	/*4B*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVNP_R16_RM16 }.to },
	/*4C*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVL_R16_RM16 }.to },
	/*4D*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVGE_R16_RM16 }.to },
	/*4E*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVLE_R16_RM16 }.to },
	/*4F*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMOVG_R16_RM16 }.to },
	/*50*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_18 }.to },
	/*51*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_19 }.to },
	/*52*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_20 }.to },
	/*53*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_21 }.to },
	/*54*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_22 }.to },
	/*55*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_23 }.to },
	/*56*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_24 }.to },
	/*57*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_25 }.to },
	/*58*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_26 }.to },
	/*59*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_27 }.to },
	/*5A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_28 }.to },
	/*5B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_29 }.to },
	/*5C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_30 }.to },
	/*5D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_31 }.to },
	/*5E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_32 }.to },
	/*5F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_33 }.to },
	/*60*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_34 }.to },
	/*61*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_35 }.to },
	/*62*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_36 }.to },
	/*63*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_37 }.to },
	/*64*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_38 }.to },
	/*65*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_39 }.to },
	/*66*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_40 }.to },
	/*67*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_41 }.to },
	/*68*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_42 }.to },
	/*69*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_43 }.to },
	/*6A*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_44 }.to },
	/*6B*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_45 }.to },
	/*6C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_46 }.to },
	/*6D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_47 }.to },
	/*6E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_48 }.to },
	/*6F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_49 }.to },
	/*70*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_50 }.to },
	/*71*/unsafe { HandlerTransmuter { from: &GEN_GROUP_16 }.to },
	/*72*/unsafe { HandlerTransmuter { from: &GEN_GROUP_17 }.to },
	/*73*/unsafe { HandlerTransmuter { from: &GEN_GROUP_18 }.to },
	/*74*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_51 }.to },
	/*75*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_52 }.to },
	/*76*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_53 }.to },
	/*77*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_NO_MOD_RM_1 }.to },
	/*78*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_54 }.to },
	/*79*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_55 }.to },
	/*7A*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7B*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*7C*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_56 }.to },
	/*7D*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_57 }.to },
	/*7E*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_58 }.to },
	/*7F*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_59 }.to },
	/*80*/unsafe { HandlerTransmuter { from: &GEN_JZ_JO_REL16 }.to },
	/*81*/unsafe { HandlerTransmuter { from: &GEN_JZ_JNO_REL16 }.to },
	/*82*/unsafe { HandlerTransmuter { from: &GEN_JZ_JB_REL16 }.to },
	/*83*/unsafe { HandlerTransmuter { from: &GEN_JZ_JAE_REL16 }.to },
	/*84*/unsafe { HandlerTransmuter { from: &GEN_JZ_JE_REL16 }.to },
	/*85*/unsafe { HandlerTransmuter { from: &GEN_JZ_JNE_REL16 }.to },
	/*86*/unsafe { HandlerTransmuter { from: &GEN_JZ_JBE_REL16 }.to },
	/*87*/unsafe { HandlerTransmuter { from: &GEN_JZ_JA_REL16 }.to },
	/*88*/unsafe { HandlerTransmuter { from: &GEN_JZ_JS_REL16 }.to },
	/*89*/unsafe { HandlerTransmuter { from: &GEN_JZ_JNS_REL16 }.to },
	/*8A*/unsafe { HandlerTransmuter { from: &GEN_JZ_JP_REL16 }.to },
	/*8B*/unsafe { HandlerTransmuter { from: &GEN_JZ_JNP_REL16 }.to },
	/*8C*/unsafe { HandlerTransmuter { from: &GEN_JZ_JL_REL16 }.to },
	/*8D*/unsafe { HandlerTransmuter { from: &GEN_JZ_JGE_REL16 }.to },
	/*8E*/unsafe { HandlerTransmuter { from: &GEN_JZ_JLE_REL16 }.to },
	/*8F*/unsafe { HandlerTransmuter { from: &GEN_JZ_JG_REL16 }.to },
	/*90*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETO_RM8 }.to },
	/*91*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETNO_RM8 }.to },
	/*92*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETB_RM8 }.to },
	/*93*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETAE_RM8 }.to },
	/*94*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETE_RM8 }.to },
	/*95*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETNE_RM8 }.to },
	/*96*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETBE_RM8 }.to },
	/*97*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETA_RM8 }.to },
	/*98*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETS_RM8 }.to },
	/*99*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETNS_RM8 }.to },
	/*9A*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETP_RM8 }.to },
	/*9B*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETNP_RM8 }.to },
	/*9C*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETL_RM8 }.to },
	/*9D*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETGE_RM8 }.to },
	/*9E*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETLE_RM8 }.to },
	/*9F*/unsafe { HandlerTransmuter { from: &GEN_EB_1_SETG_RM8 }.to },
	/*A0*/unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_A_PUSHW_FS }.to },
	/*A1*/unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_A_POPW_FS }.to },
	/*A2*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CPUID }.to },
	/*A3*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_3_A_BT_RM16_R16 }.to },
	/*A4*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_IB_SHLD_RM16_R16_IMM8 }.to },
	/*A5*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_CL_SHLD_RM16_R16_CL }.to },
	/*A6*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_52 }.to },
	/*A7*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_53 }.to },
	/*A8*/unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_A_PUSHW_GS }.to },
	/*A9*/unsafe { HandlerTransmuter { from: &GEN_PUSH_OP_SIZE_REG_4_A_POPW_GS }.to },
	/*AA*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_RSM }.to },
	/*AB*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_BTS_RM16_R16 }.to },
	/*AC*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_IB_SHRD_RM16_R16_IMM8 }.to },
	/*AD*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_CL_SHRD_RM16_R16_CL }.to },
	/*AE*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_10 }.to },
	/*AF*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_IMUL_R16_RM16 }.to },
	/*B0*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_CMPXCHG_RM8_R8 }.to },
	/*B1*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_CMPXCHG_RM16_R16 }.to },
	/*B2*/unsafe { HandlerTransmuter { from: &GEN_GV_MP_3_LSS_R16_M1616 }.to },
	/*B3*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_BTR_RM16_R16 }.to },
	/*B4*/unsafe { HandlerTransmuter { from: &GEN_GV_MP_3_LFS_R16_M1616 }.to },
	/*B5*/unsafe { HandlerTransmuter { from: &GEN_GV_MP_3_LGS_R16_M1616 }.to },
	/*B6*/unsafe { HandlerTransmuter { from: &GEN_GV_EB_MOVZX_R16_RM8 }.to },
	/*B7*/unsafe { HandlerTransmuter { from: &GEN_GV_EW_MOVZX_R16_RM16 }.to },
	/*B8*/unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_15 }.to },
	/*B9*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_UD1_R16_RM16 }.to },
	/*BA*/unsafe { HandlerTransmuter { from: &GEN_GROUP_20 }.to },
	/*BB*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_BTC_RM16_R16 }.to },
	/*BC*/unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_16 }.to },
	/*BD*/unsafe { HandlerTransmuter { from: &GEN_OPTIONS3_17 }.to },
	/*BE*/unsafe { HandlerTransmuter { from: &GEN_GV_EB_MOVSX_R16_RM8 }.to },
	/*BF*/unsafe { HandlerTransmuter { from: &GEN_GV_EW_MOVSX_R16_RM16 }.to },
	/*C0*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_XADD_RM8_R8 }.to },
	/*C1*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_XADD_RM16_R16 }.to },
	/*C2*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_60 }.to },
	/*C3*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_61 }.to },
	/*C4*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_62 }.to },
	/*C5*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_63 }.to },
	/*C6*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_64 }.to },
	/*C7*/unsafe { HandlerTransmuter { from: &GEN_GROUP_21 }.to },
	/*C8*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16 }.to },
	/*C9*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16_1 }.to },
	/*CA*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16_2 }.to },
	/*CB*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16_3 }.to },
	/*CC*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16_4 }.to },
	/*CD*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16_5 }.to },
	/*CE*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16_6 }.to },
	/*CF*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_REG_BSWAP_R16_7 }.to },
	/*D0*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_65 }.to },
	/*D1*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_66 }.to },
	/*D2*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_67 }.to },
	/*D3*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_68 }.to },
	/*D4*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_69 }.to },
	/*D5*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_70 }.to },
	/*D6*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_71 }.to },
	/*D7*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_72 }.to },
	/*D8*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_73 }.to },
	/*D9*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_74 }.to },
	/*DA*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_75 }.to },
	/*DB*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_76 }.to },
	/*DC*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_77 }.to },
	/*DD*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_78 }.to },
	/*DE*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_79 }.to },
	/*DF*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_80 }.to },
	/*E0*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_81 }.to },
	/*E1*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_82 }.to },
	/*E2*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_83 }.to },
	/*E3*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_84 }.to },
	/*E4*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_85 }.to },
	/*E5*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_86 }.to },
	/*E6*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_87 }.to },
	/*E7*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_88 }.to },
	/*E8*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_89 }.to },
	/*E9*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_90 }.to },
	/*EA*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_91 }.to },
	/*EB*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_92 }.to },
	/*EC*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_93 }.to },
	/*ED*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_94 }.to },
	/*EE*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_95 }.to },
	/*EF*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_96 }.to },
	/*F0*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_97 }.to },
	/*F1*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_98 }.to },
	/*F2*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_99 }.to },
	/*F3*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_100 }.to },
	/*F4*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_101 }.to },
	/*F5*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_102 }.to },
	/*F6*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_103 }.to },
	/*F7*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_104 }.to },
	/*F8*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_105 }.to },
	/*F9*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_106 }.to },
	/*FA*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_107 }.to },
	/*FB*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_108 }.to },
	/*FC*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_109 }.to },
	/*FD*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_110 }.to },
	/*FE*/unsafe { HandlerTransmuter { from: &GEN_MANDATORY_PREFIX_111 }.to },
	/*FF*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_UD0_R16_RM16 }.to },
];

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
pub(crate) static HANDLERS_XX: [&OpCodeHandler; 0x100] = [
	/*00*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_ADD_RM8_R8 }.to },
	/*01*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_ADD_RM16_R16 }.to },
	/*02*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_ADD_R8_RM8 }.to },
	/*03*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_ADD_R16_RM16 }.to },
	/*04*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_ADD_AL_IMM8 }.to },
	/*05*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_ADD_AX_IMM16 }.to },
	/*06*/unsafe { HandlerTransmuter { from: &GEN_BITNESS }.to },
	/*07*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_1 }.to },
	/*08*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_OR_RM8_R8 }.to },
	/*09*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_OR_RM16_R16 }.to },
	/*0A*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_OR_R8_RM8 }.to },
	/*0B*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_OR_R16_RM16 }.to },
	/*0C*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_OR_AL_IMM8 }.to },
	/*0D*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_OR_AX_IMM16 }.to },
	/*0E*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_2 }.to },
	/*0F*/unsafe { HandlerTransmuter { from: &GEN_ANOTHER_TABLE }.to },
	/*10*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_ADC_RM8_R8 }.to },
	/*11*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_ADC_RM16_R16 }.to },
	/*12*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_ADC_R8_RM8 }.to },
	/*13*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_ADC_R16_RM16 }.to },
	/*14*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_ADC_AL_IMM8 }.to },
	/*15*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_ADC_AX_IMM16 }.to },
	/*16*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_3 }.to },
	/*17*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_4 }.to },
	/*18*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_SBB_RM8_R8 }.to },
	/*19*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_SBB_RM16_R16 }.to },
	/*1A*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_SBB_R8_RM8 }.to },
	/*1B*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_SBB_R16_RM16 }.to },
	/*1C*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_SBB_AL_IMM8 }.to },
	/*1D*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_SBB_AX_IMM16 }.to },
	/*1E*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_5 }.to },
	/*1F*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_6 }.to },
	/*20*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_AND_RM8_R8 }.to },
	/*21*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_AND_RM16_R16 }.to },
	/*22*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_AND_R8_RM8 }.to },
	/*23*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_AND_R16_RM16 }.to },
	/*24*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_AND_AL_IMM8 }.to },
	/*25*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_AND_AX_IMM16 }.to },
	/*26*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*27*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_7 }.to },
	/*28*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_SUB_RM8_R8 }.to },
	/*29*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_SUB_RM16_R16 }.to },
	/*2A*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_SUB_R8_RM8 }.to },
	/*2B*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_SUB_R16_RM16 }.to },
	/*2C*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_SUB_AL_IMM8 }.to },
	/*2D*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_SUB_AX_IMM16 }.to },
	/*2E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*2F*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_8 }.to },
	/*30*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_XOR_RM8_R8 }.to },
	/*31*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_XOR_RM16_R16 }.to },
	/*32*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_XOR_R8_RM8 }.to },
	/*33*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_XOR_R16_RM16 }.to },
	/*34*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_XOR_AL_IMM8 }.to },
	/*35*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_XOR_AX_IMM16 }.to },
	/*36*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*37*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_9 }.to },
	/*38*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_1_CMP_RM8_R8 }.to },
	/*39*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_3_A_CMP_RM16_R16 }.to },
	/*3A*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_CMP_R8_RM8 }.to },
	/*3B*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_CMP_R16_RM16 }.to },
	/*3C*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_CMP_AL_IMM8 }.to },
	/*3D*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_CMP_AX_IMM16 }.to },
	/*3E*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*3F*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_10 }.to },
	/*40*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_11 }.to },
	/*41*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_12 }.to },
	/*42*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_13 }.to },
	/*43*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_14 }.to },
	/*44*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_15 }.to },
	/*45*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_16 }.to },
	/*46*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_17 }.to },
	/*47*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_18 }.to },
	/*48*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_19 }.to },
	/*49*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_20 }.to },
	/*4A*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_21 }.to },
	/*4B*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_22 }.to },
	/*4C*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_23 }.to },
	/*4D*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_24 }.to },
	/*4E*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_25 }.to },
	/*4F*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_26 }.to },
	/*50*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG }.to },
	/*51*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_1 }.to },
	/*52*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_2 }.to },
	/*53*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_3 }.to },
	/*54*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_4 }.to },
	/*55*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_5 }.to },
	/*56*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_6 }.to },
	/*57*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_7 }.to },
	/*58*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_8 }.to },
	/*59*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_9 }.to },
	/*5A*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_10 }.to },
	/*5B*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_11 }.to },
	/*5C*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_12 }.to },
	/*5D*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_13 }.to },
	/*5E*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_14 }.to },
	/*5F*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE_REG_15 }.to },
	/*60*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_27 }.to },
	/*61*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_28 }.to },
	/*62*/unsafe { HandlerTransmuter { from: &GEN_EVEX }.to },
	/*63*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_29 }.to },
	/*64*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*65*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*66*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*67*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*68*/unsafe { HandlerTransmuter { from: &GEN_PUSH_IZ_PUSH_IMM16 }.to },
	/*69*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_IZ_IMUL_R16_RM16_IMM16 }.to },
	/*6A*/unsafe { HandlerTransmuter { from: &GEN_PUSH_IB2_PUSHW_IMM8 }.to },
	/*6B*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_IB_IMUL_R16_RM16_IMM8 }.to },
	/*6C*/unsafe { HandlerTransmuter { from: &GEN_YB_REG_INSB_M8_DX }.to },
	/*6D*/unsafe { HandlerTransmuter { from: &GEN_YV_REG2_INSW_M16_DX }.to },
	/*6E*/unsafe { HandlerTransmuter { from: &GEN_REG_XB_OUTSB_DX_M8 }.to },
	/*6F*/unsafe { HandlerTransmuter { from: &GEN_REG_XV2_OUTSW_DX_M16 }.to },
	/*70*/unsafe { HandlerTransmuter { from: &GEN_JB_JO_REL8_16 }.to },
	/*71*/unsafe { HandlerTransmuter { from: &GEN_JB_JNO_REL8_16 }.to },
	/*72*/unsafe { HandlerTransmuter { from: &GEN_JB_JB_REL8_16 }.to },
	/*73*/unsafe { HandlerTransmuter { from: &GEN_JB_JAE_REL8_16 }.to },
	/*74*/unsafe { HandlerTransmuter { from: &GEN_JB_JE_REL8_16 }.to },
	/*75*/unsafe { HandlerTransmuter { from: &GEN_JB_JNE_REL8_16 }.to },
	/*76*/unsafe { HandlerTransmuter { from: &GEN_JB_JBE_REL8_16 }.to },
	/*77*/unsafe { HandlerTransmuter { from: &GEN_JB_JA_REL8_16 }.to },
	/*78*/unsafe { HandlerTransmuter { from: &GEN_JB_JS_REL8_16 }.to },
	/*79*/unsafe { HandlerTransmuter { from: &GEN_JB_JNS_REL8_16 }.to },
	/*7A*/unsafe { HandlerTransmuter { from: &GEN_JB_JP_REL8_16 }.to },
	/*7B*/unsafe { HandlerTransmuter { from: &GEN_JB_JNP_REL8_16 }.to },
	/*7C*/unsafe { HandlerTransmuter { from: &GEN_JB_JL_REL8_16 }.to },
	/*7D*/unsafe { HandlerTransmuter { from: &GEN_JB_JGE_REL8_16 }.to },
	/*7E*/unsafe { HandlerTransmuter { from: &GEN_JB_JLE_REL8_16 }.to },
	/*7F*/unsafe { HandlerTransmuter { from: &GEN_JB_JG_REL8_16 }.to },
	/*80*/unsafe { HandlerTransmuter { from: &GEN_GROUP }.to },
	/*81*/unsafe { HandlerTransmuter { from: &GEN_GROUP_1 }.to },
	/*82*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_30 }.to },
	/*83*/unsafe { HandlerTransmuter { from: &GEN_GROUP_3 }.to },
	/*84*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_1_TEST_RM8_R8 }.to },
	/*85*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_3_A_TEST_RM16_R16 }.to },
	/*86*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_XCHG_RM8_R8 }.to },
	/*87*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_XCHG_RM16_R16 }.to },
	/*88*/unsafe { HandlerTransmuter { from: &GEN_EB_GB_2_MOV_RM8_R8 }.to },
	/*89*/unsafe { HandlerTransmuter { from: &GEN_EV_GV_4_MOV_RM16_R16 }.to },
	/*8A*/unsafe { HandlerTransmuter { from: &GEN_GB_EB_MOV_R8_RM8 }.to },
	/*8B*/unsafe { HandlerTransmuter { from: &GEN_GV_EV_3_A_MOV_R16_RM16 }.to },
	/*8C*/unsafe { HandlerTransmuter { from: &GEN_EV_SW_MOV_RM16_SREG }.to },
	/*8D*/unsafe { HandlerTransmuter { from: &GEN_GV_M_LEA_R16_M }.to },
	/*8E*/unsafe { HandlerTransmuter { from: &GEN_SW_EV_MOV_SREG_RM16 }.to },
	/*8F*/unsafe { HandlerTransmuter { from: &GEN_XOP }.to },
	/*90*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX }.to },
	/*91*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX_1 }.to },
	/*92*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX_2 }.to },
	/*93*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX_3 }.to },
	/*94*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX_4 }.to },
	/*95*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX_5 }.to },
	/*96*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX_6 }.to },
	/*97*/unsafe { HandlerTransmuter { from: &GEN_XCHG_REG_R_AX_7 }.to },
	/*98*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_A_CBW }.to },
	/*99*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_A_CWD }.to },
	/*9A*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_31 }.to },
	/*9B*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_WAIT }.to },
	/*9C*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE2_PUSHFW }.to },
	/*9D*/unsafe { HandlerTransmuter { from: &GEN_PUSH_SIMPLE2_POPFW }.to },
	/*9E*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_32 }.to },
	/*9F*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_33 }.to },
	/*A0*/unsafe { HandlerTransmuter { from: &GEN_REG_OB_MOV_AL_MOFFS8 }.to },
	/*A1*/unsafe { HandlerTransmuter { from: &GEN_REG_OV_MOV_AX_MOFFS16 }.to },
	/*A2*/unsafe { HandlerTransmuter { from: &GEN_OB_REG_MOV_MOFFS8_AL }.to },
	/*A3*/unsafe { HandlerTransmuter { from: &GEN_OV_REG_MOV_MOFFS16_AX }.to },
	/*A4*/unsafe { HandlerTransmuter { from: &GEN_YB_XB_MOVSB_M8_M8 }.to },
	/*A5*/unsafe { HandlerTransmuter { from: &GEN_YV_XV_MOVSW_M16_M16 }.to },
	/*A6*/unsafe { HandlerTransmuter { from: &GEN_XB_YB_CMPSB_M8_M8 }.to },
	/*A7*/unsafe { HandlerTransmuter { from: &GEN_XV_YV_CMPSW_M16_M16 }.to },
	/*A8*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_TEST_AL_IMM8 }.to },
	/*A9*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ_TEST_AX_IMM16 }.to },
	/*AA*/unsafe { HandlerTransmuter { from: &GEN_YB_REG_STOSB_M8_AL }.to },
	/*AB*/unsafe { HandlerTransmuter { from: &GEN_YV_REG_STOSW_M16_AX }.to },
	/*AC*/unsafe { HandlerTransmuter { from: &GEN_REG_XB_LODSB_AL_M8 }.to },
	/*AD*/unsafe { HandlerTransmuter { from: &GEN_REG_XV_LODSW_AX_M16 }.to },
	/*AE*/unsafe { HandlerTransmuter { from: &GEN_REG_YB_SCASB_AL_M8 }.to },
	/*AF*/unsafe { HandlerTransmuter { from: &GEN_REG_YV_SCASW_AX_M16 }.to },
	/*B0*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3 }.to },
	/*B1*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3_1 }.to },
	/*B2*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3_2 }.to },
	/*B3*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3_3 }.to },
	/*B4*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3_4 }.to },
	/*B5*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3_5 }.to },
	/*B6*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3_6 }.to },
	/*B7*/unsafe { HandlerTransmuter { from: &GEN_REG_IB3_7 }.to },
	/*B8*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2 }.to },
	/*B9*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2_1 }.to },
	/*BA*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2_2 }.to },
	/*BB*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2_3 }.to },
	/*BC*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2_4 }.to },
	/*BD*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2_5 }.to },
	/*BE*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2_6 }.to },
	/*BF*/unsafe { HandlerTransmuter { from: &GEN_REG_IZ2_7 }.to },
	/*C0*/unsafe { HandlerTransmuter { from: &GEN_GROUP_5 }.to },
	/*C1*/unsafe { HandlerTransmuter { from: &GEN_GROUP_6 }.to },
	/*C2*/unsafe { HandlerTransmuter { from: &GEN_BRANCH_IW_RETNW_IMM16 }.to },
	/*C3*/unsafe { HandlerTransmuter { from: &GEN_BRANCH_SIMPLE_RETNW }.to },
	/*C4*/unsafe { HandlerTransmuter { from: &GEN_VEX3 }.to },
	/*C5*/unsafe { HandlerTransmuter { from: &GEN_VEX2 }.to },
	/*C6*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64 }.to },
	/*C7*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_1 }.to },
	/*C8*/unsafe { HandlerTransmuter { from: &GEN_IW_IB_ENTERW_IMM16_IMM8 }.to },
	/*C9*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE3_LEAVEW }.to },
	/*CA*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_IW_RETFW_IMM16 }.to },
	/*CB*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_A_RETFW }.to },
	/*CC*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_INT3 }.to },
	/*CD*/unsafe { HandlerTransmuter { from: &GEN_IB_INT_IMM8 }.to },
	/*CE*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_34 }.to },
	/*CF*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE2_3_A_IRETW }.to },
	/*D0*/unsafe { HandlerTransmuter { from: &GEN_GROUP_7 }.to },
	/*D1*/unsafe { HandlerTransmuter { from: &GEN_GROUP_8 }.to },
	/*D2*/unsafe { HandlerTransmuter { from: &GEN_GROUP_9 }.to },
	/*D3*/unsafe { HandlerTransmuter { from: &GEN_GROUP_10 }.to },
	/*D4*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_35 }.to },
	/*D5*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_36 }.to },
	/*D6*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_37 }.to },
	/*D7*/unsafe { HandlerTransmuter { from: &GEN_MEM_BX_XLAT_M8 }.to },
	/*D8*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X8 }.to },
	/*D9*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_2 }.to },
	/*DA*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_3 }.to },
	/*DB*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_4 }.to },
	/*DC*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X8_1 }.to },
	/*DD*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X8_2 }.to },
	/*DE*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_5 }.to },
	/*DF*/unsafe { HandlerTransmuter { from: &GEN_GROUP8_X64_6 }.to },
	/*E0*/unsafe { HandlerTransmuter { from: &GEN_JB2_LOOPNE_REL8_16_CX }.to },
	/*E1*/unsafe { HandlerTransmuter { from: &GEN_JB2_LOOPE_REL8_16_CX }.to },
	/*E2*/unsafe { HandlerTransmuter { from: &GEN_JB2_LOOP_REL8_16_CX }.to },
	/*E3*/unsafe { HandlerTransmuter { from: &GEN_JB2_JCXZ_REL8_16 }.to },
	/*E4*/unsafe { HandlerTransmuter { from: &GEN_REG_IB_IN_AL_IMM8 }.to },
	/*E5*/unsafe { HandlerTransmuter { from: &GEN_REG_IB2_IN_AX_IMM8 }.to },
	/*E6*/unsafe { HandlerTransmuter { from: &GEN_IB_REG_OUT_IMM8_AL }.to },
	/*E7*/unsafe { HandlerTransmuter { from: &GEN_IB_REG2_OUT_IMM8_AX }.to },
	/*E8*/unsafe { HandlerTransmuter { from: &GEN_JZ_CALL_REL16 }.to },
	/*E9*/unsafe { HandlerTransmuter { from: &GEN_JZ_JMP_REL16 }.to },
	/*EA*/unsafe { HandlerTransmuter { from: &GEN_BITNESS_38 }.to },
	/*EB*/unsafe { HandlerTransmuter { from: &GEN_JB_JMP_REL8_16 }.to },
	/*EC*/unsafe { HandlerTransmuter { from: &GEN_AL_DX_IN_AL_DX }.to },
	/*ED*/unsafe { HandlerTransmuter { from: &GEN_E_AX_DX_IN_AX_DX }.to },
	/*EE*/unsafe { HandlerTransmuter { from: &GEN_DX_AL_OUT_DX_AL }.to },
	/*EF*/unsafe { HandlerTransmuter { from: &GEN_DX_E_AX_OUT_DX_AX }.to },
	/*F0*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F1*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_INT1 }.to },
	/*F2*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F3*/unsafe { HandlerTransmuter { from: &GEN_INVALID }.to },
	/*F4*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_HLT }.to },
	/*F5*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CMC }.to },
	/*F6*/unsafe { HandlerTransmuter { from: &GEN_GROUP_11 }.to },
	/*F7*/unsafe { HandlerTransmuter { from: &GEN_GROUP_12 }.to },
	/*F8*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CLC }.to },
	/*F9*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_STC }.to },
	/*FA*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CLI }.to },
	/*FB*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_STI }.to },
	/*FC*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_CLD }.to },
	/*FD*/unsafe { HandlerTransmuter { from: &GEN_SIMPLE_STD }.to },
	/*FE*/unsafe { HandlerTransmuter { from: &GEN_GROUP_13 }.to },
	/*FF*/unsafe { HandlerTransmuter { from: &GEN_GROUP_14 }.to },
];

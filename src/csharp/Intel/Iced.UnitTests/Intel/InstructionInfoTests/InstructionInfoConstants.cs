/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#if !NO_INSTR_INFO
using System;
using System.Collections.Generic;
using Iced.Intel;

namespace Iced.UnitTests.Intel.InstructionInfoTests {
	// GENERATOR-BEGIN: MiscConstants
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	static class MiscInstrInfoTestConstants {
		internal const string VMM_prefix = "vmm";
		internal const string XSP = "xsp";
		internal const string XBP = "xbp";
	}
	// GENERATOR-END: MiscConstants

	static class InstructionInfoDicts {
		// GENERATOR-BEGIN: Dicts
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		internal static readonly Dictionary<string, OpAccess> ToAccess = new Dictionary<string, OpAccess>(StringComparer.Ordinal) {
			{ "n", OpAccess.None },
			{ "r", OpAccess.Read },
			{ "cr", OpAccess.CondRead },
			{ "w", OpAccess.Write },
			{ "cw", OpAccess.CondWrite },
			{ "rw", OpAccess.ReadWrite },
			{ "rcw", OpAccess.ReadCondWrite },
			{ "nma", OpAccess.NoMemAccess },
		};
		// GENERATOR-END: Dicts
	}

	// GENERATOR-BEGIN: KeysConstants
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	static class InstructionInfoKeys {
		internal const string IsProtectedMode = "pm";
		internal const string IsPrivileged = "priv";
		internal const string IsSaveRestoreInstruction = "saverestore";
		internal const string IsStackInstruction = "stack";
		internal const string IsSpecial = "special";
		internal const string RflagsRead = "fr";
		internal const string RflagsUndefined = "fu";
		internal const string RflagsWritten = "fw";
		internal const string RflagsCleared = "fc";
		internal const string RflagsSet = "fs";
		internal const string FlowControl = "flow";
		internal const string Op0Access = "op0";
		internal const string Op1Access = "op1";
		internal const string Op2Access = "op2";
		internal const string Op3Access = "op3";
		internal const string Op4Access = "op4";
		internal const string ReadRegister = "r";
		internal const string CondReadRegister = "cr";
		internal const string WriteRegister = "w";
		internal const string CondWriteRegister = "cw";
		internal const string ReadWriteRegister = "rw";
		internal const string ReadCondWriteRegister = "rcw";
		internal const string ReadMemory = "rm";
		internal const string CondReadMemory = "crm";
		internal const string ReadWriteMemory = "rwm";
		internal const string ReadCondWriteMemory = "rcwm";
		internal const string WriteMemory = "wm";
		internal const string CondWriteMemory = "cwm";
		internal const string DecoderOptions = "decopt";
	}
	// GENERATOR-END: KeysConstants

	// GENERATOR-BEGIN: DecoderOptionsConstants
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	static class InstructionInfoDecoderOptions {
		internal const string DecoderOptions_AmdBranches = "amdbr";
		internal const string DecoderOptions_ForceReservedNop = "forcereservednop";
		internal const string DecoderOptions_Umov = "umov";
		internal const string DecoderOptions_Xbts = "xbts";
		internal const string DecoderOptions_Cmpxchg486A = "cmpxchg486a";
		internal const string DecoderOptions_OldFpu = "oldfpu";
		internal const string DecoderOptions_Pcommit = "pcommit";
		internal const string DecoderOptions_Loadall286 = "loadall286";
		internal const string DecoderOptions_Loadall386 = "loadall386";
		internal const string DecoderOptions_Cl1invmb = "cl1invmb";
		internal const string DecoderOptions_MovTr = "movtr";
		internal const string DecoderOptions_Jmpe = "jmpe";
	}
	// GENERATOR-END: DecoderOptionsConstants

	// GENERATOR-BEGIN: RflagsBitsConstants
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	static class RflagsBitsConstants {
		internal const char RflagsBits_AF = 'a';
		internal const char RflagsBits_CF = 'c';
		internal const char RflagsBits_OF = 'o';
		internal const char RflagsBits_PF = 'p';
		internal const char RflagsBits_SF = 's';
		internal const char RflagsBits_ZF = 'z';
		internal const char RflagsBits_IF = 'i';
		internal const char RflagsBits_DF = 'd';
		internal const char RflagsBits_AC = 'A';
	}
	// GENERATOR-END: RflagsBitsConstants
}
#endif

<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFrameworks>netcoreapp2.1;netstandard2.0</TargetFrameworks>

    <Description>x86/x64 instruction decoder, encoder, formatter</Description>
    <Title>$(Description)</Title>
    <Copyright>Copyright (C) 2018 de4dot@gmail.com</Copyright>
    <AssemblyTitle>Iced</AssemblyTitle>
    <AssemblyName>Iced</AssemblyName>
    <PackageId>Iced</PackageId>
    <NeutralLanguage>en-US</NeutralLanguage>
    <Version>1.0.2</Version>
    <InformationalVersion>$(Version)</InformationalVersion>
    <Authors>0xd4d</Authors>
    <PackageIconUrl>https://raw.githubusercontent.com/0xd4d/iced/master/logo.png</PackageIconUrl>
    <PackageProjectUrl>https://github.com/0xd4d/iced</PackageProjectUrl>
    <PackageLicenseUrl>https://github.com/0xd4d/iced/blob/master/COPYING.txt</PackageLicenseUrl>
    <PackageVersion>$(InformationalVersion)</PackageVersion>
    <PackageTags>x86;x64;encoder;decoder;formatter;disassembler</PackageTags>
    <Features>strict</Features>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!--Add support for sourcelink-->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>

    <!-- From the README -->
    <PackageDescription>
High performance x86 (16/32/64-bit) instruction decoder, encoder and formatter.
It can be used for static analysis of x86/x64 binaries, to rewrite code (eg. remove garbage instructions), to relocate code or as a disassembler.

- Supports all Intel and AMD instructions
- The decoder doesn't allocate any memory and is 2x-5x+ faster than other similar libraries written in C or C#
- Small decoded instructions, only 32 bytes
- The formatter supports masm, nasm and gas (AT&amp;T) and there are many options to customize the output
- The encoder can be used to re-encode decoded instructions at any address
- The block encoder encodes a list of instructions and optimizes branches to short, near or 'long' (64-bit: 1 or more instructions)
- API to get instruction info, eg. read/written registers, memory and rflags bits; CPUID feature flag, flow control info, etc
- All instructions are tested (decode, encode, format, instruction info)

License: LGPL v3 or any later version (LGPL = GNU Lesser General Public License)
</PackageDescription>
    <PackageReleaseNotes></PackageReleaseNotes>

    <AssemblyOriginatorKeyFile>..\Iced.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>True</SignAssembly>

    <LangVersion>latest</LangVersion>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\COPYING.txt" Pack="true" PackagePath="COPYING.txt"/>
    <None Include="..\COPYING.LESSER" Pack="true" PackagePath="COPYING.LESSER"/>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0-beta-63127-02" PrivateAssets="All"/>
  </ItemGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DefineConstants>TRACE</DefineConstants>
    <!-- Also disabled in the test project -->
    <DefineConstants>$(DefineConstants);NO_INTEL_FORMATTER</DefineConstants>
  </PropertyGroup>
  <PropertyGroup>
    <DefineConstants Condition=" $(TargetFramework.StartsWith(netcoreapp)) OR ($(TargetFramework.StartsWith(netstandard)) AND '$(TargetFramework)' != 'netstandard2.0') ">$(DefineConstants);HAS_SPAN</DefineConstants>
  </PropertyGroup>

</Project>

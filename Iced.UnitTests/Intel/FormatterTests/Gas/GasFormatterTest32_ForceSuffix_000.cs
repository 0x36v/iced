/*
    Copyright (C) 2018 de4dot@gmail.com

    This file is part of Iced.

    Iced is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Iced is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Iced.  If not, see <https://www.gnu.org/licenses/>.
*/

#if !NO_GAS_FORMATTER && !NO_FORMATTER
using System.Collections.Generic;
using Xunit;

namespace Iced.UnitTests.Intel.FormatterTests.Gas {
	public sealed class GasFormatterTest32_ForceSuffix_000 : FormatterTest {
		[Theory]
		[MemberData(nameof(Format_Data))]
		void Format(int index, InstructionInfo info, string formattedString) => FormatBase(index, info, formattedString, GasFormatterFactory.Create_ForceSuffix());
		public static IEnumerable<object[]> Format_Data => GetFormatData(infos, formattedStrings);

		static readonly InstructionInfo[] infos = InstructionInfos32_000.AllInfos;
		static readonly string[] formattedStrings = new string[InstructionInfos32_000.AllInfos_Length] {
			"pushw es",
			"pushl es",
			"popw es",
			"popl es",
			"pushw cs",
			"pushl cs",
			"pushw ss",
			"pushl ss",
			"popw ss",
			"popl ss",
			"pushw ds",
			"pushl ds",
			"popw ds",
			"popl ds",
			"daa",
			"das",
			"aaa",
			"aas",
			"incw ax",
			"incl eax",
			"incw cx",
			"incl ecx",
			"incw dx",
			"incl edx",
			"incw bx",
			"incl ebx",
			"incw sp",
			"incl esp",
			"incw bp",
			"incl ebp",
			"incw si",
			"incl esi",
			"incw di",
			"incl edi",
			"decw ax",
			"decl eax",
			"decw cx",
			"decl ecx",
			"decw dx",
			"decl edx",
			"decw bx",
			"decl ebx",
			"decw sp",
			"decl esp",
			"decw bp",
			"decl ebp",
			"decw si",
			"decl esi",
			"decw di",
			"decl edi",
			"pushl eax",
			"pushl ecx",
			"pushl edx",
			"pushl ebx",
			"pushl esp",
			"pushl ebp",
			"pushl esi",
			"pushl edi",
			"popl eax",
			"popl ecx",
			"popl edx",
			"popl ebx",
			"popl esp",
			"popl ebp",
			"popl esi",
			"popl edi",
			"pushaw",
			"pushal",
			"popaw",
			"popal",
			"boundw bx,(eax)",
			"boundl ebx,(eax)",
			"arpl si,dx",
			"arpl bx,(eax)",
			"pushl $0x3412a55a",
			"pushl $-0x5b",
			"data16 jo 0x004d",
			"jo 0x8000004c",
			"data16 jno 0x004d",
			"jno 0x8000004c",
			"data16 jb 0x004d",
			"jb 0x8000004c",
			"data16 jae 0x004d",
			"jae 0x8000004c",
			"data16 je 0x004d",
			"je 0x8000004c",
			"data16 jne 0x004d",
			"jne 0x8000004c",
			"data16 jbe 0x004d",
			"jbe 0x8000004c",
			"data16 ja 0x004d",
			"ja 0x8000004c",
			"data16 js 0x004d",
			"js 0x8000004c",
			"data16 jns 0x004d",
			"jns 0x8000004c",
			"data16 jp 0x004d",
			"jp 0x8000004c",
			"data16 jnp 0x004d",
			"jnp 0x8000004c",
			"data16 jl 0x004d",
			"jl 0x8000004c",
			"data16 jge 0x004d",
			"jge 0x8000004c",
			"data16 jle 0x004d",
			"jle 0x8000004c",
			"data16 jg 0x004d",
			"jg 0x8000004c",
			"popl esi",
			"popl (eax)",
			"lcallw $0x7856,$0x3412",
			"lcalll $0xbc9a,$0x78563412",
			"pushfl",
			"popfl",
			"retw $-0x5aa6",
			"retl $-0x5aa6",
			"retw",
			"retl",
			"lesw (eax),bx",
			"lesl (eax),ebx",
			"ldsw (eax),bx",
			"ldsl (eax),ebx",
			"enterl $-0x5aa6,$-0x5a",
			"leavel",
			"into",
			"aam",
			"aad",
			".byte 0x66; loopnew 0x004e",
			"loopnew 0x8000004d",
			".byte 0x66; loopnel 0x004d",
			"loopnel 0x8000004c",
			".byte 0x66; loopew 0x004e",
			"loopew 0x8000004d",
			".byte 0x66; loopel 0x004d",
			"loopel 0x8000004c",
			".byte 0x66; loopw 0x004e",
			"loopw 0x8000004d",
			".byte 0x66; loopl 0x004d",
			"loopl 0x8000004c",
			".byte 0x66; jcxz 0x004e",
			"jcxz 0x8000004d",
			".byte 0x66; jecxz 0x004d",
			"jecxz 0x8000004c",
			"callw 0xa54e",
			"calll 0x255a3407",
			"data16 jmp 0xa54e",
			"jmp 0x255a3407",
			"ljmpw $0x7856,$0x3412",
			"ljmpl $0xbcea,$0x78563412",
			"data16 jmp 0x004d",
			"jmp 0x8000004c",
			"callw *cx",
			"callw *(eax)",
			"calll *ecx",
			"calll *(eax)",
			"jmpw *dx",
			"jmpw *(eax)",
			"jmpl *edx",
			"jmpl *(eax)",
			"pushl esi",
			"pushl (eax)",
			"bndmov bnd2,bnd1",
			"bndmov (eax),bnd1",
			"bndcl edx,bnd1",
			"bndcl (eax),bnd1",
			"bndcu edx,bnd1",
			"bndcu (eax),bnd1",
			"bndmov bnd1,bnd2",
			"bndmov bnd1,(eax)",
			"bndmk (eax),bnd1",
			"bndcn edx,bnd1",
			"bndcn (eax),bnd1",
			"movl cr3,esi",
			"movl db3,esi",
			"movl esi,cr3",
			"movl esi,db3",
			"vmreadl ecx,esi",
			"vmreadl ebx,(eax)",
			"vmwritel esi,ecx",
			"vmwritel (eax),ebx",
			"data16 jo 0xa54f",
			"jo 0xb412a550",
			"data16 jno 0xa54f",
			"jno 0xb412a550",
			"data16 jb 0xa54f",
			"jb 0xb412a550",
			"data16 jae 0xa54f",
			"jae 0xb412a550",
			"data16 je 0xa54f",
			"je 0xb412a550",
			"data16 jne 0xa54f",
			"jne 0xb412a550",
			"data16 jbe 0xa54f",
			"jbe 0xb412a550",
			"data16 ja 0xa54f",
			"ja 0xb412a550",
			"data16 js 0xa54f",
			"js 0xb412a550",
			"data16 jns 0xa54f",
			"jns 0xb412a550",
			"data16 jp 0xa54f",
			"jp 0xb412a550",
			"data16 jnp 0xa54f",
			"jnp 0xb412a550",
			"data16 jl 0xa54f",
			"jl 0xb412a550",
			"data16 jge 0xa54f",
			"jge 0xb412a550",
			"data16 jle 0xa54f",
			"jle 0xb412a550",
			"data16 jg 0xa54f",
			"jg 0xb412a550",
			"pushl fs",
			"popl fs",
			"pushl gs",
			"popl gs",
			"rdpid edx",
			"invept (eax),edx",
			"invvpid (eax),edx",
			"invpcid (eax),edx",
			"salc",
			"pushw $-0x5aa6",
			"pushw $-0x5b",
			"insb dx,(di)",
			"insb dx,(edi)",
			"insw dx,(di)",
			"insw dx,(edi)",
			"insl dx,(di)",
			"insl dx,(edi)",
			"outsb (si),dx",
			"outsb (esi),dx",
			"outsw (si),dx",
			"outsw (esi),dx",
			"outsl (si),dx",
			"outsl (esi),dx",
			"movw si,fs",
			"data16 mov (eax),ds",
			"movl esi,fs",
			"mov (eax),ds",
			"popw si",
			"popw (eax)",
			"xchgw ax,ax",
			"nop",
			"pushfw",
			"popfw",
			"movb 0xf0debc9a,al",
			"addr16 movb 0xf0de,al",
			"movw 0xf0debc9a,ax",
			"addr16 movw 0xf0de,ax",
			"movl 0xf0debc9a,eax",
			"addr16 movl 0xf0de,eax",
			"movb al,0xf0debc9a",
			"addr16 movb al,0xf0de",
			"movw ax,0xf0debc9a",
			"addr16 movw ax,0xf0de",
			"movl eax,0xf0debc9a",
			"addr16 movl eax,0xf0de",
			"movsb (si),(di)",
			"movsb (esi),(edi)",
			"movsw (si),(di)",
			"movsw (esi),(edi)",
			"movsl (si),(di)",
			"movsl (esi),(edi)",
			"cmpsb (di),(si)",
			"cmpsb (edi),(esi)",
			"cmpsw (di),(si)",
			"cmpsw (edi),(esi)",
			"cmpsl (di),(si)",
			"cmpsl (edi),(esi)",
			"stosb al,(di)",
			"stosb al,(edi)",
			"stosw ax,(di)",
			"stosw ax,(edi)",
			"stosl eax,(di)",
			"stosl eax,(edi)",
			"lodsb (si),al",
			"lodsb (esi),al",
			"lodsw (si),ax",
			"lodsw (esi),ax",
			"lodsl (si),eax",
			"lodsl (esi),eax",
			"scasb (di),al",
			"scasb (edi),al",
			"scasw (di),ax",
			"scasw (edi),ax",
			"scasl (di),eax",
			"scasl (edi),eax",
			"data16 xbegin 0x7fffa54f",
			"xbegin 0xb412a550",
			"enterw $-0x5aa6,$-0x5a",
			"leavew",
			"lretw $-0x5aa6",
			"lretl $-0x5aa6",
			"lretw",
			"lretl",
			"iretw",
			"iretl",
			"rolb cl,cl",
			"rolb cl,(eax)",
			"rorb cl,dl",
			"rorb cl,(eax)",
			"rclb cl,bl",
			"rclb cl,(eax)",
			"rcrb cl,ah",
			"rcrb cl,(eax)",
			"shlb cl,ch",
			"shlb cl,(eax)",
			"shrb cl,dh",
			"shrb cl,(eax)",
			"sarb cl,al",
			"sarb cl,(eax)",
			"rolw cl,cx",
			"rolw cl,(eax)",
			"roll cl,ecx",
			"roll cl,(eax)",
			"rorw cl,dx",
			"rorw cl,(eax)",
			"rorl cl,edx",
			"rorl cl,(eax)",
			"rclw cl,bx",
			"rclw cl,(eax)",
			"rcll cl,ebx",
			"rcll cl,(eax)",
			"rcrw cl,sp",
			"rcrw cl,(eax)",
			"rcrl cl,esp",
			"rcrl cl,(eax)",
			"shlw cl,bp",
			"shlw cl,(eax)",
			"shll cl,ebp",
			"shll cl,(eax)",
			"shrw cl,si",
			"shrw cl,(eax)",
			"shrl cl,esi",
			"shrl cl,(eax)",
			"sarw cl,ax",
			"sarw cl,(eax)",
			"sarl cl,eax",
			"sarl cl,(eax)",
			"fldcw (eax)",
			"fnstcw (eax)",
			"fnstsw (eax)",
			"lcallw *(eax)",
			"lcalll *(eax)",
			"ljmpw *(eax)",
			"ljmpl *(eax)",
			"pushw si",
			"pushw (eax)",
			"sgdtw (eax)",
			"sgdtl (eax)",
			"sidtw (eax)",
			"sidtl (eax)",
			"lgdtw (eax)",
			"lgdtl (eax)",
			"lidtw (eax)",
			"lidtl (eax)",
			"larw si,cx",
			"larw (eax),bx",
			"larl esi,ecx",
			"larl (eax),ebx",
			"lslw si,cx",
			"lslw (eax),bx",
			"lsll esi,ecx",
			"lsll (eax),ebx",
			"bndldx (eax),bnd1",
			"bndstx bnd1,(eax)",
			"kmovw k3,k2",
			"kmovw (eax),k1",
			"kmovb k3,k2",
			"kmovb (eax),k1",
			"kmovd k3,k2",
			"kmovd (eax),k1",
			"kmovw k1,(eax)",
			"kmovb k1,(eax)",
			"kmovd k1,(eax)",
			"kmovw ebx,k2",
			"kmovb ebx,k2",
			"kmovd ebx,k2",
			"kmovw k3,edx",
			"kmovb k3,edx",
			"kmovd k3,edx",
			"kortestw k3,k2",
			"kortestq k3,k2",
			"kortestb k3,k2",
			"kortestd k3,k2",
			"ktestw k3,k2",
			"ktestq k3,k2",
			"ktestb k3,k2",
			"ktestd k3,k2",
			"pushw fs",
			"popw fs",
			"shldw cl,cx,si",
			"shldw cl,bx,(eax)",
			"shldl cl,ecx,esi",
			"shldl cl,ebx,(eax)",
			"pushw gs",
			"popw gs",
			"shrdw cl,cx,si",
			"shrdw cl,bx,(eax)",
			"shrdl cl,ecx,esi",
			"shrdl cl,ebx,(eax)",
			"lssw (eax),bx",
			"lssl (eax),ebx",
			"lfsw (eax),bx",
			"lfsl (eax),ebx",
			"lgsw (eax),bx",
			"lgsl (eax),ebx",
			"movzbw dh,cx",
			"movzbw (eax),bx",
			"movzbl dh,ecx",
			"movzbl (eax),ebx",
			"movzww si,cx",
			"movzww (eax),bx",
			"movzwl si,ecx",
			"movzwl (eax),ebx",
			"movsbw dh,cx",
			"movsbw (eax),bx",
			"movsbl dh,ecx",
			"movsbl (eax),ebx",
			"movsww si,cx",
			"movsww (eax),bx",
			"movswl si,ecx",
			"movswl (eax),ebx",
			"cmpxchg8b (eax)",
			"crc32b dh,ecx",
			"crc32b (eax),ebx",
			"crc32w si,ecx",
			"crc32w (eax),ebx",
			"crc32l esi,ecx",
			"crc32l (eax),ebx",
			"addr16 maskmovq mm3,mm2",
			"maskmovq mm3,mm2",
			"addr16 maskmovdqu xmm3,xmm2",
			"maskmovdqu xmm3,xmm2",
			"addr16 vmaskmovdqu xmm3,xmm2",
			"vmaskmovdqu xmm3,xmm2",
			"outsb fs:(esi),dx",
			"outsw fs:(esi),dx",
			"outsl fs:(esi),dx",
			"movsb fs:(esi),es:(edi)",
			"movsw fs:(esi),es:(edi)",
			"movsl fs:(esi),es:(edi)",
			"cmpsb es:(edi),fs:(esi)",
			"cmpsw es:(edi),fs:(esi)",
			"cmpsl es:(edi),fs:(esi)",
			"lodsb fs:(esi),al",
			"lodsw fs:(esi),ax",
			"lodsl fs:(esi),eax",
			"xlatb (bx)",
			"xlatb fs:(ebx)",
			"fs maskmovq mm3,mm2",
			"fs maskmovdqu xmm3,xmm2",
			"fs vmaskmovdqu xmm3,xmm2",
			"xlatb (ebx)",
			"aam $-6",
			"aad $-6",
			"fldenvs (eax)",
			"fldenv (eax)",
			"fnstenvs (eax)",
			"fnstenv (eax)",
			"frstors (eax)",
			"frstor (eax)",
			"fnsaves (eax)",
			"fnsave (eax)",
			"addr16 monitor",
			"monitor",
			"mwait",
			"movb fs:0xf0debc9a,al",
			"addr16 movb fs:0xf0de,al",
			"movw fs:0xf0debc9a,ax",
			"addr16 movw fs:0xf0de,ax",
			"movl fs:0xf0debc9a,eax",
			"addr16 movl fs:0xf0de,eax",
			"movb al,fs:0xf0debc9a",
			"addr16 movb al,fs:0xf0de",
			"movw ax,fs:0xf0debc9a",
			"addr16 movw ax,fs:0xf0de",
			"movl eax,fs:0xf0debc9a",
			"addr16 movl eax,fs:0xf0de",
			"movb (eax),cl",
			"movb -0x12(eax),cl",
			"movb -0x12345678(eax),cl",
			"movb 0xedcba988,cl",
			"movb 0x12(eax),cl",
			"movb 0x12345678(eax),cl",
			"movb 0x12345678,cl",
			"movb (eax,ecx),cl",
			"movb (eax,ecx,2),cl",
			"movb (eax,ecx,4),cl",
			"movb (eax,ecx,8),cl",
			"movb -0x12(eax,ecx),cl",
			"movb -0x12(eax,ecx,2),cl",
			"movb -0x12(eax,ecx,4),cl",
			"movb -0x12(eax,ecx,8),cl",
			"movb 0x12(eax,ecx),cl",
			"movb 0x12(eax,ecx,2),cl",
			"movb 0x12(eax,ecx,4),cl",
			"movb 0x12(eax,ecx,8),cl",
			"movb -0x12345678(eax,ecx),cl",
			"movb -0x12345678(eax,ecx,2),cl",
			"movb -0x12345678(eax,ecx,4),cl",
			"movb -0x12345678(eax,ecx,8),cl",
			"movb 0x12345678(eax,ecx),cl",
			"movb 0x12345678(eax,ecx,2),cl",
			"movb 0x12345678(eax,ecx,4),cl",
			"movb 0x12345678(eax,ecx,8),cl",
			"movb -0x12345678(,ecx),cl",
			"movb -0x12(ebp,ecx,2),cl",
			"movb -0x12345678(ebp,ecx,4),cl",
			"movb -0x12345678(,ecx,8),cl",
			"movb 0x12345678(,ecx),cl",
			"movb 0x12(ebp,ecx,2),cl",
			"movb 0x12345678(ebp,ecx,4),cl",
			"movb 0x12345678(,ecx,8),cl",
			"movb fs:(eax),cl",
			"movb fs:-0x12(eax),cl",
			"movb fs:-0x12345678(eax),cl",
			"movb fs:0xedcba988,cl",
			"movb fs:0x12(eax),cl",
			"movb fs:0x12345678(eax),cl",
			"movb fs:0x12345678,cl",
			"movb fs:(eax,ecx),cl",
			"movb fs:(eax,ecx,2),cl",
			"movb fs:(eax,ecx,4),cl",
			"movb fs:(eax,ecx,8),cl",
			"movb fs:-0x12(eax,ecx),cl",
			"movb fs:-0x12(eax,ecx,2),cl",
			"movb fs:-0x12(eax,ecx,4),cl",
			"movb fs:-0x12(eax,ecx,8),cl",
			"movb fs:0x12(eax,ecx),cl",
			"movb fs:0x12(eax,ecx,2),cl",
			"movb fs:0x12(eax,ecx,4),cl",
			"movb fs:0x12(eax,ecx,8),cl",
			"movb fs:-0x12345678(eax,ecx),cl",
			"movb fs:-0x12345678(eax,ecx,2),cl",
			"movb fs:-0x12345678(eax,ecx,4),cl",
			"movb fs:-0x12345678(eax,ecx,8),cl",
			"movb fs:0x12345678(eax,ecx),cl",
			"movb fs:0x12345678(eax,ecx,2),cl",
			"movb fs:0x12345678(eax,ecx,4),cl",
			"movb fs:0x12345678(eax,ecx,8),cl",
			"movb fs:-0x12345678(,ecx),cl",
			"movb fs:-0x12(ebp,ecx,2),cl",
			"movb fs:-0x12345678(ebp,ecx,4),cl",
			"movb fs:-0x12345678(,ecx,8),cl",
			"movb fs:0x12345678(,ecx),cl",
			"movb fs:0x12(ebp,ecx,2),cl",
			"movb fs:0x12345678(ebp,ecx,4),cl",
			"movb fs:0x12345678(,ecx,8),cl",
			"addr16 vmrun",
			"vmrun",
			"addr16 vmload",
			"vmload",
			"addr16 vmsave",
			"vmsave",
			"addr16 invlpga",
			"invlpga",
			"addr16 monitorx",
			"monitorx",
			"data16 clzero",
			"clzero",
		};
	}
}
#endif

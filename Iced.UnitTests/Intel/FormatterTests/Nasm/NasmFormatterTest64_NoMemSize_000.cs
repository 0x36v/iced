/*
    Copyright (C) 2018-2019 de4dot@gmail.com

    This file is part of Iced.

    Iced is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Iced is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Iced.  If not, see <https://www.gnu.org/licenses/>.
*/

#if !NO_NASM_FORMATTER && !NO_FORMATTER
using System.Collections.Generic;
using Xunit;

namespace Iced.UnitTests.Intel.FormatterTests.Nasm {
	public sealed class NasmFormatterTest64_NoMemSize_000 : FormatterTest {
		[Theory]
		[MemberData(nameof(Format_Data))]
		void Format(int index, InstructionInfo info, string formattedString) => FormatBase(index, info, formattedString, NasmFormatterFactory.Create_NoMemSize());
		public static IEnumerable<object[]> Format_Data => GetFormatData(infos, formattedStrings);

		static readonly InstructionInfo[] infos = InstructionInfos64_000.AllInfos;
		static readonly string[] formattedStrings = new string[InstructionInfos64_000.AllInfos_Length] {
			"add dh,cl",
			"add [rax],bh",
			"add si,cx",
			"add [rax],bx",
			"add esi,ecx",
			"add [rax],ebx",
			"add rsi,rcx",
			"add [rax],rbx",
			"add cl,dh",
			"add bh,[rax]",
			"add cx,si",
			"add bx,[rax]",
			"add ecx,esi",
			"add ebx,[rax]",
			"add rcx,rsi",
			"add rbx,[rax]",
			"add al,0xa5",
			"add ax,0x5aa5",
			"add eax,0x12345aa5",
			"add rax,qword 0xffffffff82345aa5",
			"or dh,cl",
			"or [rax],bh",
			"or si,cx",
			"or [rax],bx",
			"or esi,ecx",
			"or [rax],ebx",
			"or rsi,rcx",
			"or [rax],rbx",
			"or cl,dh",
			"or bh,[rax]",
			"or cx,si",
			"or bx,[rax]",
			"or ecx,esi",
			"or ebx,[rax]",
			"or rcx,rsi",
			"or rbx,[rax]",
			"or al,0xa5",
			"or ax,0x5aa5",
			"or eax,0x12345aa5",
			"or rax,qword 0xffffffff82345aa5",
			"adc dh,cl",
			"adc [rax],bh",
			"adc si,cx",
			"adc [rax],bx",
			"adc esi,ecx",
			"adc [rax],ebx",
			"adc rsi,rcx",
			"adc [rax],rbx",
			"adc cl,dh",
			"adc bh,[rax]",
			"adc cx,si",
			"adc bx,[rax]",
			"adc ecx,esi",
			"adc ebx,[rax]",
			"adc rcx,rsi",
			"adc rbx,[rax]",
			"adc al,0xa5",
			"adc ax,0x5aa5",
			"adc eax,0x12345aa5",
			"adc rax,qword 0xffffffff82345aa5",
			"sbb dh,cl",
			"sbb [rax],bh",
			"sbb si,cx",
			"sbb [rax],bx",
			"sbb esi,ecx",
			"sbb [rax],ebx",
			"sbb rsi,rcx",
			"sbb [rax],rbx",
			"sbb cl,dh",
			"sbb bh,[rax]",
			"sbb cx,si",
			"sbb bx,[rax]",
			"sbb ecx,esi",
			"sbb ebx,[rax]",
			"sbb rcx,rsi",
			"sbb rbx,[rax]",
			"sbb al,0xa5",
			"sbb ax,0x5aa5",
			"sbb eax,0x12345aa5",
			"sbb rax,qword 0xffffffff82345aa5",
			"and dh,cl",
			"and [rax],bh",
			"and si,cx",
			"and [rax],bx",
			"and esi,ecx",
			"and [rax],ebx",
			"and rsi,rcx",
			"and [rax],rbx",
			"and cl,dh",
			"and bh,[rax]",
			"and cx,si",
			"and bx,[rax]",
			"and ecx,esi",
			"and ebx,[rax]",
			"and rcx,rsi",
			"and rbx,[rax]",
			"and al,0xa5",
			"and ax,0x5aa5",
			"and eax,0x12345aa5",
			"and rax,qword 0xffffffff82345aa5",
			"sub dh,cl",
			"sub [rax],bh",
			"sub si,cx",
			"sub [rax],bx",
			"sub esi,ecx",
			"sub [rax],ebx",
			"sub rsi,rcx",
			"sub [rax],rbx",
			"sub cl,dh",
			"sub bh,[rax]",
			"sub cx,si",
			"sub bx,[rax]",
			"sub ecx,esi",
			"sub ebx,[rax]",
			"sub rcx,rsi",
			"sub rbx,[rax]",
			"sub al,0xa5",
			"sub ax,0x5aa5",
			"sub eax,0x12345aa5",
			"sub rax,qword 0xffffffff82345aa5",
			"xor dh,cl",
			"xor [rax],bh",
			"xor si,cx",
			"xor [rax],bx",
			"xor esi,ecx",
			"xor [rax],ebx",
			"xor rsi,rcx",
			"xor [rax],rbx",
			"xor cl,dh",
			"xor bh,[rax]",
			"xor cx,si",
			"xor bx,[rax]",
			"xor ecx,esi",
			"xor ebx,[rax]",
			"xor rcx,rsi",
			"xor rbx,[rax]",
			"xor al,0xa5",
			"xor ax,0x5aa5",
			"xor eax,0x12345aa5",
			"xor rax,qword 0xffffffff82345aa5",
			"cmp dh,cl",
			"cmp [rax],bh",
			"cmp si,cx",
			"cmp [rax],bx",
			"cmp esi,ecx",
			"cmp [rax],ebx",
			"cmp rsi,rcx",
			"cmp [rax],rbx",
			"cmp cl,dh",
			"cmp bh,[rax]",
			"cmp cx,si",
			"cmp bx,[rax]",
			"cmp ecx,esi",
			"cmp ebx,[rax]",
			"cmp rcx,rsi",
			"cmp rbx,[rax]",
			"cmp al,0xa5",
			"cmp ax,0x5aa5",
			"cmp eax,0x12345aa5",
			"cmp rax,qword 0xffffffff82345aa5",
			"push ax",
			"push r8w",
			"push rax",
			"push r8",
			"push cx",
			"push r9w",
			"push rcx",
			"push r9",
			"push dx",
			"push r10w",
			"push rdx",
			"push r10",
			"push bx",
			"push r11w",
			"push rbx",
			"push r11",
			"push sp",
			"push r12w",
			"push rsp",
			"push r12",
			"push bp",
			"push r13w",
			"push rbp",
			"push r13",
			"push si",
			"push r14w",
			"push rsi",
			"push r14",
			"push di",
			"push r15w",
			"push rdi",
			"push r15",
			"pop ax",
			"pop r8w",
			"pop rax",
			"pop r8",
			"pop cx",
			"pop r9w",
			"pop rcx",
			"pop r9",
			"pop dx",
			"pop r10w",
			"pop rdx",
			"pop r10",
			"pop bx",
			"pop r11w",
			"pop rbx",
			"pop r11",
			"pop sp",
			"pop r12w",
			"pop rsp",
			"pop r12",
			"pop bp",
			"pop r13w",
			"pop rbp",
			"pop r13",
			"pop si",
			"pop r14w",
			"pop rsi",
			"pop r14",
			"pop di",
			"pop r15w",
			"pop rdi",
			"pop r15",
			"movsxd cx,si",
			"movsxd bx,word [rax]",
			"movsxd ecx,esi",
			"movsxd ebx,dword [rax]",
			"movsxd rcx,esi",
			"movsxd rbx,dword [rax]",
			"o16 push word 0xa55a",
			"push qword 0xffffffff8412a55a",
			"imul cx,si,word 0x5aa5",
			"imul bx,[rax],word 0xa55a",
			"imul ecx,esi,dword 0x3412a55a",
			"imul ebx,[rax],dword 0x3412a55a",
			"imul rcx,rsi,qword 0xffffffff8412a55a",
			"imul rbx,[rax],qword 0xffffffff8412a55a",
			"o16 push byte 0xffa5",
			"push byte 0xffffffffffffffa5",
			"imul cx,si,byte 0xffa5",
			"imul bx,[rax],byte 0xffa5",
			"imul ecx,esi,byte 0xffffffa5",
			"imul ebx,[rax],byte 0xffffffa5",
			"imul rcx,rsi,byte 0xffffffffffffffa5",
			"imul rbx,[rax],byte 0xffffffffffffffa5",
			"a32 insb",
			"insb",
			"a32 insw",
			"insw",
			"a32 insd",
			"insd",
			"a32 outsb",
			"outsb",
			"a32 outsw",
			"outsw",
			"a32 outsd",
			"outsd",
			"jo 0x800000000000004c",
			"jno 0x800000000000004c",
			"jb 0x800000000000004c",
			"jae 0x800000000000004c",
			"je 0x800000000000004c",
			"jne 0x800000000000004c",
			"jbe 0x800000000000004c",
			"ja 0x800000000000004c",
			"js 0x800000000000004c",
			"jns 0x800000000000004c",
			"jp 0x800000000000004c",
			"jnp 0x800000000000004c",
			"jl 0x800000000000004c",
			"jge 0x800000000000004c",
			"jle 0x800000000000004c",
			"jg 0x800000000000004c",
			"add cl,0x5a",
			"add byte [rax],0x5a",
			"or dl,0xa5",
			"or byte [rax],0xa5",
			"adc bl,0x5a",
			"adc byte [rax],0x5a",
			"sbb ah,0xa5",
			"sbb byte [rax],0xa5",
			"and ch,0x5a",
			"and byte [rax],0x5a",
			"sub dh,0xa5",
			"sub byte [rax],0xa5",
			"xor bh,0x5a",
			"xor byte [rax],0x5a",
			"cmp al,0xa5",
			"cmp byte [rax],0xa5",
			"add cx,0xa55a",
			"add word [rax],0xa55a",
			"add ecx,0x3412a55a",
			"add dword [rax],0x3412a55a",
			"add rcx,qword 0xffffffff8412a55a",
			"add qword [rax],qword 0xffffffff8412a55a",
			"or dx,0x5aa5",
			"or word [rax],0x5aa5",
			"or edx,0xab895aa5",
			"or dword [rax],0xab895aa5",
			"or rdx,qword 0xffffffff8412a55a",
			"or qword [rax],qword 0xffffffff8412a55a",
			"adc bx,0xa55a",
			"adc word [rax],0xa55a",
			"adc ebx,0x3412a55a",
			"adc dword [rax],0x3412a55a",
			"adc rbx,qword 0xffffffff8412a55a",
			"adc qword [rax],qword 0xffffffff8412a55a",
			"sbb sp,0x5aa5",
			"sbb word [rax],0x5aa5",
			"sbb esp,0xab895aa5",
			"sbb dword [rax],0xab895aa5",
			"sbb rsp,qword 0xffffffff8412a55a",
			"sbb qword [rax],qword 0xffffffff8412a55a",
			"and bp,0xa55a",
			"and word [rax],0xa55a",
			"and ebp,0x3412a55a",
			"and dword [rax],0x3412a55a",
			"and rbp,qword 0xffffffff8412a55a",
			"and qword [rax],qword 0xffffffff8412a55a",
			"sub si,0x5aa5",
			"sub word [rax],0x5aa5",
			"sub esi,0xab895aa5",
			"sub dword [rax],0xab895aa5",
			"sub rsi,qword 0xffffffff8412a55a",
			"sub qword [rax],qword 0xffffffff8412a55a",
			"xor di,0xa55a",
			"xor word [rax],0xa55a",
			"xor edi,0x3412a55a",
			"xor dword [rax],0x3412a55a",
			"xor rdi,qword 0xffffffff8412a55a",
			"xor qword [rax],qword 0xffffffff8412a55a",
			"cmp ax,0x5aa5",
			"cmp word [rax],0x5aa5",
			"cmp eax,0xab895aa5",
			"cmp dword [rax],0xab895aa5",
			"cmp r8,qword 0xffffffff8412a55a",
			"cmp qword [rax],qword 0xffffffff8412a55a",
			"add cx,byte 0xffa5",
			"add word [rax],byte 0xffa5",
			"add ecx,byte 0xffffffa5",
			"add dword [rax],byte 0xffffffa5",
			"add rcx,byte 0xffffffffffffffa5",
			"add qword [rax],byte 0xffffffffffffffa5",
			"or dx,byte 0xffa5",
			"or word [rax],byte 0xffa5",
			"or edx,byte 0xffffffa5",
			"or dword [rax],byte 0xffffffa5",
			"or rdx,byte 0xffffffffffffffa5",
			"or qword [rax],byte 0xffffffffffffffa5",
			"adc bx,byte 0xffa5",
			"adc word [rax],byte 0xffa5",
			"adc ebx,byte 0xffffffa5",
			"adc dword [rax],byte 0xffffffa5",
			"adc rbx,byte 0xffffffffffffffa5",
			"adc qword [rax],byte 0xffffffffffffffa5",
			"sbb sp,byte 0xffa5",
			"sbb word [rax],byte 0xffa5",
			"sbb esp,byte 0xffffffa5",
			"sbb dword [rax],byte 0xffffffa5",
			"sbb rsp,byte 0xffffffffffffffa5",
			"sbb qword [rax],byte 0xffffffffffffffa5",
			"and bp,byte 0xffa5",
			"and word [rax],byte 0xffa5",
			"and ebp,byte 0xffffffa5",
			"and dword [rax],byte 0xffffffa5",
			"and rbp,byte 0xffffffffffffffa5",
			"and qword [rax],byte 0xffffffffffffffa5",
			"sub si,byte 0xffa5",
			"sub word [rax],byte 0xffa5",
			"sub esi,byte 0xffffffa5",
			"sub dword [rax],byte 0xffffffa5",
			"sub rsi,byte 0xffffffffffffffa5",
			"sub qword [rax],byte 0xffffffffffffffa5",
			"xor di,byte 0xffa5",
			"xor word [rax],byte 0xffa5",
			"xor edi,byte 0xffffffa5",
			"xor dword [rax],byte 0xffffffa5",
			"xor rdi,byte 0xffffffffffffffa5",
			"xor qword [rax],byte 0xffffffffffffffa5",
			"cmp ax,byte 0xffa5",
			"cmp word [rax],byte 0xffa5",
			"cmp eax,byte 0xffffffa5",
			"cmp dword [rax],byte 0xffffffa5",
			"cmp r8,byte 0xffffffffffffffa5",
			"cmp qword [rax],byte 0xffffffffffffffa5",
			"test dh,cl",
			"test [rax],bh",
			"test si,cx",
			"test [rax],bx",
			"test esi,ecx",
			"test [rax],ebx",
			"test rsi,rcx",
			"test [rax],rbx",
			"xchg cl,dh",
			"xchg bh,[rax]",
			"xchg cx,si",
			"xchg bx,[rax]",
			"xchg ecx,esi",
			"xchg ebx,[rax]",
			"xchg rcx,rsi",
			"xchg rbx,[rax]",
			"mov dh,cl",
			"mov [rax],bh",
			"mov si,cx",
			"mov [rax],bx",
			"mov esi,ecx",
			"mov [rax],ebx",
			"mov rsi,rcx",
			"mov [rax],rbx",
			"mov cl,dh",
			"mov bh,[rax]",
			"mov cx,si",
			"mov bx,[rax]",
			"mov ecx,esi",
			"mov ebx,[rax]",
			"mov rcx,rsi",
			"mov rbx,[rax]",
			"mov si,cs",
			"o16 mov [rax],ds",
			"mov esi,cs",
			"mov [rax],ds",
			"mov rsi,cs",
			"o64 mov [rax],ds",
			"lea bx,[rax]",
			"lea ebx,[rax]",
			"lea rbx,[rax]",
			"mov fs,si",
			"o16 mov ds,[rax]",
			"mov fs,esi",
			"mov ds,[rax]",
			"mov fs,rsi",
			"o64 mov ds,[rax]",
			"pop si",
			"pop word [rax]",
			"pop rsi",
			"pop qword [rax]",
			"xchg ax,ax",
			"xchg r8w,ax",
			"nop",
			"xchg r8d,eax",
			"xchg rax,rax",
			"xchg r8,rax",
			"xchg cx,ax",
			"xchg r9w,ax",
			"xchg ecx,eax",
			"xchg r9d,eax",
			"xchg rcx,rax",
			"xchg r9,rax",
			"xchg dx,ax",
			"xchg r10w,ax",
			"xchg edx,eax",
			"xchg r10d,eax",
			"xchg rdx,rax",
			"xchg r10,rax",
			"xchg bx,ax",
			"xchg r11w,ax",
			"xchg ebx,eax",
			"xchg r11d,eax",
			"xchg rbx,rax",
			"xchg r11,rax",
			"xchg sp,ax",
			"xchg r12w,ax",
			"xchg esp,eax",
			"xchg r12d,eax",
			"xchg rsp,rax",
			"xchg r12,rax",
			"xchg bp,ax",
			"xchg r13w,ax",
			"xchg ebp,eax",
			"xchg r13d,eax",
			"xchg rbp,rax",
			"xchg r13,rax",
			"xchg si,ax",
			"xchg r14w,ax",
			"xchg esi,eax",
			"xchg r14d,eax",
			"xchg rsi,rax",
			"xchg r14,rax",
			"xchg di,ax",
			"xchg r15w,ax",
			"xchg edi,eax",
			"xchg r15d,eax",
			"xchg rdi,rax",
			"xchg r15,rax",
			"pause",
			"cbw",
			"cwde",
			"cdqe",
			"cwd",
			"cdq",
			"cqo",
			"wait",
			"pushfw",
			"pushf",
			"popfw",
			"popf",
			"sahf",
			"lahf",
			"mov al,[qword 0xf0debc9a78563412]",
			"a32 mov al,[0x78563412]",
			"mov ax,[qword 0xf0debc9a78563412]",
			"a32 mov ax,[0x78563412]",
			"mov eax,[qword 0xf0debc9a78563412]",
			"a32 mov eax,[0x78563412]",
			"mov rax,[qword 0xf0debc9a78563412]",
			"a32 mov rax,[0x78563412]",
			"mov [qword 0xf0debc9a78563412],al",
			"a32 mov [0x78563412],al",
			"mov [qword 0xf0debc9a78563412],ax",
			"a32 mov [0x78563412],ax",
			"mov [qword 0xf0debc9a78563412],eax",
			"a32 mov [0x78563412],eax",
			"mov [qword 0xf0debc9a78563412],rax",
			"a32 mov [0x78563412],rax",
			"a32 movsb",
			"movsb",
			"a32 movsw",
			"movsw",
			"a32 movsd",
			"movsd",
			"a32 movsq",
			"movsq",
			"a32 cmpsb",
			"cmpsb",
			"a32 cmpsw",
			"cmpsw",
			"a32 cmpsd",
			"cmpsd",
			"a32 cmpsq",
			"cmpsq",
			"test al,0xa5",
			"test ax,0x5aa5",
			"test eax,0x12345aa5",
			"test rax,0xffffffff82345aa5",
			"a32 stosb",
			"stosb",
			"a32 stosw",
			"stosw",
			"a32 stosd",
			"stosd",
			"a32 stosq",
			"stosq",
			"a32 lodsb",
			"lodsb",
			"a32 lodsw",
			"lodsw",
			"a32 lodsd",
			"lodsd",
			"a32 lodsq",
			"lodsq",
			"a32 scasb",
			"scasb",
			"a32 scasw",
			"scasw",
			"a32 scasd",
			"scasd",
			"a32 scasq",
			"scasq",
			"mov al,0x5a",
			"mov r8b,0x5a",
			"mov cl,0xa5",
			"mov r9b,0xa5",
			"mov dl,0x5a",
			"mov r10b,0x5a",
			"mov bl,0xa5",
			"mov r11b,0xa5",
			"mov ah,0x5a",
			"mov spl,0x5a",
			"mov r12b,0x5a",
			"mov ch,0xa5",
			"mov bpl,0xa5",
			"mov r13b,0xa5",
			"mov dh,0x5a",
			"mov sil,0x5a",
			"mov r14b,0x5a",
			"mov bh,0xa5",
			"mov dil,0xa5",
			"mov r15b,0xa5",
			"mov ax,0xa55a",
			"mov r8w,0xa55a",
			"mov eax,0x3412a55a",
			"mov r8d,0x3412a55a",
			"mov rax,0x3412a55a37261504",
			"mov r8,0x3412a55a37261504",
			"mov cx,0x5aa5",
			"mov r9w,0x5aa5",
			"mov ecx,0x78565aa5",
			"mov r9d,0x78565aa5",
			"mov rcx,0x78565aa537261504",
			"mov r9,0x78565aa537261504",
			"mov dx,0xa55a",
			"mov r10w,0xa55a",
			"mov edx,0x3412a55a",
			"mov r10d,0x3412a55a",
			"mov rdx,0x3412a55a37261504",
			"mov r10,0x3412a55a37261504",
			"mov bx,0x5aa5",
			"mov r11w,0x5aa5",
			"mov ebx,0x78565aa5",
			"mov r11d,0x78565aa5",
			"mov rbx,0x78565aa537261504",
			"mov r11,0x78565aa537261504",
			"mov sp,0xa55a",
			"mov r12w,0xa55a",
			"mov esp,0x3412a55a",
			"mov r12d,0x3412a55a",
			"mov rsp,0x3412a55a37261504",
			"mov r12,0x3412a55a37261504",
			"mov bp,0x5aa5",
			"mov r13w,0x5aa5",
			"mov ebp,0x78565aa5",
			"mov r13d,0x78565aa5",
			"mov rbp,0x78565aa537261504",
			"mov r13,0x78565aa537261504",
			"mov si,0xa55a",
			"mov r14w,0xa55a",
			"mov esi,0x3412a55a",
			"mov r14d,0x3412a55a",
			"mov rsi,0x3412a55a37261504",
			"mov r14,0x3412a55a37261504",
			"mov di,0x5aa5",
			"mov r15w,0x5aa5",
			"mov edi,0x78565aa5",
			"mov r15d,0x78565aa5",
			"mov rdi,0x78565aa537261504",
			"mov r15,0x78565aa537261504",
			"rol cl,0x5a",
			"rol byte [rax],0x5a",
			"ror dl,0xa5",
			"ror byte [rax],0xa5",
			"rcl bl,0x5a",
			"rcl byte [rax],0x5a",
			"rcr ah,0xa5",
			"rcr byte [rax],0xa5",
			"shl ch,0x5a",
			"shl byte [rax],0x5a",
			"shr dh,0xa5",
			"shr byte [rax],0xa5",
			"sar al,0xa5",
			"sar byte [rax],0xa5",
			"rol cx,0x5a",
			"rol word [rax],0x5a",
			"rol ecx,0x5a",
			"rol dword [rax],0x5a",
			"rol rcx,0x5a",
			"rol qword [rax],0x5a",
			"ror dx,0xa5",
			"ror word [rax],0xa5",
			"ror edx,0xa5",
			"ror dword [rax],0xa5",
			"ror rdx,0xa5",
			"ror qword [rax],0xa5",
			"rcl bx,0x5a",
			"rcl word [rax],0x5a",
			"rcl ebx,0x5a",
			"rcl dword [rax],0x5a",
			"rcl rbx,0x5a",
			"rcl qword [rax],0x5a",
			"rcr sp,0xa5",
			"rcr word [rax],0xa5",
			"rcr esp,0xa5",
			"rcr dword [rax],0xa5",
			"rcr rsp,0xa5",
			"rcr qword [rax],0xa5",
			"shl bp,0x5a",
			"shl word [rax],0x5a",
			"shl ebp,0x5a",
			"shl dword [rax],0x5a",
			"shl rbp,0x5a",
			"shl qword [rax],0x5a",
			"shr si,0xa5",
			"shr word [rax],0xa5",
			"shr esi,0xa5",
			"shr dword [rax],0xa5",
			"shr rsi,0xa5",
			"shr qword [rax],0xa5",
			"sar ax,0xa5",
			"sar word [rax],0xa5",
			"sar eax,0xa5",
			"sar dword [rax],0xa5",
			"sar r8,0xa5",
			"sar qword [rax],0xa5",
			"ret 0xa55a",
			"ret",
			"mov cl,0x5a",
			"mov byte [rax],0x5a",
			"xabort 0x5a",
			"mov cx,0xa55a",
			"mov word [rax],0xa55a",
			"mov ecx,0x3412a55a",
			"mov dword [rax],0x3412a55a",
			"mov rcx,dword 0xffffffff8412a55a",
			"mov qword [rax],qword 0xffffffff8412a55a",
			"o16 xbegin 0x7fffffffffffa54f",
			"xbegin 0x800000003412a550",
			"o64 xbegin 0x800000003412a551",
			"o16 enter 0xa55a,0xa6",
			"enter 0xa55a,0xa6",
			"o16 leave",
			"leave",
			"retfw 0xa55a",
			"retf 0xa55a",
			"retfq 0xa55a",
			"retfw",
			"retf",
			"retfq",
			"int3",
			"int 0x5a",
			"iretw",
			"iret",
			"iretq",
			"rol cl,1",
			"rol byte [rax],1",
			"ror dl,1",
			"ror byte [rax],1",
			"rcl bl,1",
			"rcl byte [rax],1",
			"rcr ah,1",
			"rcr byte [rax],1",
			"shl ch,1",
			"shl byte [rax],1",
			"shr dh,1",
			"shr byte [rax],1",
			"sar al,1",
			"sar byte [rax],1",
			"rol cx,1",
			"rol word [rax],1",
			"rol ecx,1",
			"rol dword [rax],1",
			"rol rcx,1",
			"rol qword [rax],1",
			"ror dx,1",
			"ror word [rax],1",
			"ror edx,1",
			"ror dword [rax],1",
			"ror rdx,1",
			"ror qword [rax],1",
			"rcl bx,1",
			"rcl word [rax],1",
			"rcl ebx,1",
			"rcl dword [rax],1",
			"rcl rbx,1",
			"rcl qword [rax],1",
			"rcr sp,1",
			"rcr word [rax],1",
			"rcr esp,1",
			"rcr dword [rax],1",
			"rcr rsp,1",
			"rcr qword [rax],1",
			"shl bp,1",
			"shl word [rax],1",
			"shl ebp,1",
			"shl dword [rax],1",
			"shl rbp,1",
			"shl qword [rax],1",
			"shr si,1",
			"shr word [rax],1",
			"shr esi,1",
			"shr dword [rax],1",
			"shr rsi,1",
			"shr qword [rax],1",
			"sar ax,1",
			"sar word [rax],1",
			"sar eax,1",
			"sar dword [rax],1",
			"sar r8,1",
			"sar qword [rax],1",
			"rol cl,cl",
			"rol byte [rax],cl",
			"ror dl,cl",
			"ror byte [rax],cl",
			"rcl bl,cl",
			"rcl byte [rax],cl",
			"rcr ah,cl",
			"rcr byte [rax],cl",
			"shl ch,cl",
			"shl byte [rax],cl",
			"shr dh,cl",
			"shr byte [rax],cl",
			"sar al,cl",
			"sar byte [rax],cl",
			"rol cx,cl",
			"rol word [rax],cl",
			"rol ecx,cl",
			"rol dword [rax],cl",
			"rol rcx,cl",
			"rol qword [rax],cl",
			"ror dx,cl",
			"ror word [rax],cl",
			"ror edx,cl",
			"ror dword [rax],cl",
			"ror rdx,cl",
			"ror qword [rax],cl",
			"rcl bx,cl",
			"rcl word [rax],cl",
			"rcl ebx,cl",
			"rcl dword [rax],cl",
			"rcl rbx,cl",
			"rcl qword [rax],cl",
			"rcr sp,cl",
			"rcr word [rax],cl",
			"rcr esp,cl",
			"rcr dword [rax],cl",
			"rcr rsp,cl",
			"rcr qword [rax],cl",
			"shl bp,cl",
			"shl word [rax],cl",
			"shl ebp,cl",
			"shl dword [rax],cl",
			"shl rbp,cl",
			"shl qword [rax],cl",
			"shr si,cl",
			"shr word [rax],cl",
			"shr esi,cl",
			"shr dword [rax],cl",
			"shr rsi,cl",
			"shr qword [rax],cl",
			"sar ax,cl",
			"sar word [rax],cl",
			"sar eax,cl",
			"sar dword [rax],cl",
			"sar r8,cl",
			"sar qword [rax],cl",
			"xlatb",
			"fadd dword [rax]",
			"fmul dword [rax]",
			"fcom dword [rax]",
			"fcomp dword [rax]",
			"fsub dword [rax]",
			"fsubr dword [rax]",
			"fdiv dword [rax]",
			"fdivr dword [rax]",
			"fadd st3",
			"fmul st3",
			"fcom st3",
			"fcomp st3",
			"fsub st3",
			"fsubr st3",
			"fdiv st3",
			"fdivr st3",
			"fld dword [rax]",
			"fst dword [rax]",
			"fstp dword [rax]",
			"o16 fldenv [rax]",
			"fldenv [rax]",
			"fldcw [rax]",
			"o16 fnstenv [rax]",
			"fnstenv [rax]",
			"fnstcw [rax]",
			"fld st3",
			"fxch st3",
			"fnop",
			"fchs",
			"fabs",
			"ftst",
			"fxam",
			"fld1",
			"fldl2t",
			"fldl2e",
			"fldpi",
			"fldlg2",
			"fldln2",
			"fldz",
			"f2xm1",
			"fyl2x",
			"fptan",
			"fpatan",
			"fxtract",
			"fprem1",
			"fdecstp",
			"fincstp",
			"fprem",
			"fyl2xp1",
			"fsqrt",
			"fsincos",
			"frndint",
			"fscale",
			"fsin",
			"fcos",
			"fiadd dword [rax]",
			"fimul dword [rax]",
			"ficom dword [rax]",
			"ficomp dword [rax]",
			"fisub dword [rax]",
			"fisubr dword [rax]",
			"fidiv dword [rax]",
			"fidivr dword [rax]",
			"fcmovb st3",
			"fcmove st3",
			"fcmovbe st3",
			"fcmovu st3",
			"fucompp",
			"fild dword [rax]",
			"fisttp dword [rax]",
			"fist dword [rax]",
			"fistp dword [rax]",
			"fld tword [rax]",
			"fstp tword [rax]",
			"fcmovnb st3",
			"fcmovne st3",
			"fcmovnbe st3",
			"fcmovnu st3",
			"fnclex",
			"fninit",
			"fucomi st3",
			"fcomi st3",
			"fadd qword [rax]",
			"fmul qword [rax]",
			"fcom qword [rax]",
			"fcomp qword [rax]",
			"fsub qword [rax]",
			"fsubr qword [rax]",
			"fdiv qword [rax]",
			"fdivr qword [rax]",
			"fadd to st3",
			"fmul to st3",
			"fsubr to st3",
			"fsub to st3",
			"fdivr to st3",
			"fdiv to st3",
			"fld qword [rax]",
			"fisttp qword [rax]",
			"fst qword [rax]",
			"fstp qword [rax]",
			"o16 frstor [rax]",
			"frstor [rax]",
			"o16 fnsave [rax]",
			"fnsave [rax]",
			"fnstsw [rax]",
			"ffree st3",
			"fst st3",
			"fstp st3",
			"fucom st3",
			"fucomp st3",
			"fiadd word [rax]",
			"fimul word [rax]",
			"ficom word [rax]",
			"ficomp word [rax]",
			"fisub word [rax]",
			"fisubr word [rax]",
			"fidiv word [rax]",
			"fidivr word [rax]",
			"faddp st3",
			"fmulp st3",
			"fcompp",
			"fsubrp st3",
			"fsubp st3",
			"fdivrp st3",
			"fdivp st3",
			"fild word [rax]",
			"fisttp word [rax]",
			"fist word [rax]",
			"fistp word [rax]",
			"fbld tword [rax]",
			"fild qword [rax]",
			"fbstp tword [rax]",
			"fistp qword [rax]",
			"fnstsw ax",
			"fucomip st3",
			"fcomip st3",
			"o16 loopne 0x004e,ecx",
			"loopne 0x800000000000004d,ecx",
			"o16 loopne 0x004d",
			"loopne 0x800000000000004c",
			"o16 loope 0x004e,ecx",
			"loope 0x800000000000004d,ecx",
			"o16 loope 0x004d",
			"loope 0x800000000000004c",
			"o16 loop 0x004e,ecx",
			"loop 0x800000000000004d,ecx",
			"o16 loop 0x004d",
			"loop 0x800000000000004c",
			"o16 jecxz 0x004e",
			"jecxz 0x800000000000004d",
			"o16 jrcxz 0x004d",
			"jrcxz 0x800000000000004c",
			"in al,0x5a",
			"in ax,0x5a",
			"in eax,0x5a",
			"out 0x5a,al",
			"out 0x5a,ax",
			"out 0x5a,eax",
			"call 0x7fffffffa55a3407",
			"jmp 0x7fffffffa55a3407",
			"jmp 0x800000000000004c",
			"in al,dx",
			"in ax,dx",
			"in eax,dx",
			"out dx,al",
			"out dx,ax",
			"out dx,eax",
			"int1",
			"hlt",
			"cmc",
			"test cl,0x5a",
			"test byte [rax],0x5a",
			"not cl",
			"not byte [rax]",
			"neg dh",
			"neg byte [rax]",
			"mul ch",
			"mul byte [rax]",
			"imul dh",
			"imul byte [rax]",
			"div bh",
			"div byte [rax]",
			"idiv al",
		};
	}
}
#endif

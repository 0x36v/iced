/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#if !NO_MASM_FORMATTER && !NO_FORMATTER
using System.Collections.Generic;
using Xunit;

namespace Iced.UnitTests.Intel.FormatterTests.Masm {
	public sealed class MasmFormatterTest64_NoMemSize_000 : FormatterTest {
		[Theory]
		[MemberData(nameof(Format_Data))]
		void Format(int index, InstructionInfo info, string formattedString) => FormatBase(index, info, formattedString, MasmFormatterFactory.Create_NoMemSize());
		public static IEnumerable<object[]> Format_Data => GetFormatData(infos, formattedStrings);

		static readonly InstructionInfo[] infos = InstructionInfos64_000.AllInfos;
		static readonly string[] formattedStrings = new string[InstructionInfos64_000.AllInfos_Length] {
			"add dh,cl",
			"add [rax],bh",
			"add si,cx",
			"add [rax],bx",
			"add esi,ecx",
			"add [rax],ebx",
			"add rsi,rcx",
			"add [rax],rbx",
			"add cl,dh",
			"add bh,[rax]",
			"add cx,si",
			"add bx,[rax]",
			"add ecx,esi",
			"add ebx,[rax]",
			"add rcx,rsi",
			"add rbx,[rax]",
			"add al,0A5h",
			"add ax,5AA5h",
			"add eax,12345AA5h",
			"add rax,0FFFFFFFF82345AA5h",
			"or dh,cl",
			"or [rax],bh",
			"or si,cx",
			"or [rax],bx",
			"or esi,ecx",
			"or [rax],ebx",
			"or rsi,rcx",
			"or [rax],rbx",
			"or cl,dh",
			"or bh,[rax]",
			"or cx,si",
			"or bx,[rax]",
			"or ecx,esi",
			"or ebx,[rax]",
			"or rcx,rsi",
			"or rbx,[rax]",
			"or al,0A5h",
			"or ax,5AA5h",
			"or eax,12345AA5h",
			"or rax,0FFFFFFFF82345AA5h",
			"adc dh,cl",
			"adc [rax],bh",
			"adc si,cx",
			"adc [rax],bx",
			"adc esi,ecx",
			"adc [rax],ebx",
			"adc rsi,rcx",
			"adc [rax],rbx",
			"adc cl,dh",
			"adc bh,[rax]",
			"adc cx,si",
			"adc bx,[rax]",
			"adc ecx,esi",
			"adc ebx,[rax]",
			"adc rcx,rsi",
			"adc rbx,[rax]",
			"adc al,0A5h",
			"adc ax,5AA5h",
			"adc eax,12345AA5h",
			"adc rax,0FFFFFFFF82345AA5h",
			"sbb dh,cl",
			"sbb [rax],bh",
			"sbb si,cx",
			"sbb [rax],bx",
			"sbb esi,ecx",
			"sbb [rax],ebx",
			"sbb rsi,rcx",
			"sbb [rax],rbx",
			"sbb cl,dh",
			"sbb bh,[rax]",
			"sbb cx,si",
			"sbb bx,[rax]",
			"sbb ecx,esi",
			"sbb ebx,[rax]",
			"sbb rcx,rsi",
			"sbb rbx,[rax]",
			"sbb al,0A5h",
			"sbb ax,5AA5h",
			"sbb eax,12345AA5h",
			"sbb rax,0FFFFFFFF82345AA5h",
			"and dh,cl",
			"and [rax],bh",
			"and si,cx",
			"and [rax],bx",
			"and esi,ecx",
			"and [rax],ebx",
			"and rsi,rcx",
			"and [rax],rbx",
			"and cl,dh",
			"and bh,[rax]",
			"and cx,si",
			"and bx,[rax]",
			"and ecx,esi",
			"and ebx,[rax]",
			"and rcx,rsi",
			"and rbx,[rax]",
			"and al,0A5h",
			"and ax,5AA5h",
			"and eax,12345AA5h",
			"and rax,0FFFFFFFF82345AA5h",
			"sub dh,cl",
			"sub [rax],bh",
			"sub si,cx",
			"sub [rax],bx",
			"sub esi,ecx",
			"sub [rax],ebx",
			"sub rsi,rcx",
			"sub [rax],rbx",
			"sub cl,dh",
			"sub bh,[rax]",
			"sub cx,si",
			"sub bx,[rax]",
			"sub ecx,esi",
			"sub ebx,[rax]",
			"sub rcx,rsi",
			"sub rbx,[rax]",
			"sub al,0A5h",
			"sub ax,5AA5h",
			"sub eax,12345AA5h",
			"sub rax,0FFFFFFFF82345AA5h",
			"xor dh,cl",
			"xor [rax],bh",
			"xor si,cx",
			"xor [rax],bx",
			"xor esi,ecx",
			"xor [rax],ebx",
			"xor rsi,rcx",
			"xor [rax],rbx",
			"xor cl,dh",
			"xor bh,[rax]",
			"xor cx,si",
			"xor bx,[rax]",
			"xor ecx,esi",
			"xor ebx,[rax]",
			"xor rcx,rsi",
			"xor rbx,[rax]",
			"xor al,0A5h",
			"xor ax,5AA5h",
			"xor eax,12345AA5h",
			"xor rax,0FFFFFFFF82345AA5h",
			"cmp dh,cl",
			"cmp [rax],bh",
			"cmp si,cx",
			"cmp [rax],bx",
			"cmp esi,ecx",
			"cmp [rax],ebx",
			"cmp rsi,rcx",
			"cmp [rax],rbx",
			"cmp cl,dh",
			"cmp bh,[rax]",
			"cmp cx,si",
			"cmp bx,[rax]",
			"cmp ecx,esi",
			"cmp ebx,[rax]",
			"cmp rcx,rsi",
			"cmp rbx,[rax]",
			"cmp al,0A5h",
			"cmp ax,5AA5h",
			"cmp eax,12345AA5h",
			"cmp rax,0FFFFFFFF82345AA5h",
			"push ax",
			"push r8w",
			"push rax",
			"push r8",
			"push cx",
			"push r9w",
			"push rcx",
			"push r9",
			"push dx",
			"push r10w",
			"push rdx",
			"push r10",
			"push bx",
			"push r11w",
			"push rbx",
			"push r11",
			"push sp",
			"push r12w",
			"push rsp",
			"push r12",
			"push bp",
			"push r13w",
			"push rbp",
			"push r13",
			"push si",
			"push r14w",
			"push rsi",
			"push r14",
			"push di",
			"push r15w",
			"push rdi",
			"push r15",
			"pop ax",
			"pop r8w",
			"pop rax",
			"pop r8",
			"pop cx",
			"pop r9w",
			"pop rcx",
			"pop r9",
			"pop dx",
			"pop r10w",
			"pop rdx",
			"pop r10",
			"pop bx",
			"pop r11w",
			"pop rbx",
			"pop r11",
			"pop sp",
			"pop r12w",
			"pop rsp",
			"pop r12",
			"pop bp",
			"pop r13w",
			"pop rbp",
			"pop r13",
			"pop si",
			"pop r14w",
			"pop rsi",
			"pop r14",
			"pop di",
			"pop r15w",
			"pop rdi",
			"pop r15",
			"movsxd cx,si",
			"movsxd bx,word ptr [rax]",
			"movsxd ecx,esi",
			"movsxd ebx,dword ptr [rax]",
			"movsxd rcx,esi",
			"movsxd rbx,dword ptr [rax]",
			"pushw 0A55Ah",
			"push 0FFFFFFFF8412A55Ah",
			"imul cx,si,5AA5h",
			"imul bx,[rax],0A55Ah",
			"imul ecx,esi,3412A55Ah",
			"imul ebx,[rax],3412A55Ah",
			"imul rcx,rsi,0FFFFFFFF8412A55Ah",
			"imul rbx,[rax],0FFFFFFFF8412A55Ah",
			"pushw 0FFA5h",
			"push 0FFFFFFFFFFFFFFA5h",
			"imul cx,si,0FFA5h",
			"imul bx,[rax],0FFA5h",
			"imul ecx,esi,0FFFFFFA5h",
			"imul ebx,[rax],0FFFFFFA5h",
			"imul rcx,rsi,0FFFFFFFFFFFFFFA5h",
			"imul rbx,[rax],0FFFFFFFFFFFFFFA5h",
			"ins byte ptr [edi],dx",
			"insb",
			"ins word ptr [edi],dx",
			"insw",
			"ins dword ptr [edi],dx",
			"insd",
			"outs dx,byte ptr [esi]",
			"outsb",
			"outs dx,word ptr [esi]",
			"outsw",
			"outs dx,dword ptr [esi]",
			"outsd",
			"jo 800000000000004Ch",
			"jno 800000000000004Ch",
			"jb 800000000000004Ch",
			"jae 800000000000004Ch",
			"je 800000000000004Ch",
			"jne 800000000000004Ch",
			"jbe 800000000000004Ch",
			"ja 800000000000004Ch",
			"js 800000000000004Ch",
			"jns 800000000000004Ch",
			"jp 800000000000004Ch",
			"jnp 800000000000004Ch",
			"jl 800000000000004Ch",
			"jge 800000000000004Ch",
			"jle 800000000000004Ch",
			"jg 800000000000004Ch",
			"add cl,5Ah",
			"add byte ptr [rax],5Ah",
			"or dl,0A5h",
			"or byte ptr [rax],0A5h",
			"adc bl,5Ah",
			"adc byte ptr [rax],5Ah",
			"sbb ah,0A5h",
			"sbb byte ptr [rax],0A5h",
			"and ch,5Ah",
			"and byte ptr [rax],5Ah",
			"sub dh,0A5h",
			"sub byte ptr [rax],0A5h",
			"xor bh,5Ah",
			"xor byte ptr [rax],5Ah",
			"cmp al,0A5h",
			"cmp byte ptr [rax],0A5h",
			"add cx,0A55Ah",
			"add word ptr [rax],0A55Ah",
			"add ecx,3412A55Ah",
			"add dword ptr [rax],3412A55Ah",
			"add rcx,0FFFFFFFF8412A55Ah",
			"add qword ptr [rax],0FFFFFFFF8412A55Ah",
			"or dx,5AA5h",
			"or word ptr [rax],5AA5h",
			"or edx,0AB895AA5h",
			"or dword ptr [rax],0AB895AA5h",
			"or rdx,0FFFFFFFF8412A55Ah",
			"or qword ptr [rax],0FFFFFFFF8412A55Ah",
			"adc bx,0A55Ah",
			"adc word ptr [rax],0A55Ah",
			"adc ebx,3412A55Ah",
			"adc dword ptr [rax],3412A55Ah",
			"adc rbx,0FFFFFFFF8412A55Ah",
			"adc qword ptr [rax],0FFFFFFFF8412A55Ah",
			"sbb sp,5AA5h",
			"sbb word ptr [rax],5AA5h",
			"sbb esp,0AB895AA5h",
			"sbb dword ptr [rax],0AB895AA5h",
			"sbb rsp,0FFFFFFFF8412A55Ah",
			"sbb qword ptr [rax],0FFFFFFFF8412A55Ah",
			"and bp,0A55Ah",
			"and word ptr [rax],0A55Ah",
			"and ebp,3412A55Ah",
			"and dword ptr [rax],3412A55Ah",
			"and rbp,0FFFFFFFF8412A55Ah",
			"and qword ptr [rax],0FFFFFFFF8412A55Ah",
			"sub si,5AA5h",
			"sub word ptr [rax],5AA5h",
			"sub esi,0AB895AA5h",
			"sub dword ptr [rax],0AB895AA5h",
			"sub rsi,0FFFFFFFF8412A55Ah",
			"sub qword ptr [rax],0FFFFFFFF8412A55Ah",
			"xor di,0A55Ah",
			"xor word ptr [rax],0A55Ah",
			"xor edi,3412A55Ah",
			"xor dword ptr [rax],3412A55Ah",
			"xor rdi,0FFFFFFFF8412A55Ah",
			"xor qword ptr [rax],0FFFFFFFF8412A55Ah",
			"cmp ax,5AA5h",
			"cmp word ptr [rax],5AA5h",
			"cmp eax,0AB895AA5h",
			"cmp dword ptr [rax],0AB895AA5h",
			"cmp r8,0FFFFFFFF8412A55Ah",
			"cmp qword ptr [rax],0FFFFFFFF8412A55Ah",
			"add cx,0FFA5h",
			"add word ptr [rax],0FFA5h",
			"add ecx,0FFFFFFA5h",
			"add dword ptr [rax],0FFFFFFA5h",
			"add rcx,0FFFFFFFFFFFFFFA5h",
			"add qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"or dx,0FFA5h",
			"or word ptr [rax],0FFA5h",
			"or edx,0FFFFFFA5h",
			"or dword ptr [rax],0FFFFFFA5h",
			"or rdx,0FFFFFFFFFFFFFFA5h",
			"or qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"adc bx,0FFA5h",
			"adc word ptr [rax],0FFA5h",
			"adc ebx,0FFFFFFA5h",
			"adc dword ptr [rax],0FFFFFFA5h",
			"adc rbx,0FFFFFFFFFFFFFFA5h",
			"adc qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"sbb sp,0FFA5h",
			"sbb word ptr [rax],0FFA5h",
			"sbb esp,0FFFFFFA5h",
			"sbb dword ptr [rax],0FFFFFFA5h",
			"sbb rsp,0FFFFFFFFFFFFFFA5h",
			"sbb qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"and bp,0FFA5h",
			"and word ptr [rax],0FFA5h",
			"and ebp,0FFFFFFA5h",
			"and dword ptr [rax],0FFFFFFA5h",
			"and rbp,0FFFFFFFFFFFFFFA5h",
			"and qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"sub si,0FFA5h",
			"sub word ptr [rax],0FFA5h",
			"sub esi,0FFFFFFA5h",
			"sub dword ptr [rax],0FFFFFFA5h",
			"sub rsi,0FFFFFFFFFFFFFFA5h",
			"sub qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"xor di,0FFA5h",
			"xor word ptr [rax],0FFA5h",
			"xor edi,0FFFFFFA5h",
			"xor dword ptr [rax],0FFFFFFA5h",
			"xor rdi,0FFFFFFFFFFFFFFA5h",
			"xor qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"cmp ax,0FFA5h",
			"cmp word ptr [rax],0FFA5h",
			"cmp eax,0FFFFFFA5h",
			"cmp dword ptr [rax],0FFFFFFA5h",
			"cmp r8,0FFFFFFFFFFFFFFA5h",
			"cmp qword ptr [rax],0FFFFFFFFFFFFFFA5h",
			"test cl,dh",
			"test bh,[rax]",
			"test cx,si",
			"test bx,[rax]",
			"test ecx,esi",
			"test ebx,[rax]",
			"test rcx,rsi",
			"test rbx,[rax]",
			"xchg cl,dh",
			"xchg bh,[rax]",
			"xchg cx,si",
			"xchg bx,[rax]",
			"xchg ecx,esi",
			"xchg ebx,[rax]",
			"xchg rcx,rsi",
			"xchg rbx,[rax]",
			"mov dh,cl",
			"mov [rax],bh",
			"mov si,cx",
			"mov [rax],bx",
			"mov esi,ecx",
			"mov [rax],ebx",
			"mov rsi,rcx",
			"mov [rax],rbx",
			"mov cl,dh",
			"mov bh,[rax]",
			"mov cx,si",
			"mov bx,[rax]",
			"mov ecx,esi",
			"mov ebx,[rax]",
			"mov rcx,rsi",
			"mov rbx,[rax]",
			"mov si,cs",
			"mov [rax],ds",
			"mov esi,cs",
			"mov [rax],ds",
			"mov rsi,cs",
			"mov [rax],ds",
			"lea bx,[rax]",
			"lea ebx,[rax]",
			"lea rbx,[rax]",
			"mov fs,si",
			"mov ds,[rax]",
			"mov fs,esi",
			"mov ds,[rax]",
			"mov fs,rsi",
			"mov ds,[rax]",
			"pop si",
			"pop word ptr [rax]",
			"pop rsi",
			"pop [rax]",
			"xchg ax,ax",
			"xchg r8w,ax",
			"nop",
			"xchg r8d,eax",
			"xchg rax,rax",
			"xchg r8,rax",
			"xchg cx,ax",
			"xchg r9w,ax",
			"xchg ecx,eax",
			"xchg r9d,eax",
			"xchg rcx,rax",
			"xchg r9,rax",
			"xchg dx,ax",
			"xchg r10w,ax",
			"xchg edx,eax",
			"xchg r10d,eax",
			"xchg rdx,rax",
			"xchg r10,rax",
			"xchg bx,ax",
			"xchg r11w,ax",
			"xchg ebx,eax",
			"xchg r11d,eax",
			"xchg rbx,rax",
			"xchg r11,rax",
			"xchg sp,ax",
			"xchg r12w,ax",
			"xchg esp,eax",
			"xchg r12d,eax",
			"xchg rsp,rax",
			"xchg r12,rax",
			"xchg bp,ax",
			"xchg r13w,ax",
			"xchg ebp,eax",
			"xchg r13d,eax",
			"xchg rbp,rax",
			"xchg r13,rax",
			"xchg si,ax",
			"xchg r14w,ax",
			"xchg esi,eax",
			"xchg r14d,eax",
			"xchg rsi,rax",
			"xchg r14,rax",
			"xchg di,ax",
			"xchg r15w,ax",
			"xchg edi,eax",
			"xchg r15d,eax",
			"xchg rdi,rax",
			"xchg r15,rax",
			"pause",
			"cbw",
			"cwde",
			"cdqe",
			"cwd",
			"cdq",
			"cqo",
			"wait",
			"pushf",
			"pushfq",
			"popf",
			"popfq",
			"sahf",
			"lahf",
			"mov al,[0F0DEBC9A78563412h]",
			"mov al,[78563412h]",
			"mov ax,[0F0DEBC9A78563412h]",
			"mov ax,[78563412h]",
			"mov eax,[0F0DEBC9A78563412h]",
			"mov eax,[78563412h]",
			"mov rax,[0F0DEBC9A78563412h]",
			"mov rax,[78563412h]",
			"mov [0F0DEBC9A78563412h],al",
			"mov [78563412h],al",
			"mov [0F0DEBC9A78563412h],ax",
			"mov [78563412h],ax",
			"mov [0F0DEBC9A78563412h],eax",
			"mov [78563412h],eax",
			"mov [0F0DEBC9A78563412h],rax",
			"mov [78563412h],rax",
			"movs byte ptr [edi],byte ptr [esi]",
			"movsb",
			"movs word ptr [edi],word ptr [esi]",
			"movsw",
			"movs dword ptr [edi],dword ptr [esi]",
			"movsd",
			"movs qword ptr [edi],qword ptr [esi]",
			"movsq",
			"cmps byte ptr [esi],byte ptr [edi]",
			"cmpsb",
			"cmps word ptr [esi],word ptr [edi]",
			"cmpsw",
			"cmps dword ptr [esi],dword ptr [edi]",
			"cmpsd",
			"cmps qword ptr [esi],qword ptr [edi]",
			"cmpsq",
			"test al,0A5h",
			"test ax,5AA5h",
			"test eax,12345AA5h",
			"test rax,0FFFFFFFF82345AA5h",
			"stos byte ptr [edi]",
			"stosb",
			"stos word ptr [edi]",
			"stosw",
			"stos dword ptr [edi]",
			"stosd",
			"stos qword ptr [edi]",
			"stosq",
			"lods byte ptr [esi]",
			"lodsb",
			"lods word ptr [esi]",
			"lodsw",
			"lods dword ptr [esi]",
			"lodsd",
			"lods qword ptr [esi]",
			"lodsq",
			"scas byte ptr [edi]",
			"scasb",
			"scas word ptr [edi]",
			"scasw",
			"scas dword ptr [edi]",
			"scasd",
			"scas qword ptr [edi]",
			"scasq",
			"mov al,5Ah",
			"mov r8b,5Ah",
			"mov cl,0A5h",
			"mov r9b,0A5h",
			"mov dl,5Ah",
			"mov r10b,5Ah",
			"mov bl,0A5h",
			"mov r11b,0A5h",
			"mov ah,5Ah",
			"mov spl,5Ah",
			"mov r12b,5Ah",
			"mov ch,0A5h",
			"mov bpl,0A5h",
			"mov r13b,0A5h",
			"mov dh,5Ah",
			"mov sil,5Ah",
			"mov r14b,5Ah",
			"mov bh,0A5h",
			"mov dil,0A5h",
			"mov r15b,0A5h",
			"mov ax,0A55Ah",
			"mov r8w,0A55Ah",
			"mov eax,3412A55Ah",
			"mov r8d,3412A55Ah",
			"mov rax,3412A55A37261504h",
			"mov r8,3412A55A37261504h",
			"mov cx,5AA5h",
			"mov r9w,5AA5h",
			"mov ecx,78565AA5h",
			"mov r9d,78565AA5h",
			"mov rcx,78565AA537261504h",
			"mov r9,78565AA537261504h",
			"mov dx,0A55Ah",
			"mov r10w,0A55Ah",
			"mov edx,3412A55Ah",
			"mov r10d,3412A55Ah",
			"mov rdx,3412A55A37261504h",
			"mov r10,3412A55A37261504h",
			"mov bx,5AA5h",
			"mov r11w,5AA5h",
			"mov ebx,78565AA5h",
			"mov r11d,78565AA5h",
			"mov rbx,78565AA537261504h",
			"mov r11,78565AA537261504h",
			"mov sp,0A55Ah",
			"mov r12w,0A55Ah",
			"mov esp,3412A55Ah",
			"mov r12d,3412A55Ah",
			"mov rsp,3412A55A37261504h",
			"mov r12,3412A55A37261504h",
			"mov bp,5AA5h",
			"mov r13w,5AA5h",
			"mov ebp,78565AA5h",
			"mov r13d,78565AA5h",
			"mov rbp,78565AA537261504h",
			"mov r13,78565AA537261504h",
			"mov si,0A55Ah",
			"mov r14w,0A55Ah",
			"mov esi,3412A55Ah",
			"mov r14d,3412A55Ah",
			"mov rsi,3412A55A37261504h",
			"mov r14,3412A55A37261504h",
			"mov di,5AA5h",
			"mov r15w,5AA5h",
			"mov edi,78565AA5h",
			"mov r15d,78565AA5h",
			"mov rdi,78565AA537261504h",
			"mov r15,78565AA537261504h",
			"rol cl,5Ah",
			"rol byte ptr [rax],5Ah",
			"ror dl,0A5h",
			"ror byte ptr [rax],0A5h",
			"rcl bl,5Ah",
			"rcl byte ptr [rax],5Ah",
			"rcr ah,0A5h",
			"rcr byte ptr [rax],0A5h",
			"shl ch,5Ah",
			"shl byte ptr [rax],5Ah",
			"shr dh,0A5h",
			"shr byte ptr [rax],0A5h",
			"sar al,0A5h",
			"sar byte ptr [rax],0A5h",
			"rol cx,5Ah",
			"rol word ptr [rax],5Ah",
			"rol ecx,5Ah",
			"rol dword ptr [rax],5Ah",
			"rol rcx,5Ah",
			"rol qword ptr [rax],5Ah",
			"ror dx,0A5h",
			"ror word ptr [rax],0A5h",
			"ror edx,0A5h",
			"ror dword ptr [rax],0A5h",
			"ror rdx,0A5h",
			"ror qword ptr [rax],0A5h",
			"rcl bx,5Ah",
			"rcl word ptr [rax],5Ah",
			"rcl ebx,5Ah",
			"rcl dword ptr [rax],5Ah",
			"rcl rbx,5Ah",
			"rcl qword ptr [rax],5Ah",
			"rcr sp,0A5h",
			"rcr word ptr [rax],0A5h",
			"rcr esp,0A5h",
			"rcr dword ptr [rax],0A5h",
			"rcr rsp,0A5h",
			"rcr qword ptr [rax],0A5h",
			"shl bp,5Ah",
			"shl word ptr [rax],5Ah",
			"shl ebp,5Ah",
			"shl dword ptr [rax],5Ah",
			"shl rbp,5Ah",
			"shl qword ptr [rax],5Ah",
			"shr si,0A5h",
			"shr word ptr [rax],0A5h",
			"shr esi,0A5h",
			"shr dword ptr [rax],0A5h",
			"shr rsi,0A5h",
			"shr qword ptr [rax],0A5h",
			"sar ax,0A5h",
			"sar word ptr [rax],0A5h",
			"sar eax,0A5h",
			"sar dword ptr [rax],0A5h",
			"sar r8,0A5h",
			"sar qword ptr [rax],0A5h",
			"ret 0A55Ah",
			"ret",
			"mov cl,5Ah",
			"mov byte ptr [rax],5Ah",
			"xabort 5Ah",
			"mov cx,0A55Ah",
			"mov word ptr [rax],0A55Ah",
			"mov ecx,3412A55Ah",
			"mov dword ptr [rax],3412A55Ah",
			"mov rcx,0FFFFFFFF8412A55Ah",
			"mov qword ptr [rax],0FFFFFFFF8412A55Ah",
			"xbegin 7FFFFFFFFFFFA54Fh",
			"xbegin 800000003412A550h",
			"xbegin 800000003412A551h",
			"enterw 0A55Ah,0A6h",
			"enter 0A55Ah,0A6h",
			"leavew",
			"leave",
			"retfw 0A55Ah",
			"retf 0A55Ah",
			"retfq 0A55Ah",
			"retfw",
			"retf",
			"retfq",
			"int 3",
			"int 5Ah",
			"iret",
			"iretd",
			"iretq",
			"rol cl,1",
			"rol byte ptr [rax],1",
			"ror dl,1",
			"ror byte ptr [rax],1",
			"rcl bl,1",
			"rcl byte ptr [rax],1",
			"rcr ah,1",
			"rcr byte ptr [rax],1",
			"shl ch,1",
			"shl byte ptr [rax],1",
			"shr dh,1",
			"shr byte ptr [rax],1",
			"sar al,1",
			"sar byte ptr [rax],1",
			"rol cx,1",
			"rol word ptr [rax],1",
			"rol ecx,1",
			"rol dword ptr [rax],1",
			"rol rcx,1",
			"rol qword ptr [rax],1",
			"ror dx,1",
			"ror word ptr [rax],1",
			"ror edx,1",
			"ror dword ptr [rax],1",
			"ror rdx,1",
			"ror qword ptr [rax],1",
			"rcl bx,1",
			"rcl word ptr [rax],1",
			"rcl ebx,1",
			"rcl dword ptr [rax],1",
			"rcl rbx,1",
			"rcl qword ptr [rax],1",
			"rcr sp,1",
			"rcr word ptr [rax],1",
			"rcr esp,1",
			"rcr dword ptr [rax],1",
			"rcr rsp,1",
			"rcr qword ptr [rax],1",
			"shl bp,1",
			"shl word ptr [rax],1",
			"shl ebp,1",
			"shl dword ptr [rax],1",
			"shl rbp,1",
			"shl qword ptr [rax],1",
			"shr si,1",
			"shr word ptr [rax],1",
			"shr esi,1",
			"shr dword ptr [rax],1",
			"shr rsi,1",
			"shr qword ptr [rax],1",
			"sar ax,1",
			"sar word ptr [rax],1",
			"sar eax,1",
			"sar dword ptr [rax],1",
			"sar r8,1",
			"sar qword ptr [rax],1",
			"rol cl,cl",
			"rol byte ptr [rax],cl",
			"ror dl,cl",
			"ror byte ptr [rax],cl",
			"rcl bl,cl",
			"rcl byte ptr [rax],cl",
			"rcr ah,cl",
			"rcr byte ptr [rax],cl",
			"shl ch,cl",
			"shl byte ptr [rax],cl",
			"shr dh,cl",
			"shr byte ptr [rax],cl",
			"sar al,cl",
			"sar byte ptr [rax],cl",
			"rol cx,cl",
			"rol word ptr [rax],cl",
			"rol ecx,cl",
			"rol dword ptr [rax],cl",
			"rol rcx,cl",
			"rol qword ptr [rax],cl",
			"ror dx,cl",
			"ror word ptr [rax],cl",
			"ror edx,cl",
			"ror dword ptr [rax],cl",
			"ror rdx,cl",
			"ror qword ptr [rax],cl",
			"rcl bx,cl",
			"rcl word ptr [rax],cl",
			"rcl ebx,cl",
			"rcl dword ptr [rax],cl",
			"rcl rbx,cl",
			"rcl qword ptr [rax],cl",
			"rcr sp,cl",
			"rcr word ptr [rax],cl",
			"rcr esp,cl",
			"rcr dword ptr [rax],cl",
			"rcr rsp,cl",
			"rcr qword ptr [rax],cl",
			"shl bp,cl",
			"shl word ptr [rax],cl",
			"shl ebp,cl",
			"shl dword ptr [rax],cl",
			"shl rbp,cl",
			"shl qword ptr [rax],cl",
			"shr si,cl",
			"shr word ptr [rax],cl",
			"shr esi,cl",
			"shr dword ptr [rax],cl",
			"shr rsi,cl",
			"shr qword ptr [rax],cl",
			"sar ax,cl",
			"sar word ptr [rax],cl",
			"sar eax,cl",
			"sar dword ptr [rax],cl",
			"sar r8,cl",
			"sar qword ptr [rax],cl",
			"xlatb",
			"fadd dword ptr [rax]",
			"fmul dword ptr [rax]",
			"fcom dword ptr [rax]",
			"fcomp dword ptr [rax]",
			"fsub dword ptr [rax]",
			"fsubr dword ptr [rax]",
			"fdiv dword ptr [rax]",
			"fdivr dword ptr [rax]",
			"fadd st,st(3)",
			"fmul st,st(3)",
			"fcom st(3)",
			"fcomp st(3)",
			"fsub st,st(3)",
			"fsubr st,st(3)",
			"fdiv st,st(3)",
			"fdivr st,st(3)",
			"fld dword ptr [rax]",
			"fst dword ptr [rax]",
			"fstp dword ptr [rax]",
			"fldenv fpuenv14 ptr [rax]",
			"fldenv [rax]",
			"fldcw [rax]",
			"fnstenv fpuenv14 ptr [rax]",
			"fnstenv [rax]",
			"fnstcw [rax]",
			"fld st(3)",
			"fxch st(3)",
			"fnop",
			"fchs",
			"fabs",
			"ftst",
			"fxam",
			"fld1",
			"fldl2t",
			"fldl2e",
			"fldpi",
			"fldlg2",
			"fldln2",
			"fldz",
			"f2xm1",
			"fyl2x",
			"fptan",
			"fpatan",
			"fxtract",
			"fprem1",
			"fdecstp",
			"fincstp",
			"fprem",
			"fyl2xp1",
			"fsqrt",
			"fsincos",
			"frndint",
			"fscale",
			"fsin",
			"fcos",
			"fiadd dword ptr [rax]",
			"fimul dword ptr [rax]",
			"ficom dword ptr [rax]",
			"ficomp dword ptr [rax]",
			"fisub dword ptr [rax]",
			"fisubr dword ptr [rax]",
			"fidiv dword ptr [rax]",
			"fidivr dword ptr [rax]",
			"fcmovb st,st(3)",
			"fcmove st,st(3)",
			"fcmovbe st,st(3)",
			"fcmovu st,st(3)",
			"fucompp",
			"fild dword ptr [rax]",
			"fisttp dword ptr [rax]",
			"fist dword ptr [rax]",
			"fistp dword ptr [rax]",
			"fld tbyte ptr [rax]",
			"fstp tbyte ptr [rax]",
			"fcmovnb st,st(3)",
			"fcmovne st,st(3)",
			"fcmovnbe st,st(3)",
			"fcmovnu st,st(3)",
			"fnclex",
			"fninit",
			"fucomi st,st(3)",
			"fcomi st,st(3)",
			"fadd qword ptr [rax]",
			"fmul qword ptr [rax]",
			"fcom qword ptr [rax]",
			"fcomp qword ptr [rax]",
			"fsub qword ptr [rax]",
			"fsubr qword ptr [rax]",
			"fdiv qword ptr [rax]",
			"fdivr qword ptr [rax]",
			"fadd st(3),st",
			"fmul st(3),st",
			"fsubr st(3),st",
			"fsub st(3),st",
			"fdivr st(3),st",
			"fdiv st(3),st",
			"fld qword ptr [rax]",
			"fisttp qword ptr [rax]",
			"fst qword ptr [rax]",
			"fstp qword ptr [rax]",
			"frstor fpustate94 ptr [rax]",
			"frstor [rax]",
			"fnsave fpustate94 ptr [rax]",
			"fnsave [rax]",
			"fnstsw [rax]",
			"ffree st(3)",
			"fst st(3)",
			"fstp st(3)",
			"fucom st(3)",
			"fucomp st(3)",
			"fiadd word ptr [rax]",
			"fimul word ptr [rax]",
			"ficom word ptr [rax]",
			"ficomp word ptr [rax]",
			"fisub word ptr [rax]",
			"fisubr word ptr [rax]",
			"fidiv word ptr [rax]",
			"fidivr word ptr [rax]",
			"faddp st(3),st",
			"fmulp st(3),st",
			"fcompp",
			"fsubrp st(3),st",
			"fsubp st(3),st",
			"fdivrp st(3),st",
			"fdivp st(3),st",
			"fild word ptr [rax]",
			"fisttp word ptr [rax]",
			"fist word ptr [rax]",
			"fistp word ptr [rax]",
			"fbld tbyte ptr [rax]",
			"fild qword ptr [rax]",
			"fbstp tbyte ptr [rax]",
			"fistp qword ptr [rax]",
			"fnstsw ax",
			"fucomip st,st(3)",
			"fcomip st,st(3)",
			"loopned 004Eh",
			"loopned 800000000000004Dh",
			"loopne 004Dh",
			"loopne 800000000000004Ch",
			"looped 004Eh",
			"looped 800000000000004Dh",
			"loope 004Dh",
			"loope 800000000000004Ch",
			"loopd 004Eh",
			"loopd 800000000000004Dh",
			"loop 004Dh",
			"loop 800000000000004Ch",
			"jecxz 004Eh",
			"jecxz 800000000000004Dh",
			"jrcxz 004Dh",
			"jrcxz 800000000000004Ch",
			"in al,5Ah",
			"in ax,5Ah",
			"in eax,5Ah",
			"out 5Ah,al",
			"out 5Ah,ax",
			"out 5Ah,eax",
			"call 7FFFFFFFA55A3407h",
			"jmp 7FFFFFFFA55A3407h",
			"jmp 800000000000004Ch",
			"in al,dx",
			"in ax,dx",
			"in eax,dx",
			"out dx,al",
			"out dx,ax",
			"out dx,eax",
			"int1",
			"hlt",
			"cmc",
			"test cl,5Ah",
			"test byte ptr [rax],5Ah",
			"not cl",
			"not byte ptr [rax]",
			"neg dh",
			"neg byte ptr [rax]",
			"mul ch",
			"mul byte ptr [rax]",
			"imul dh",
			"imul byte ptr [rax]",
			"div bh",
			"div byte ptr [rax]",
			"idiv al",
		};
	}
}
#endif
